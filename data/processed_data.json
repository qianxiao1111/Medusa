[
  {
    "sql": "SELECT count(*) FROM singer",
    "dsl": "[{'input': ['singer'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['singer'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM singer",
    "dsl": "[{'input': ['singer'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['singer'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "dsl": "[{'input': ['singer'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Country', 'Age'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_sort_values_0'] SortValues ['Age'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'Country', 'Age'] null null null select "
  },
  {
    "sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "dsl": "[{'input': ['singer'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Country', 'Age'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_sort_values_0'] SortValues ['Age'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'Country', 'Age'] null null null select "
  },
  {
    "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "dsl": "[{'input': ['singer'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Country'], 'index': 'null', 'condition': '==', 'value': 'France'}}, {'input': ['singer', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Age': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['singer'] ['df_bool_0'] Bool ['Country'] null == France ['singer', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "dsl": "[{'input': ['singer'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Country'], 'index': 'null', 'condition': '==', 'value': 'France'}}, {'input': ['singer', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Age': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['singer'] ['df_bool_0'] Bool ['Country'] null == France ['singer', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "dsl": "[{'input': ['singer'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Song_Name', 'Song_release_year'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_sort_values_0'] SortValues ['Age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Song_Name', 'Song_release_year'] [1] 0 False select "
  },
  {
    "sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "dsl": "[{'input': ['singer'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Song_Name', 'Song_release_year'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_sort_values_0'] SortValues ['Age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Song_Name', 'Song_release_year'] [1] 0 False select "
  },
  {
    "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "dsl": "[{'input': ['singer'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Age'], 'index': 'null', 'condition': '>', 'value': 20.0}}, {'input': ['singer', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_drop_duplicates_2'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Country'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_bool_0'] Bool ['Age'] null > 20.0 ['singer', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_drop_duplicates_2'] DropDuplicates ['Country'] null ['df_drop_duplicates_2'] ['df_filter_3'] Filter ['Country'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "dsl": "[{'input': ['singer'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Age'], 'index': 'null', 'condition': '>', 'value': 20.0}}, {'input': ['singer', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_drop_duplicates_2'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Country'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_bool_0'] Bool ['Age'] null > 20.0 ['singer', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_drop_duplicates_2'] DropDuplicates ['Country'] null ['df_drop_duplicates_2'] ['df_filter_3'] Filter ['Country'] null null null select "
  },
  {
    "sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "dsl": "[{'input': ['singer'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Country'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Country', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_groupby_agg_0'] GroupbyAgg ['Country'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Country', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "dsl": "[{'input': ['singer'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Country'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Country', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_groupby_agg_0'] GroupbyAgg ['Country'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Country', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "dsl": "[{'input': ['stadium'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Capacity'], 'index': 'null', 'condition': '>', 'value': 5000.0}, {'column': ['Capacity'], 'index': 'null', 'condition': '<', 'value': 10000.0}]}}, {'input': ['stadium', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Location', 'Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['stadium'] ['df_bool_0'] Bool [{'column': ['Capacity'], 'index': 'null', 'condition': '>', 'value': 5000.0}, {'column': ['Capacity'], 'index': 'null', 'condition': '<', 'value': 10000.0}] ['stadium', 'df_bool_0'] ['df_filter_1'] Filter ['Location', 'Name'] null null null select "
  },
  {
    "sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "dsl": "[{'input': ['stadium'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Capacity'], 'index': 'null', 'condition': '>', 'value': 5000.0}, {'column': ['Capacity'], 'index': 'null', 'condition': '<', 'value': 10000.0}]}}, {'input': ['stadium', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Location', 'Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['stadium'] ['df_bool_0'] Bool [{'column': ['Capacity'], 'index': 'null', 'condition': '>', 'value': 5000.0}, {'column': ['Capacity'], 'index': 'null', 'condition': '<', 'value': 10000.0}] ['stadium', 'df_bool_0'] ['df_filter_1'] Filter ['Location', 'Name'] null null null select "
  },
  {
    "sql": "select avg(capacity) ,  max(capacity) from stadium",
    "dsl": "[{'input': ['stadium'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Capacity': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['stadium'] ['df_statics_column_0'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "dsl": "[{'input': ['stadium'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Average'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Capacity'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['stadium'] ['df_sort_values_0'] SortValues ['Average'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'Capacity'] [1] 0 False select "
  },
  {
    "sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "dsl": "[{'input': ['stadium'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Average'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Capacity'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['stadium'] ['df_sort_values_0'] SortValues ['Average'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'Capacity'] [1] 0 False select "
  },
  {
    "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "dsl": "[{'input': ['concert'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 2014.0}, {'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 2015.0}]}}, {'input': ['concert', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['concert'] ['df_bool_0'] Bool [{'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 2014.0}, {'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 2015.0}] ['concert', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "dsl": "[{'input': ['concert'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 2014.0}, {'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 2015.0}]}}, {'input': ['concert', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['concert'] ['df_bool_0'] Bool [{'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 2014.0}, {'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 2015.0}] ['concert', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['concert'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Year'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Year'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['concert'] ['df_groupby_agg_0'] GroupbyAgg ['Year'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Year'] [1] 0 False select "
  },
  {
    "sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['concert'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Year'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Year'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['concert'] ['df_groupby_agg_0'] GroupbyAgg ['Year'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Year'] [1] 0 False select "
  },
  {
    "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "dsl": "[{'input': ['singer_in_concert', 'singer'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['singer_in_concert.Singer_ID'], 'right_on': ['singer.Singer_ID'], 'how': 'inner', 'lsuffix': 'singer_in_concert.', 'rsuffix': 'singer.'}}, {'input': ['df_join_0', 'concert'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['singer_in_concert.concert_ID'], 'right_on': ['concert.concert_ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'concert.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['concert.Year'], 'index': 'null', 'condition': '==', 'value': 2014.0}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['singer.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer_in_concert', 'singer'] ['df_join_0'] Join ['singer_in_concert.Singer_ID'] ['singer.Singer_ID'] inner singer_in_concert. singer. ['df_join_0', 'concert'] ['df_join_1'] Join ['singer_in_concert.concert_ID'] ['concert.concert_ID'] inner  concert. ['df_join_1'] ['df_bool_2'] Bool ['concert.Year'] null == 2014.0 ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['singer.Name'] null null null select "
  },
  {
    "sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
    "dsl": "[{'input': ['singer_in_concert', 'singer'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['singer_in_concert.Singer_ID'], 'right_on': ['singer.Singer_ID'], 'how': 'inner', 'lsuffix': 'singer_in_concert.', 'rsuffix': 'singer.'}}, {'input': ['df_join_0', 'concert'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['singer_in_concert.concert_ID'], 'right_on': ['concert.concert_ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'concert.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['concert.Year'], 'index': 'null', 'condition': '==', 'value': 2014.0}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['singer.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer_in_concert', 'singer'] ['df_join_0'] Join ['singer_in_concert.Singer_ID'] ['singer.Singer_ID'] inner singer_in_concert. singer. ['df_join_0', 'concert'] ['df_join_1'] Join ['singer_in_concert.concert_ID'] ['concert.concert_ID'] inner  concert. ['df_join_1'] ['df_bool_2'] Bool ['concert.Year'] null == 2014.0 ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['singer.Name'] null null null select "
  },
  {
    "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "dsl": "[{'input': ['singer'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Song_Name'], 'index': 'null', 'condition': 'contains', 'value': 'Hey'}}, {'input': ['singer', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_bool_0'] Bool ['Song_Name'] null contains Hey ['singer', 'df_bool_0'] ['df_filter_1'] Filter ['Name', 'Country'] null null null select "
  },
  {
    "sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "dsl": "[{'input': ['singer'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Song_Name'], 'index': 'null', 'condition': 'contains', 'value': 'Hey'}}, {'input': ['singer', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_bool_0'] Bool ['Song_Name'] null contains Hey ['singer', 'df_bool_0'] ['df_filter_1'] Filter ['Name', 'Country'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM pets WHERE weight  >  10",
    "dsl": "[{'input': ['Pets'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['weight'], 'index': 'null', 'condition': '>', 'value': 10.0}}, {'input': ['Pets', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Pets'] ['df_bool_0'] Bool ['weight'] null > 10.0 ['Pets', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM pets WHERE weight  >  10",
    "dsl": "[{'input': ['Pets'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['weight'], 'index': 'null', 'condition': '>', 'value': 10.0}}, {'input': ['Pets', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Pets'] ['df_bool_0'] Bool ['weight'] null > 10.0 ['Pets', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "dsl": "[{'input': ['Pets'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['pet_age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['weight'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_sort_values_0'] SortValues ['pet_age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['weight'] [1] 0 False select "
  },
  {
    "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "dsl": "[{'input': ['Pets'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['pet_age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['weight'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_sort_values_0'] SortValues ['pet_age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['weight'] [1] 0 False select "
  },
  {
    "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "dsl": "[{'input': ['Pets'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['PetType'], 'agg_args': {'weight': ['max']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(weight,max)', 'PetType'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_groupby_agg_0'] GroupbyAgg ['PetType'] ['max'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(weight,max)', 'PetType'] null null null select "
  },
  {
    "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "dsl": "[{'input': ['Pets'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['PetType'], 'agg_args': {'weight': ['max']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(weight,max)', 'PetType'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_groupby_agg_0'] GroupbyAgg ['PetType'] ['max'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(weight,max)', 'PetType'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Student.Age'], 'index': 'null', 'condition': '>', 'value': 20.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0'] ['df_bool_1'] Bool ['Student.Age'] null > 20.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Student.Age'], 'index': 'null', 'condition': '>', 'value': 20.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0'] ['df_bool_1'] Bool ['Student.Age'] null > 20.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0', 'Pets'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Has_Pet.PetID'], 'right_on': ['Pets.PetID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Pets.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Student.Sex'], 'index': 'null', 'condition': '==', 'value': 'F'}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'dog'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_statics_column_4'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0', 'Pets'] ['df_join_1'] Join ['Has_Pet.PetID'] ['Pets.PetID'] inner  Pets. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['Student.Sex'], 'index': 'null', 'condition': '==', 'value': 'F'}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'dog'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_statics_column_4'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0', 'Pets'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Has_Pet.PetID'], 'right_on': ['Pets.PetID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Pets.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Student.Sex'], 'index': 'null', 'condition': '==', 'value': 'F'}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'dog'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_statics_column_4'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0', 'Pets'] ['df_join_1'] Join ['Has_Pet.PetID'] ['Pets.PetID'] inner  Pets. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['Student.Sex'], 'index': 'null', 'condition': '==', 'value': 'F'}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'dog'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_statics_column_4'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(DISTINCT pettype) FROM pets",
    "dsl": "[{'input': ['Pets'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'PetType': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Pets'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT pettype) FROM pets",
    "dsl": "[{'input': ['Pets'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'PetType': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Pets'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0', 'Pets'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Pets.PetID'], 'right_on': ['Has_Pet.PetID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Pets.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'cat'}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'dog'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_drop_duplicates_4'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Student.Fname'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['Student.Fname'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0', 'Pets'] ['df_join_1'] Join ['Pets.PetID'] ['Has_Pet.PetID'] inner  Pets. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'cat'}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'dog'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_drop_duplicates_4'] DropDuplicates ['Student.Fname'] null ['df_drop_duplicates_4'] ['df_filter_5'] Filter ['Student.Fname'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0', 'Pets'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Pets.PetID'], 'right_on': ['Has_Pet.PetID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Pets.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'cat'}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'dog'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_drop_duplicates_4'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Student.Fname'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['Student.Fname'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0', 'Pets'] ['df_join_1'] Join ['Pets.PetID'] ['Has_Pet.PetID'] inner  Pets. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'cat'}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'dog'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_drop_duplicates_4'] DropDuplicates ['Student.Fname'] null ['df_drop_duplicates_4'] ['df_filter_5'] Filter ['Student.Fname'] null null null select "
  },
  {
    "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "dsl": "[{'input': ['Pets'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['pet_age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['PetType', 'weight'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_sort_values_0'] SortValues ['pet_age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['PetType', 'weight'] [1] 0 False select "
  },
  {
    "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "dsl": "[{'input': ['Pets'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['pet_age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['PetType', 'weight'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_sort_values_0'] SortValues ['pet_age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['PetType', 'weight'] [1] 0 False select "
  },
  {
    "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "dsl": "[{'input': ['Pets'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['pet_age'], 'index': 'null', 'condition': '>', 'value': 1.0}}, {'input': ['Pets', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['PetID', 'weight'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_bool_0'] Bool ['pet_age'] null > 1.0 ['Pets', 'df_bool_0'] ['df_filter_1'] Filter ['PetID', 'weight'] null null null select "
  },
  {
    "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "dsl": "[{'input': ['Pets'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['pet_age'], 'index': 'null', 'condition': '>', 'value': 1.0}}, {'input': ['Pets', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['PetID', 'weight'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_bool_0'] Bool ['pet_age'] null > 1.0 ['Pets', 'df_bool_0'] ['df_filter_1'] Filter ['PetID', 'weight'] null null null select "
  },
  {
    "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "dsl": "[{'input': ['Pets'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['PetType'], 'agg_args': {'pet_age': ['mean', 'max']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(pet_age,mean)', '(pet_age,max)', 'PetType'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_groupby_agg_0'] GroupbyAgg ['PetType'] ['mean', 'max'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(pet_age,mean)', '(pet_age,max)', 'PetType'] null null null select "
  },
  {
    "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "dsl": "[{'input': ['Pets'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['PetType'], 'agg_args': {'pet_age': ['mean', 'max']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(pet_age,mean)', '(pet_age,max)', 'PetType'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_groupby_agg_0'] GroupbyAgg ['PetType'] ['mean', 'max'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(pet_age,mean)', '(pet_age,max)', 'PetType'] null null null select "
  },
  {
    "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "dsl": "[{'input': ['Pets'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['PetType'], 'agg_args': {'weight': ['mean']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(weight,mean)', 'PetType'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_groupby_agg_0'] GroupbyAgg ['PetType'] ['mean'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(weight,mean)', 'PetType'] null null null select "
  },
  {
    "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "dsl": "[{'input': ['Pets'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['PetType'], 'agg_args': {'weight': ['mean']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(weight,mean)', 'PetType'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Pets'] ['df_groupby_agg_0'] GroupbyAgg ['PetType'] ['mean'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(weight,mean)', 'PetType'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0'], 'output': ['df_drop_duplicates_1'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Student.Fname', 'Student.Age'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Student.Fname', 'Student.Age'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0'] ['df_drop_duplicates_1'] DropDuplicates ['Student.Fname', 'Student.Age'] null ['df_drop_duplicates_1'] ['df_filter_2'] Filter ['Student.Fname', 'Student.Age'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0'], 'output': ['df_drop_duplicates_1'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Student.Fname', 'Student.Age'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Student.Fname', 'Student.Age'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0'] ['df_drop_duplicates_1'] DropDuplicates ['Student.Fname', 'Student.Age'] null ['df_drop_duplicates_1'] ['df_filter_2'] Filter ['Student.Fname', 'Student.Age'] null null null select "
  },
  {
    "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Student.LName'], 'index': 'null', 'condition': '==', 'value': 'Smith'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Has_Pet.PetID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0'] ['df_bool_1'] Bool ['Student.LName'] null == Smith ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Has_Pet.PetID'] null null null select "
  },
  {
    "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Student.LName'], 'index': 'null', 'condition': '==', 'value': 'Smith'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Has_Pet.PetID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0'] ['df_bool_1'] Bool ['Student.LName'] null == Smith ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Has_Pet.PetID'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Student.StuID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'Student.StuID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Student.StuID'] ['count'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['(all,count)', 'Student.StuID'] null null null select "
  },
  {
    "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Student.StuID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'Student.StuID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Student.StuID'] ['count'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['(all,count)', 'Student.StuID'] null null null select "
  },
  {
    "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0', 'Pets'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Pets.PetID'], 'right_on': ['Has_Pet.PetID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Pets.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Pets.pet_age'], 'index': 'null', 'condition': '==', 'value': 3.0}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'cat'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Student.LName'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0', 'Pets'] ['df_join_1'] Join ['Pets.PetID'] ['Has_Pet.PetID'] inner  Pets. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['Pets.pet_age'], 'index': 'null', 'condition': '==', 'value': 3.0}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'cat'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['Student.LName'] null null null select "
  },
  {
    "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
    "dsl": "[{'input': ['Student', 'Has_Pet'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Student.StuID'], 'right_on': ['Has_Pet.StuID'], 'how': 'inner', 'lsuffix': 'Student.', 'rsuffix': 'Has_Pet.'}}, {'input': ['df_join_0', 'Pets'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Pets.PetID'], 'right_on': ['Has_Pet.PetID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Pets.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Pets.pet_age'], 'index': 'null', 'condition': '==', 'value': 3.0}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'cat'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Student.LName'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Student', 'Has_Pet'] ['df_join_0'] Join ['Student.StuID'] ['Has_Pet.StuID'] inner Student. Has_Pet. ['df_join_0', 'Pets'] ['df_join_1'] Join ['Pets.PetID'] ['Has_Pet.PetID'] inner  Pets. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['Pets.pet_age'], 'index': 'null', 'condition': '==', 'value': 3.0}, {'column': ['Pets.PetType'], 'index': 'null', 'condition': '==', 'value': 'cat'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['Student.LName'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM CONTINENTS;",
    "dsl": "[{'input': ['continents'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['continents'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM CONTINENTS;",
    "dsl": "[{'input': ['continents'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['continents'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM COUNTRIES;",
    "dsl": "[{'input': ['countries'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['countries'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM COUNTRIES;",
    "dsl": "[{'input': ['countries'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['countries'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "dsl": "[{'input': ['car_names', 'cars_data'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['cars_data.Horsepower'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['car_names.Model'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['car_names', 'cars_data'] ['df_join_0'] Join ['car_names.MakeId'] ['cars_data.Id'] inner car_names. cars_data. ['df_join_0'] ['df_sort_values_1'] SortValues ['cars_data.Horsepower'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['car_names.Model'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "dsl": "[{'input': ['car_names', 'cars_data'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['cars_data.Horsepower'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['car_names.Model'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['car_names', 'cars_data'] ['df_join_0'] Join ['car_names.MakeId'] ['cars_data.Id'] inner car_names. cars_data. ['df_join_0'] ['df_sort_values_1'] SortValues ['cars_data.Horsepower'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['car_names.Model'] [1] 0 False select "
  },
  {
    "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "dsl": "[{'input': ['car_makers', 'model_list'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_makers.Id'], 'right_on': ['model_list.Maker'], 'how': 'inner', 'lsuffix': 'car_makers.', 'rsuffix': 'model_list.'}}, {'input': ['df_join_0', 'car_names'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Model'], 'right_on': ['car_names.Model'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'car_names.'}}, {'input': ['df_join_1', 'cars_data'], 'output': ['df_join_2'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_2'], 'output': ['df_bool_3'], 'command': 'Bool', 'command_args': {'column': ['cars_data.Year'], 'index': 'null', 'condition': '==', 'value': '1970'}}, {'input': ['df_join_2', 'df_bool_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_4'], 'output': ['df_drop_duplicates_5'], 'command': 'DropDuplicates', 'command_args': {'subset': ['car_makers.Maker'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_5'], 'output': ['df_filter_6'], 'command': 'Filter', 'command_args': {'columns': ['car_makers.Maker'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['car_makers', 'model_list'] ['df_join_0'] Join ['car_makers.Id'] ['model_list.Maker'] inner car_makers. model_list. ['df_join_0', 'car_names'] ['df_join_1'] Join ['model_list.Model'] ['car_names.Model'] inner  car_names. ['df_join_1', 'cars_data'] ['df_join_2'] Join ['car_names.MakeId'] ['cars_data.Id'] inner  cars_data. ['df_join_2'] ['df_bool_3'] Bool ['cars_data.Year'] null == 1970 ['df_join_2', 'df_bool_3'] ['df_filter_4'] Filter ['all'] null null null select ['df_filter_4'] ['df_drop_duplicates_5'] DropDuplicates ['car_makers.Maker'] null ['df_drop_duplicates_5'] ['df_filter_6'] Filter ['car_makers.Maker'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "dsl": "[{'input': ['car_makers', 'model_list'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_makers.Id'], 'right_on': ['model_list.Maker'], 'how': 'inner', 'lsuffix': 'car_makers.', 'rsuffix': 'model_list.'}}, {'input': ['df_join_0', 'car_names'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Model'], 'right_on': ['car_names.Model'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'car_names.'}}, {'input': ['df_join_1', 'cars_data'], 'output': ['df_join_2'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_2'], 'output': ['df_bool_3'], 'command': 'Bool', 'command_args': {'column': ['cars_data.Year'], 'index': 'null', 'condition': '==', 'value': '1970'}}, {'input': ['df_join_2', 'df_bool_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_4'], 'output': ['df_drop_duplicates_5'], 'command': 'DropDuplicates', 'command_args': {'subset': ['car_makers.Maker'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_5'], 'output': ['df_filter_6'], 'command': 'Filter', 'command_args': {'columns': ['car_makers.Maker'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['car_makers', 'model_list'] ['df_join_0'] Join ['car_makers.Id'] ['model_list.Maker'] inner car_makers. model_list. ['df_join_0', 'car_names'] ['df_join_1'] Join ['model_list.Model'] ['car_names.Model'] inner  car_names. ['df_join_1', 'cars_data'] ['df_join_2'] Join ['car_names.MakeId'] ['cars_data.Id'] inner  cars_data. ['df_join_2'] ['df_bool_3'] Bool ['cars_data.Year'] null == 1970 ['df_join_2', 'df_bool_3'] ['df_filter_4'] Filter ['all'] null null null select ['df_filter_4'] ['df_drop_duplicates_5'] DropDuplicates ['car_makers.Maker'] null ['df_drop_duplicates_5'] ['df_filter_6'] Filter ['car_makers.Maker'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "dsl": "[{'input': ['model_list', 'car_names'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Model'], 'right_on': ['car_names.Model'], 'how': 'inner', 'lsuffix': 'model_list.', 'rsuffix': 'car_names.'}}, {'input': ['df_join_0', 'cars_data'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['cars_data.Year'], 'index': 'null', 'condition': '>', 'value': 1980.0}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_drop_duplicates_4'], 'command': 'DropDuplicates', 'command_args': {'subset': ['model_list.Model'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['model_list.Model'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['model_list', 'car_names'] ['df_join_0'] Join ['model_list.Model'] ['car_names.Model'] inner model_list. car_names. ['df_join_0', 'cars_data'] ['df_join_1'] Join ['car_names.MakeId'] ['cars_data.Id'] inner  cars_data. ['df_join_1'] ['df_bool_2'] Bool ['cars_data.Year'] null > 1980.0 ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_drop_duplicates_4'] DropDuplicates ['model_list.Model'] null ['df_drop_duplicates_4'] ['df_filter_5'] Filter ['model_list.Model'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
    "dsl": "[{'input': ['model_list', 'car_names'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Model'], 'right_on': ['car_names.Model'], 'how': 'inner', 'lsuffix': 'model_list.', 'rsuffix': 'car_names.'}}, {'input': ['df_join_0', 'cars_data'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['cars_data.Year'], 'index': 'null', 'condition': '>', 'value': 1980.0}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_drop_duplicates_4'], 'command': 'DropDuplicates', 'command_args': {'subset': ['model_list.Model'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['model_list.Model'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['model_list', 'car_names'] ['df_join_0'] Join ['model_list.Model'] ['car_names.Model'] inner model_list. car_names. ['df_join_0', 'cars_data'] ['df_join_1'] Join ['car_names.MakeId'] ['cars_data.Id'] inner  cars_data. ['df_join_1'] ['df_bool_2'] Bool ['cars_data.Year'] null > 1980.0 ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_drop_duplicates_4'] DropDuplicates ['model_list.Model'] null ['df_drop_duplicates_4'] ['df_filter_5'] Filter ['model_list.Model'] null null null select "
  },
  {
    "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "dsl": "[{'input': ['continents', 'countries'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['continents.ContId'], 'right_on': ['countries.Continent'], 'how': 'inner', 'lsuffix': 'continents.', 'rsuffix': 'countries.'}}, {'input': ['df_join_0', 'car_makers'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['countries.CountryId'], 'right_on': ['car_makers.Country'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_1'], 'output': ['df_groupby_agg_2'], 'command': 'GroupbyAgg', 'command_args': {'by': ['continents.Continent'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['continents.Continent', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['continents', 'countries'] ['df_join_0'] Join ['continents.ContId'] ['countries.Continent'] inner continents. countries. ['df_join_0', 'car_makers'] ['df_join_1'] Join ['countries.CountryId'] ['car_makers.Country'] inner  car_makers. ['df_join_1'] ['df_groupby_agg_2'] GroupbyAgg ['continents.Continent'] ['count'] ['df_groupby_agg_2'] ['df_filter_3'] Filter ['continents.Continent', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
    "dsl": "[{'input': ['continents', 'countries'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['continents.ContId'], 'right_on': ['countries.Continent'], 'how': 'inner', 'lsuffix': 'continents.', 'rsuffix': 'countries.'}}, {'input': ['df_join_0', 'car_makers'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['countries.CountryId'], 'right_on': ['car_makers.Country'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_1'], 'output': ['df_groupby_agg_2'], 'command': 'GroupbyAgg', 'command_args': {'by': ['continents.Continent'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['continents.Continent', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['continents', 'countries'] ['df_join_0'] Join ['continents.ContId'] ['countries.Continent'] inner continents. countries. ['df_join_0', 'car_makers'] ['df_join_1'] Join ['countries.CountryId'] ['car_makers.Country'] inner  car_makers. ['df_join_1'] ['df_groupby_agg_2'] GroupbyAgg ['continents.Continent'] ['count'] ['df_groupby_agg_2'] ['df_filter_3'] Filter ['continents.Continent', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "dsl": "[{'input': ['cars_data', 'car_names'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['cars_data.Id'], 'right_on': ['car_names.MakeId'], 'how': 'inner', 'lsuffix': 'cars_data.', 'rsuffix': 'car_names.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['car_names.Make'], 'index': 'null', 'condition': '==', 'value': 'amc hornet sportabout (sw)'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['cars_data.Accelerate'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['cars_data', 'car_names'] ['df_join_0'] Join ['cars_data.Id'] ['car_names.MakeId'] inner cars_data. car_names. ['df_join_0'] ['df_bool_1'] Bool ['car_names.Make'] null == amc hornet sportabout (sw) ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['cars_data.Accelerate'] null null null select "
  },
  {
    "sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
    "dsl": "[{'input': ['cars_data', 'car_names'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['cars_data.Id'], 'right_on': ['car_names.MakeId'], 'how': 'inner', 'lsuffix': 'cars_data.', 'rsuffix': 'car_names.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['car_names.Make'], 'index': 'null', 'condition': '==', 'value': 'amc hornet sportabout (sw)'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['cars_data.Accelerate'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['cars_data', 'car_names'] ['df_join_0'] Join ['cars_data.Id'] ['car_names.MakeId'] inner cars_data. car_names. ['df_join_0'] ['df_bool_1'] Bool ['car_names.Make'] null == amc hornet sportabout (sw) ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['cars_data.Accelerate'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "dsl": "[{'input': ['car_makers', 'countries'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_makers.Country'], 'right_on': ['countries.CountryId'], 'how': 'inner', 'lsuffix': 'car_makers.', 'rsuffix': 'countries.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['countries.CountryName'], 'index': 'null', 'condition': '==', 'value': 'france'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['car_makers', 'countries'] ['df_join_0'] Join ['car_makers.Country'] ['countries.CountryId'] inner car_makers. countries. ['df_join_0'] ['df_bool_1'] Bool ['countries.CountryName'] null == france ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
    "dsl": "[{'input': ['car_makers', 'countries'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_makers.Country'], 'right_on': ['countries.CountryId'], 'how': 'inner', 'lsuffix': 'car_makers.', 'rsuffix': 'countries.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['countries.CountryName'], 'index': 'null', 'condition': '==', 'value': 'france'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['car_makers', 'countries'] ['df_join_0'] Join ['car_makers.Country'] ['countries.CountryId'] inner car_makers. countries. ['df_join_0'] ['df_bool_1'] Bool ['countries.CountryName'] null == france ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "dsl": "[{'input': ['model_list', 'car_makers'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Maker'], 'right_on': ['car_makers.Id'], 'how': 'inner', 'lsuffix': 'model_list.', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_0', 'countries'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['car_makers.Country'], 'right_on': ['countries.CountryId'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'countries.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['countries.CountryName'], 'index': 'null', 'condition': '==', 'value': 'usa'}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_statics_column_4'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['model_list', 'car_makers'] ['df_join_0'] Join ['model_list.Maker'] ['car_makers.Id'] inner model_list. car_makers. ['df_join_0', 'countries'] ['df_join_1'] Join ['car_makers.Country'] ['countries.CountryId'] inner  countries. ['df_join_1'] ['df_bool_2'] Bool ['countries.CountryName'] null == usa ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_statics_column_4'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "dsl": "[{'input': ['model_list', 'car_makers'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Maker'], 'right_on': ['car_makers.Id'], 'how': 'inner', 'lsuffix': 'model_list.', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_0', 'countries'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['car_makers.Country'], 'right_on': ['countries.CountryId'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'countries.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['countries.CountryName'], 'index': 'null', 'condition': '==', 'value': 'usa'}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_statics_column_4'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['model_list', 'car_makers'] ['df_join_0'] Join ['model_list.Maker'] ['car_makers.Id'] inner model_list. car_makers. ['df_join_0', 'countries'] ['df_join_1'] Join ['car_makers.Country'] ['countries.CountryId'] inner  countries. ['df_join_1'] ['df_bool_2'] Bool ['countries.CountryName'] null == usa ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_statics_column_4'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Cylinders'], 'index': 'null', 'condition': '==', 'value': 4.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'MPG': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Cylinders'] null == 4.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Cylinders'], 'index': 'null', 'condition': '==', 'value': 4.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'MPG': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Cylinders'] null == 4.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Cylinders'], 'index': 'null', 'condition': '==', 'value': 8.0}, {'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 1974.0}]}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Weight': ['min']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool [{'column': ['Cylinders'], 'index': 'null', 'condition': '==', 'value': 8.0}, {'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 1974.0}] ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['min'] null "
  },
  {
    "sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Cylinders'], 'index': 'null', 'condition': '==', 'value': 8.0}, {'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 1974.0}]}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Weight': ['min']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool [{'column': ['Cylinders'], 'index': 'null', 'condition': '==', 'value': 8.0}, {'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 1974.0}] ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['min'] null "
  },
  {
    "sql": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "dsl": "[{'input': ['model_list'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Maker', 'Model'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['model_list'] ['df_filter_0'] Filter ['Maker', 'Model'] null null null select "
  },
  {
    "sql": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "dsl": "[{'input': ['model_list'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Maker', 'Model'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['model_list'] ['df_filter_0'] Filter ['Maker', 'Model'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Horsepower'], 'index': 'null', 'condition': '>', 'value': 150.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Horsepower'] null > 150.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Horsepower'], 'index': 'null', 'condition': '>', 'value': 150.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Horsepower'] null > 150.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Year'], 'agg_args': {'Weight': ['mean']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(Weight,mean)', 'Year'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['cars_data'] ['df_groupby_agg_0'] GroupbyAgg ['Year'] ['mean'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(Weight,mean)', 'Year'] null null null select "
  },
  {
    "sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Year'], 'agg_args': {'Weight': ['mean']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(Weight,mean)', 'Year'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['cars_data'] ['df_groupby_agg_0'] GroupbyAgg ['Year'] ['mean'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(Weight,mean)', 'Year'] null null null select "
  },
  {
    "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "dsl": "[{'input': ['countries', 'continents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['countries.Continent'], 'right_on': ['continents.ContId'], 'how': 'inner', 'lsuffix': 'countries.', 'rsuffix': 'continents.'}}, {'input': ['df_join_0', 'car_makers'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['countries.CountryId'], 'right_on': ['car_makers.Country'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['continents.Continent'], 'index': 'null', 'condition': '==', 'value': 'europe'}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_groupby_agg_4'], 'command': 'GroupbyAgg', 'command_args': {'by': ['countries.CountryName'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_4'], 'output': ['df_bool_5'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 3.0}}, {'input': ['df_groupby_agg_4', 'df_bool_5'], 'output': ['df_filter_6'], 'command': 'Filter', 'command_args': {'columns': ['countries.CountryName'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['countries', 'continents'] ['df_join_0'] Join ['countries.Continent'] ['continents.ContId'] inner countries. continents. ['df_join_0', 'car_makers'] ['df_join_1'] Join ['countries.CountryId'] ['car_makers.Country'] inner  car_makers. ['df_join_1'] ['df_bool_2'] Bool ['continents.Continent'] null == europe ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_groupby_agg_4'] GroupbyAgg ['countries.CountryName'] ['count'] ['df_groupby_agg_4'] ['df_bool_5'] Bool ['(all,count)'] null >= 3.0 ['df_groupby_agg_4', 'df_bool_5'] ['df_filter_6'] Filter ['countries.CountryName'] null null null select "
  },
  {
    "sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
    "dsl": "[{'input': ['countries', 'continents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['countries.Continent'], 'right_on': ['continents.ContId'], 'how': 'inner', 'lsuffix': 'countries.', 'rsuffix': 'continents.'}}, {'input': ['df_join_0', 'car_makers'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['countries.CountryId'], 'right_on': ['car_makers.Country'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['continents.Continent'], 'index': 'null', 'condition': '==', 'value': 'europe'}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_groupby_agg_4'], 'command': 'GroupbyAgg', 'command_args': {'by': ['countries.CountryName'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_4'], 'output': ['df_bool_5'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 3.0}}, {'input': ['df_groupby_agg_4', 'df_bool_5'], 'output': ['df_filter_6'], 'command': 'Filter', 'command_args': {'columns': ['countries.CountryName'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['countries', 'continents'] ['df_join_0'] Join ['countries.Continent'] ['continents.ContId'] inner countries. continents. ['df_join_0', 'car_makers'] ['df_join_1'] Join ['countries.CountryId'] ['car_makers.Country'] inner  car_makers. ['df_join_1'] ['df_bool_2'] Bool ['continents.Continent'] null == europe ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_groupby_agg_4'] GroupbyAgg ['countries.CountryName'] ['count'] ['df_groupby_agg_4'] ['df_bool_5'] Bool ['(all,count)'] null >= 3.0 ['df_groupby_agg_4', 'df_bool_5'] ['df_filter_6'] Filter ['countries.CountryName'] null null null select "
  },
  {
    "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "dsl": "[{'input': ['car_names', 'cars_data'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['cars_data.Cylinders'], 'index': 'null', 'condition': '==', 'value': 3.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_sort_values_3'], 'command': 'SortValues', 'command_args': {'by': ['cars_data.Horsepower'], 'ascending': False}}, {'input': ['df_sort_values_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['cars_data.Horsepower', 'car_names.Make'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['car_names', 'cars_data'] ['df_join_0'] Join ['car_names.MakeId'] ['cars_data.Id'] inner car_names. cars_data. ['df_join_0'] ['df_bool_1'] Bool ['cars_data.Cylinders'] null == 3.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_sort_values_3'] SortValues ['cars_data.Horsepower'] False ['df_sort_values_3'] ['df_filter_4'] Filter ['cars_data.Horsepower', 'car_names.Make'] [1] 0 False select "
  },
  {
    "sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "dsl": "[{'input': ['car_names', 'cars_data'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['cars_data.Cylinders'], 'index': 'null', 'condition': '==', 'value': 3.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_sort_values_3'], 'command': 'SortValues', 'command_args': {'by': ['cars_data.Horsepower'], 'ascending': False}}, {'input': ['df_sort_values_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['cars_data.Horsepower', 'car_names.Make'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['car_names', 'cars_data'] ['df_join_0'] Join ['car_names.MakeId'] ['cars_data.Id'] inner car_names. cars_data. ['df_join_0'] ['df_bool_1'] Bool ['cars_data.Cylinders'] null == 3.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_sort_values_3'] SortValues ['cars_data.Horsepower'] False ['df_sort_values_3'] ['df_filter_4'] Filter ['cars_data.Horsepower', 'car_names.Make'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
    "dsl": "[{'input': ['car_names', 'cars_data'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['cars_data.MPG'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['car_names.Model'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['car_names', 'cars_data'] ['df_join_0'] Join ['car_names.MakeId'] ['cars_data.Id'] inner car_names. cars_data. ['df_join_0'] ['df_sort_values_1'] SortValues ['cars_data.MPG'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['car_names.Model'] [1] 0 False select "
  },
  {
    "sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
    "dsl": "[{'input': ['car_names', 'cars_data'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['cars_data.MPG'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['car_names.Model'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['car_names', 'cars_data'] ['df_join_0'] Join ['car_names.MakeId'] ['cars_data.Id'] inner car_names. cars_data. ['df_join_0'] ['df_sort_values_1'] SortValues ['cars_data.MPG'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['car_names.Model'] [1] 0 False select "
  },
  {
    "sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Year'], 'index': 'null', 'condition': '<', 'value': 1980.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Horsepower': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Year'] null < 1980.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "select avg(horsepower) from cars_data where year  <  1980;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Year'], 'index': 'null', 'condition': '<', 'value': 1980.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Horsepower': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Year'] null < 1980.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "dsl": "[{'input': ['car_names', 'cars_data'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['car_names.Model'], 'index': 'null', 'condition': '==', 'value': 'volvo'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'cars_data.Edispl': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['car_names', 'cars_data'] ['df_join_0'] Join ['car_names.MakeId'] ['cars_data.Id'] inner car_names. cars_data. ['df_join_0'] ['df_bool_1'] Bool ['car_names.Model'] null == volvo ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
    "dsl": "[{'input': ['car_names', 'cars_data'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['car_names.Model'], 'index': 'null', 'condition': '==', 'value': 'volvo'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'cars_data.Edispl': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['car_names', 'cars_data'] ['df_join_0'] Join ['car_names.MakeId'] ['cars_data.Id'] inner car_names. cars_data. ['df_join_0'] ['df_bool_1'] Bool ['car_names.Model'] null == volvo ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Cylinders'], 'agg_args': {'Accelerate': ['max']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(Accelerate,max)', 'Cylinders'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['cars_data'] ['df_groupby_agg_0'] GroupbyAgg ['Cylinders'] ['max'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(Accelerate,max)', 'Cylinders'] null null null select "
  },
  {
    "sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Cylinders'], 'agg_args': {'Accelerate': ['max']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(Accelerate,max)', 'Cylinders'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['cars_data'] ['df_groupby_agg_0'] GroupbyAgg ['Cylinders'] ['max'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(Accelerate,max)', 'Cylinders'] null null null select "
  },
  {
    "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "dsl": "[{'input': ['car_names'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Model'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Model'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['car_names'] ['df_groupby_agg_0'] GroupbyAgg ['Model'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Model'] [1] 0 False select "
  },
  {
    "sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "dsl": "[{'input': ['car_names'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Model'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Model'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['car_names'] ['df_groupby_agg_0'] GroupbyAgg ['Model'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Model'] [1] 0 False select "
  },
  {
    "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Cylinders'], 'index': 'null', 'condition': '>', 'value': 4.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Cylinders'] null > 4.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Cylinders'], 'index': 'null', 'condition': '>', 'value': 4.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Cylinders'] null > 4.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 1980.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Year'] null == 1980.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Year'], 'index': 'null', 'condition': '==', 'value': 1980.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Year'] null == 1980.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "dsl": "[{'input': ['car_makers', 'model_list'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_makers.Id'], 'right_on': ['model_list.Maker'], 'how': 'inner', 'lsuffix': 'car_makers.', 'rsuffix': 'model_list.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['car_makers.FullName'], 'index': 'null', 'condition': '==', 'value': 'American Motor Company'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['car_makers', 'model_list'] ['df_join_0'] Join ['car_makers.Id'] ['model_list.Maker'] inner car_makers. model_list. ['df_join_0'] ['df_bool_1'] Bool ['car_makers.FullName'] null == American Motor Company ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
    "dsl": "[{'input': ['car_makers', 'model_list'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_makers.Id'], 'right_on': ['model_list.Maker'], 'how': 'inner', 'lsuffix': 'car_makers.', 'rsuffix': 'model_list.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['car_makers.FullName'], 'index': 'null', 'condition': '==', 'value': 'American Motor Company'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['car_makers', 'model_list'] ['df_join_0'] Join ['car_makers.Id'] ['model_list.Maker'] inner car_makers. model_list. ['df_join_0'] ['df_bool_1'] Bool ['car_makers.FullName'] null == American Motor Company ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "dsl": "[{'input': ['car_names', 'model_list'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.Model'], 'right_on': ['model_list.Model'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'model_list.'}}, {'input': ['df_join_0', 'car_makers'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Maker'], 'right_on': ['car_makers.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_1', 'cars_data'], 'output': ['df_join_2'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_2'], 'output': ['df_bool_3'], 'command': 'Bool', 'command_args': {'or': [{'column': ['car_makers.FullName'], 'index': 'null', 'condition': '==', 'value': 'General Motors'}, {'column': ['cars_data.Weight'], 'index': 'null', 'condition': '>', 'value': 3500.0}]}}, {'input': ['df_join_2', 'df_bool_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_4'], 'output': ['df_drop_duplicates_5'], 'command': 'DropDuplicates', 'command_args': {'subset': ['model_list.Model'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_5'], 'output': ['df_filter_6'], 'command': 'Filter', 'command_args': {'columns': ['model_list.Model'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['car_names', 'model_list'] ['df_join_0'] Join ['car_names.Model'] ['model_list.Model'] inner car_names. model_list. ['df_join_0', 'car_makers'] ['df_join_1'] Join ['model_list.Maker'] ['car_makers.Id'] inner  car_makers. ['df_join_1', 'cars_data'] ['df_join_2'] Join ['car_names.MakeId'] ['cars_data.Id'] inner  cars_data. ['df_join_2'] ['df_bool_3'] Bool [{'column': ['car_makers.FullName'], 'index': 'null', 'condition': '==', 'value': 'General Motors'}, {'column': ['cars_data.Weight'], 'index': 'null', 'condition': '>', 'value': 3500.0}] ['df_join_2', 'df_bool_3'] ['df_filter_4'] Filter ['all'] null null null select ['df_filter_4'] ['df_drop_duplicates_5'] DropDuplicates ['model_list.Model'] null ['df_drop_duplicates_5'] ['df_filter_6'] Filter ['model_list.Model'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
    "dsl": "[{'input': ['car_names', 'model_list'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.Model'], 'right_on': ['model_list.Model'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'model_list.'}}, {'input': ['df_join_0', 'car_makers'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Maker'], 'right_on': ['car_makers.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_1', 'cars_data'], 'output': ['df_join_2'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_2'], 'output': ['df_bool_3'], 'command': 'Bool', 'command_args': {'or': [{'column': ['car_makers.FullName'], 'index': 'null', 'condition': '==', 'value': 'General Motors'}, {'column': ['cars_data.Weight'], 'index': 'null', 'condition': '>', 'value': 3500.0}]}}, {'input': ['df_join_2', 'df_bool_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_4'], 'output': ['df_drop_duplicates_5'], 'command': 'DropDuplicates', 'command_args': {'subset': ['model_list.Model'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_5'], 'output': ['df_filter_6'], 'command': 'Filter', 'command_args': {'columns': ['model_list.Model'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['car_names', 'model_list'] ['df_join_0'] Join ['car_names.Model'] ['model_list.Model'] inner car_names. model_list. ['df_join_0', 'car_makers'] ['df_join_1'] Join ['model_list.Maker'] ['car_makers.Id'] inner  car_makers. ['df_join_1', 'cars_data'] ['df_join_2'] Join ['car_names.MakeId'] ['cars_data.Id'] inner  cars_data. ['df_join_2'] ['df_bool_3'] Bool [{'column': ['car_makers.FullName'], 'index': 'null', 'condition': '==', 'value': 'General Motors'}, {'column': ['cars_data.Weight'], 'index': 'null', 'condition': '>', 'value': 3500.0}] ['df_join_2', 'df_bool_3'] ['df_filter_4'] Filter ['all'] null null null select ['df_filter_4'] ['df_drop_duplicates_5'] DropDuplicates ['model_list.Model'] null ['df_drop_duplicates_5'] ['df_filter_6'] Filter ['model_list.Model'] null null null select "
  },
  {
    "sql": "select distinct year from cars_data where weight between 3000 and 4000;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Weight'], 'index': 'null', 'condition': '>', 'value': 3000.0}, {'column': ['Weight'], 'index': 'null', 'condition': '<', 'value': 4000.0}]}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_drop_duplicates_2'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Year'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Year'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool [{'column': ['Weight'], 'index': 'null', 'condition': '>', 'value': 3000.0}, {'column': ['Weight'], 'index': 'null', 'condition': '<', 'value': 4000.0}] ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_drop_duplicates_2'] DropDuplicates ['Year'] null ['df_drop_duplicates_2'] ['df_filter_3'] Filter ['Year'] null null null select "
  },
  {
    "sql": "select distinct year from cars_data where weight between 3000 and 4000;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Weight'], 'index': 'null', 'condition': '>', 'value': 3000.0}, {'column': ['Weight'], 'index': 'null', 'condition': '<', 'value': 4000.0}]}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_drop_duplicates_2'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Year'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Year'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool [{'column': ['Weight'], 'index': 'null', 'condition': '>', 'value': 3000.0}, {'column': ['Weight'], 'index': 'null', 'condition': '<', 'value': 4000.0}] ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_drop_duplicates_2'] DropDuplicates ['Year'] null ['df_drop_duplicates_2'] ['df_filter_3'] Filter ['Year'] null null null select "
  },
  {
    "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Accelerate'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Horsepower'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['cars_data'] ['df_sort_values_0'] SortValues ['Accelerate'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Horsepower'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Accelerate'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Horsepower'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['cars_data'] ['df_sort_values_0'] SortValues ['Accelerate'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Horsepower'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "dsl": "[{'input': ['cars_data', 'car_names'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['cars_data.Id'], 'right_on': ['car_names.MakeId'], 'how': 'inner', 'lsuffix': 'cars_data.', 'rsuffix': 'car_names.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['car_names.Model'], 'index': 'null', 'condition': '==', 'value': 'volvo'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_sort_values_3'], 'command': 'SortValues', 'command_args': {'by': ['cars_data.Accelerate'], 'ascending': True}}, {'input': ['df_sort_values_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['cars_data.Cylinders'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['cars_data', 'car_names'] ['df_join_0'] Join ['cars_data.Id'] ['car_names.MakeId'] inner cars_data. car_names. ['df_join_0'] ['df_bool_1'] Bool ['car_names.Model'] null == volvo ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_sort_values_3'] SortValues ['cars_data.Accelerate'] True ['df_sort_values_3'] ['df_filter_4'] Filter ['cars_data.Cylinders'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "dsl": "[{'input': ['cars_data', 'car_names'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['cars_data.Id'], 'right_on': ['car_names.MakeId'], 'how': 'inner', 'lsuffix': 'cars_data.', 'rsuffix': 'car_names.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['car_names.Model'], 'index': 'null', 'condition': '==', 'value': 'volvo'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_sort_values_3'], 'command': 'SortValues', 'command_args': {'by': ['cars_data.Accelerate'], 'ascending': True}}, {'input': ['df_sort_values_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['cars_data.Cylinders'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['cars_data', 'car_names'] ['df_join_0'] Join ['cars_data.Id'] ['car_names.MakeId'] inner cars_data. car_names. ['df_join_0'] ['df_bool_1'] Bool ['car_names.Model'] null == volvo ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_sort_values_3'] SortValues ['cars_data.Accelerate'] True ['df_sort_values_3'] ['df_filter_4'] Filter ['cars_data.Cylinders'] [1] 0 False select "
  },
  {
    "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "dsl": "[{'input': ['countries', 'car_makers'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['countries.CountryId'], 'right_on': ['car_makers.Country'], 'how': 'inner', 'lsuffix': 'countries.', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['countries.CountryId'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 2.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['countries', 'car_makers'] ['df_join_0'] Join ['countries.CountryId'] ['car_makers.Country'] inner countries. car_makers. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['countries.CountryId'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null > 2.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['(all,count)'] null null null select "
  },
  {
    "sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "dsl": "[{'input': ['countries', 'car_makers'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['countries.CountryId'], 'right_on': ['car_makers.Country'], 'how': 'inner', 'lsuffix': 'countries.', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['countries.CountryId'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 2.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['countries', 'car_makers'] ['df_join_0'] Join ['countries.CountryId'] ['car_makers.Country'] inner countries. car_makers. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['countries.CountryId'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null > 2.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['(all,count)'] null null null select "
  },
  {
    "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Cylinders'], 'index': 'null', 'condition': '>', 'value': 6.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Cylinders'] null > 6.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Cylinders'], 'index': 'null', 'condition': '>', 'value': 6.0}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool ['Cylinders'] null > 6.0 ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "dsl": "[{'input': ['car_names', 'cars_data'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['cars_data.Cylinders'], 'index': 'null', 'condition': '==', 'value': 4.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_sort_values_3'], 'command': 'SortValues', 'command_args': {'by': ['cars_data.Horsepower'], 'ascending': False}}, {'input': ['df_sort_values_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['car_names.Model'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['car_names', 'cars_data'] ['df_join_0'] Join ['car_names.MakeId'] ['cars_data.Id'] inner car_names. cars_data. ['df_join_0'] ['df_bool_1'] Bool ['cars_data.Cylinders'] null == 4.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_sort_values_3'] SortValues ['cars_data.Horsepower'] False ['df_sort_values_3'] ['df_filter_4'] Filter ['car_names.Model'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "dsl": "[{'input': ['car_names', 'cars_data'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': 'car_names.', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['cars_data.Cylinders'], 'index': 'null', 'condition': '==', 'value': 4.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_sort_values_3'], 'command': 'SortValues', 'command_args': {'by': ['cars_data.Horsepower'], 'ascending': False}}, {'input': ['df_sort_values_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['car_names.Model'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['car_names', 'cars_data'] ['df_join_0'] Join ['car_names.MakeId'] ['cars_data.Id'] inner car_names. cars_data. ['df_join_0'] ['df_bool_1'] Bool ['cars_data.Cylinders'] null == 4.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_sort_values_3'] SortValues ['cars_data.Horsepower'] False ['df_sort_values_3'] ['df_filter_4'] Filter ['car_names.Model'] [1] 0 False select "
  },
  {
    "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Cylinders'], 'index': 'null', 'condition': '==', 'value': 8.0}, {'column': ['Year'], 'index': 'null', 'condition': '<', 'value': 1980.0}]}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'MPG': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool [{'column': ['Cylinders'], 'index': 'null', 'condition': '==', 'value': 8.0}, {'column': ['Year'], 'index': 'null', 'condition': '<', 'value': 1980.0}] ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['max'] null "
  },
  {
    "sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "dsl": "[{'input': ['cars_data'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Cylinders'], 'index': 'null', 'condition': '==', 'value': 8.0}, {'column': ['Year'], 'index': 'null', 'condition': '<', 'value': 1980.0}]}}, {'input': ['cars_data', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'MPG': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['cars_data'] ['df_bool_0'] Bool [{'column': ['Cylinders'], 'index': 'null', 'condition': '==', 'value': 8.0}, {'column': ['Year'], 'index': 'null', 'condition': '<', 'value': 1980.0}] ['cars_data', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "dsl": "[{'input': ['model_list', 'car_names'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Model'], 'right_on': ['car_names.Model'], 'how': 'inner', 'lsuffix': 'model_list.', 'rsuffix': 'car_names.'}}, {'input': ['df_join_0', 'cars_data'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_1', 'car_makers'], 'output': ['df_join_2'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Maker'], 'right_on': ['car_makers.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_2'], 'output': ['df_bool_3'], 'command': 'Bool', 'command_args': {'and': [{'column': ['cars_data.Weight'], 'index': 'null', 'condition': '<', 'value': 3500.0}, {'column': ['car_makers.FullName'], 'index': 'null', 'condition': '!=', 'value': 'Ford Motor Company'}]}}, {'input': ['df_join_2', 'df_bool_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_4'], 'output': ['df_drop_duplicates_5'], 'command': 'DropDuplicates', 'command_args': {'subset': ['model_list.Model'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_5'], 'output': ['df_filter_6'], 'command': 'Filter', 'command_args': {'columns': ['model_list.Model'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['model_list', 'car_names'] ['df_join_0'] Join ['model_list.Model'] ['car_names.Model'] inner model_list. car_names. ['df_join_0', 'cars_data'] ['df_join_1'] Join ['car_names.MakeId'] ['cars_data.Id'] inner  cars_data. ['df_join_1', 'car_makers'] ['df_join_2'] Join ['model_list.Maker'] ['car_makers.Id'] inner  car_makers. ['df_join_2'] ['df_bool_3'] Bool [{'column': ['cars_data.Weight'], 'index': 'null', 'condition': '<', 'value': 3500.0}, {'column': ['car_makers.FullName'], 'index': 'null', 'condition': '!=', 'value': 'Ford Motor Company'}] ['df_join_2', 'df_bool_3'] ['df_filter_4'] Filter ['all'] null null null select ['df_filter_4'] ['df_drop_duplicates_5'] DropDuplicates ['model_list.Model'] null ['df_drop_duplicates_5'] ['df_filter_6'] Filter ['model_list.Model'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "dsl": "[{'input': ['model_list', 'car_names'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Model'], 'right_on': ['car_names.Model'], 'how': 'inner', 'lsuffix': 'model_list.', 'rsuffix': 'car_names.'}}, {'input': ['df_join_0', 'cars_data'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['car_names.MakeId'], 'right_on': ['cars_data.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'cars_data.'}}, {'input': ['df_join_1', 'car_makers'], 'output': ['df_join_2'], 'command': 'Join', 'command_args': {'left_on': ['model_list.Maker'], 'right_on': ['car_makers.Id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'car_makers.'}}, {'input': ['df_join_2'], 'output': ['df_bool_3'], 'command': 'Bool', 'command_args': {'and': [{'column': ['cars_data.Weight'], 'index': 'null', 'condition': '<', 'value': 3500.0}, {'column': ['car_makers.FullName'], 'index': 'null', 'condition': '!=', 'value': 'Ford Motor Company'}]}}, {'input': ['df_join_2', 'df_bool_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_4'], 'output': ['df_drop_duplicates_5'], 'command': 'DropDuplicates', 'command_args': {'subset': ['model_list.Model'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_5'], 'output': ['df_filter_6'], 'command': 'Filter', 'command_args': {'columns': ['model_list.Model'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['model_list', 'car_names'] ['df_join_0'] Join ['model_list.Model'] ['car_names.Model'] inner model_list. car_names. ['df_join_0', 'cars_data'] ['df_join_1'] Join ['car_names.MakeId'] ['cars_data.Id'] inner  cars_data. ['df_join_1', 'car_makers'] ['df_join_2'] Join ['model_list.Maker'] ['car_makers.Id'] inner  car_makers. ['df_join_2'] ['df_bool_3'] Bool [{'column': ['cars_data.Weight'], 'index': 'null', 'condition': '<', 'value': 3500.0}, {'column': ['car_makers.FullName'], 'index': 'null', 'condition': '!=', 'value': 'Ford Motor Company'}] ['df_join_2', 'df_bool_3'] ['df_filter_4'] Filter ['all'] null null null select ['df_filter_4'] ['df_drop_duplicates_5'] DropDuplicates ['model_list.Model'] null ['df_drop_duplicates_5'] ['df_filter_6'] Filter ['model_list.Model'] null null null select "
  },
  {
    "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "dsl": "[{'input': ['airlines'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Airline'], 'index': 'null', 'condition': '==', 'value': 'JetBlue Airways'}}, {'input': ['airlines', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines'] ['df_bool_0'] Bool ['Airline'] null == JetBlue Airways ['airlines', 'df_bool_0'] ['df_filter_1'] Filter ['Country'] null null null select "
  },
  {
    "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "dsl": "[{'input': ['airlines'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Airline'], 'index': 'null', 'condition': '==', 'value': 'JetBlue Airways'}}, {'input': ['airlines', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines'] ['df_bool_0'] Bool ['Airline'] null == JetBlue Airways ['airlines', 'df_bool_0'] ['df_filter_1'] Filter ['Country'] null null null select "
  },
  {
    "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "dsl": "[{'input': ['airlines'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Airline'], 'index': 'null', 'condition': '==', 'value': 'JetBlue Airways'}}, {'input': ['airlines', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Abbreviation'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines'] ['df_bool_0'] Bool ['Airline'] null == JetBlue Airways ['airlines', 'df_bool_0'] ['df_filter_1'] Filter ['Abbreviation'] null null null select "
  },
  {
    "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "dsl": "[{'input': ['airlines'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Airline'], 'index': 'null', 'condition': '==', 'value': 'JetBlue Airways'}}, {'input': ['airlines', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Abbreviation'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines'] ['df_bool_0'] Bool ['Airline'] null == JetBlue Airways ['airlines', 'df_bool_0'] ['df_filter_1'] Filter ['Abbreviation'] null null null select "
  },
  {
    "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "dsl": "[{'input': ['airlines'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Country'], 'index': 'null', 'condition': '==', 'value': 'USA'}}, {'input': ['airlines', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Airline', 'Abbreviation'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines'] ['df_bool_0'] Bool ['Country'] null == USA ['airlines', 'df_bool_0'] ['df_filter_1'] Filter ['Airline', 'Abbreviation'] null null null select "
  },
  {
    "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "dsl": "[{'input': ['airlines'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Country'], 'index': 'null', 'condition': '==', 'value': 'USA'}}, {'input': ['airlines', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Airline', 'Abbreviation'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines'] ['df_bool_0'] Bool ['Country'] null == USA ['airlines', 'df_bool_0'] ['df_filter_1'] Filter ['Airline', 'Abbreviation'] null null null select "
  },
  {
    "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "dsl": "[{'input': ['airports'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['City'], 'index': 'null', 'condition': '==', 'value': 'Anthony'}}, {'input': ['airports', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['AirportCode', 'AirportName'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airports'] ['df_bool_0'] Bool ['City'] null == Anthony ['airports', 'df_bool_0'] ['df_filter_1'] Filter ['AirportCode', 'AirportName'] null null null select "
  },
  {
    "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "dsl": "[{'input': ['airports'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['City'], 'index': 'null', 'condition': '==', 'value': 'Anthony'}}, {'input': ['airports', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['AirportCode', 'AirportName'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airports'] ['df_bool_0'] Bool ['City'] null == Anthony ['airports', 'df_bool_0'] ['df_filter_1'] Filter ['AirportCode', 'AirportName'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM AIRLINES",
    "dsl": "[{'input': ['airlines'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['airlines'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM AIRLINES",
    "dsl": "[{'input': ['airlines'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['airlines'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM AIRPORTS",
    "dsl": "[{'input': ['airports'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['airports'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM AIRPORTS",
    "dsl": "[{'input': ['airports'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['airports'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS",
    "dsl": "[{'input': ['flights'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS",
    "dsl": "[{'input': ['flights'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "dsl": "[{'input': ['airlines'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Abbreviation'], 'index': 'null', 'condition': '==', 'value': 'UAL'}}, {'input': ['airlines', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Airline'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines'] ['df_bool_0'] Bool ['Abbreviation'] null == UAL ['airlines', 'df_bool_0'] ['df_filter_1'] Filter ['Airline'] null null null select "
  },
  {
    "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
    "dsl": "[{'input': ['airlines'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Abbreviation'], 'index': 'null', 'condition': '==', 'value': 'UAL'}}, {'input': ['airlines', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Airline'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines'] ['df_bool_0'] Bool ['Abbreviation'] null == UAL ['airlines', 'df_bool_0'] ['df_filter_1'] Filter ['Airline'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "dsl": "[{'input': ['airlines'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Country'], 'index': 'null', 'condition': '==', 'value': 'USA'}}, {'input': ['airlines', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['airlines'] ['df_bool_0'] Bool ['Country'] null == USA ['airlines', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
    "dsl": "[{'input': ['airlines'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Country'], 'index': 'null', 'condition': '==', 'value': 'USA'}}, {'input': ['airlines', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['airlines'] ['df_bool_0'] Bool ['Country'] null == USA ['airlines', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "dsl": "[{'input': ['airports'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['AirportName'], 'index': 'null', 'condition': '==', 'value': 'Alton'}}, {'input': ['airports', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['City', 'Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airports'] ['df_bool_0'] Bool ['AirportName'] null == Alton ['airports', 'df_bool_0'] ['df_filter_1'] Filter ['City', 'Country'] null null null select "
  },
  {
    "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "dsl": "[{'input': ['airports'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['AirportName'], 'index': 'null', 'condition': '==', 'value': 'Alton'}}, {'input': ['airports', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['City', 'Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airports'] ['df_bool_0'] Bool ['AirportName'] null == Alton ['airports', 'df_bool_0'] ['df_filter_1'] Filter ['City', 'Country'] null null null select "
  },
  {
    "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "dsl": "[{'input': ['airports'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['AirportCode'], 'index': 'null', 'condition': '==', 'value': 'AKO'}}, {'input': ['airports', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['AirportName'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airports'] ['df_bool_0'] Bool ['AirportCode'] null == AKO ['airports', 'df_bool_0'] ['df_filter_1'] Filter ['AirportName'] null null null select "
  },
  {
    "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "dsl": "[{'input': ['airports'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['AirportCode'], 'index': 'null', 'condition': '==', 'value': 'AKO'}}, {'input': ['airports', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['AirportName'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airports'] ['df_bool_0'] Bool ['AirportCode'] null == AKO ['airports', 'df_bool_0'] ['df_filter_1'] Filter ['AirportName'] null null null select "
  },
  {
    "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "dsl": "[{'input': ['airports'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}}, {'input': ['airports', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['AirportName'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airports'] ['df_bool_0'] Bool ['City'] null == Aberdeen ['airports', 'df_bool_0'] ['df_filter_1'] Filter ['AirportName'] null null null select "
  },
  {
    "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "dsl": "[{'input': ['airports'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}}, {'input': ['airports', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['AirportName'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airports'] ['df_bool_0'] Bool ['City'] null == Aberdeen ['airports', 'df_bool_0'] ['df_filter_1'] Filter ['AirportName'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "dsl": "[{'input': ['flights'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['SourceAirport'], 'index': 'null', 'condition': '==', 'value': 'APG'}}, {'input': ['flights', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights'] ['df_bool_0'] Bool ['SourceAirport'] null == APG ['flights', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "dsl": "[{'input': ['flights'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['SourceAirport'], 'index': 'null', 'condition': '==', 'value': 'APG'}}, {'input': ['flights', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights'] ['df_bool_0'] Bool ['SourceAirport'] null == APG ['flights', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "dsl": "[{'input': ['flights'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['DestAirport'], 'index': 'null', 'condition': '==', 'value': 'ATO'}}, {'input': ['flights', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights'] ['df_bool_0'] Bool ['DestAirport'] null == ATO ['flights', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "dsl": "[{'input': ['flights'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['DestAirport'], 'index': 'null', 'condition': '==', 'value': 'ATO'}}, {'input': ['flights', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights'] ['df_bool_0'] Bool ['DestAirport'] null == ATO ['flights', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.SourceAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.SourceAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0'] ['df_bool_1'] Bool ['airports.City'] null == Aberdeen ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.SourceAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.SourceAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0'] ['df_bool_1'] Bool ['airports.City'] null == Aberdeen ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.DestAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.DestAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0'] ['df_bool_1'] Bool ['airports.City'] null == Aberdeen ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.DestAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.DestAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0'] ['df_bool_1'] Bool ['airports.City'] null == Aberdeen ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.DestAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0', 'airports'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['flights.SourceAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'airports.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'and': [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Ashley'}, {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_statics_column_4'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.DestAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0', 'airports'] ['df_join_1'] Join ['flights.SourceAirport'] ['airports.AirportCode'] inner  airports. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Ashley'}, {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_statics_column_4'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.DestAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0', 'airports'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['flights.SourceAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'airports.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'and': [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Ashley'}, {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_statics_column_4'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.DestAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0', 'airports'] ['df_join_1'] Join ['flights.SourceAirport'] ['airports.AirportCode'] inner  airports. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Ashley'}, {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_statics_column_4'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "dsl": "[{'input': ['flights', 'airlines'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.Airline'], 'right_on': ['airlines.uid'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airlines.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'JetBlue Airways'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airlines'] ['df_join_0'] Join ['flights.Airline'] ['airlines.uid'] inner flights. airlines. ['df_join_0'] ['df_bool_1'] Bool ['airlines.Airline'] null == JetBlue Airways ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "dsl": "[{'input': ['flights', 'airlines'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.Airline'], 'right_on': ['airlines.uid'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airlines.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'JetBlue Airways'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airlines'] ['df_join_0'] Join ['flights.Airline'] ['airlines.uid'] inner flights. airlines. ['df_join_0'] ['df_bool_1'] Bool ['airlines.Airline'] null == JetBlue Airways ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.Airline'], 'right_on': ['airlines.uid'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}, {'column': ['flights.DestAirport'], 'index': 'null', 'condition': '==', 'value': 'ASY'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['flights.Airline'] ['airlines.uid'] inner airlines. flights. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}, {'column': ['flights.DestAirport'], 'index': 'null', 'condition': '==', 'value': 'ASY'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.Airline'], 'right_on': ['airlines.uid'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}, {'column': ['flights.DestAirport'], 'index': 'null', 'condition': '==', 'value': 'ASY'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['flights.Airline'] ['airlines.uid'] inner airlines. flights. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}, {'column': ['flights.DestAirport'], 'index': 'null', 'condition': '==', 'value': 'ASY'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.Airline'], 'right_on': ['airlines.uid'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}, {'column': ['flights.SourceAirport'], 'index': 'null', 'condition': '==', 'value': 'AHD'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['flights.Airline'] ['airlines.uid'] inner airlines. flights. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}, {'column': ['flights.SourceAirport'], 'index': 'null', 'condition': '==', 'value': 'AHD'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.Airline'], 'right_on': ['airlines.uid'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}, {'column': ['flights.SourceAirport'], 'index': 'null', 'condition': '==', 'value': 'AHD'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['flights.Airline'] ['airlines.uid'] inner airlines. flights. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}, {'column': ['flights.SourceAirport'], 'index': 'null', 'condition': '==', 'value': 'AHD'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.DestAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0', 'airlines'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'airlines.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'and': [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}, {'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_statics_column_4'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.DestAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0', 'airlines'] ['df_join_1'] Join ['airlines.uid'] ['flights.Airline'] inner  airlines. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}, {'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_statics_column_4'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.DestAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0', 'airlines'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'airlines.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'and': [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}, {'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_statics_column_4'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.DestAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0', 'airlines'] ['df_join_1'] Join ['airlines.uid'] ['flights.Airline'] inner  airlines. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}, {'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_statics_column_4'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['airports', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airports.AirportCode'], 'right_on': ['flights.DestAirport'], 'how': 'inner', 'lsuffix': 'airports.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airports.City'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airports.City'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['airports', 'flights'] ['df_join_0'] Join ['airports.AirportCode'] ['flights.DestAirport'] inner airports. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airports.City'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['airports.City'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['airports', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airports.AirportCode'], 'right_on': ['flights.DestAirport'], 'how': 'inner', 'lsuffix': 'airports.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airports.City'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airports.City'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['airports', 'flights'] ['df_join_0'] Join ['airports.AirportCode'] ['flights.DestAirport'] inner airports. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airports.City'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['airports.City'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['airports', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airports.AirportCode'], 'right_on': ['flights.SourceAirport'], 'how': 'inner', 'lsuffix': 'airports.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airports.City'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airports.City'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['airports', 'flights'] ['df_join_0'] Join ['airports.AirportCode'] ['flights.SourceAirport'] inner airports. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airports.City'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['airports.City'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['airports', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airports.AirportCode'], 'right_on': ['flights.SourceAirport'], 'how': 'inner', 'lsuffix': 'airports.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airports.City'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airports.City'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['airports', 'flights'] ['df_join_0'] Join ['airports.AirportCode'] ['flights.SourceAirport'] inner airports. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airports.City'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['airports.City'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['airports', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airports.AirportCode'], 'right_on': ['flights.DestAirport'], 'how': 'inner', 'lsuffix': 'airports.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airports.AirportCode'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airports.AirportCode'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['airports', 'flights'] ['df_join_0'] Join ['airports.AirportCode'] ['flights.DestAirport'] inner airports. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airports.AirportCode'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['airports.AirportCode'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['airports', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airports.AirportCode'], 'right_on': ['flights.DestAirport'], 'how': 'inner', 'lsuffix': 'airports.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airports.AirportCode'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airports.AirportCode'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['airports', 'flights'] ['df_join_0'] Join ['airports.AirportCode'] ['flights.DestAirport'] inner airports. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airports.AirportCode'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['airports.AirportCode'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "dsl": "[{'input': ['airports', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airports.AirportCode'], 'right_on': ['flights.DestAirport'], 'how': 'inner', 'lsuffix': 'airports.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airports.AirportCode'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': True}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airports.AirportCode'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['airports', 'flights'] ['df_join_0'] Join ['airports.AirportCode'] ['flights.DestAirport'] inner airports. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airports.AirportCode'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] True ['df_sort_values_2'] ['df_filter_3'] Filter ['airports.AirportCode'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "dsl": "[{'input': ['airports', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airports.AirportCode'], 'right_on': ['flights.DestAirport'], 'how': 'inner', 'lsuffix': 'airports.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airports.AirportCode'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': True}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airports.AirportCode'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['airports', 'flights'] ['df_join_0'] Join ['airports.AirportCode'] ['flights.DestAirport'] inner airports. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airports.AirportCode'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] True ['df_sort_values_2'] ['df_filter_3'] Filter ['airports.AirportCode'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airlines.Airline'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airlines.Airline'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner airlines. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airlines.Airline'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['airlines.Airline'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airlines.Airline'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airlines.Airline'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner airlines. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airlines.Airline'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['airlines.Airline'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['flights.SourceAirport'], 'index': 'null', 'condition': '==', 'value': 'AHD'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['airlines.Airline'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner airlines. flights. ['df_join_0'] ['df_bool_1'] Bool ['flights.SourceAirport'] null == AHD ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['airlines.Airline'] null null null select "
  },
  {
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['flights.SourceAirport'], 'index': 'null', 'condition': '==', 'value': 'AHD'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['airlines.Airline'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner airlines. flights. ['df_join_0'] ['df_bool_1'] Bool ['flights.SourceAirport'] null == AHD ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['airlines.Airline'] null null null select "
  },
  {
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['flights.DestAirport'], 'index': 'null', 'condition': '==', 'value': 'AHD'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['airlines.Airline'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner airlines. flights. ['df_join_0'] ['df_bool_1'] Bool ['flights.DestAirport'] null == AHD ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['airlines.Airline'] null null null select "
  },
  {
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['flights.DestAirport'], 'index': 'null', 'condition': '==', 'value': 'AHD'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['airlines.Airline'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner airlines. flights. ['df_join_0'] ['df_bool_1'] Bool ['flights.DestAirport'] null == AHD ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['airlines.Airline'] null null null select "
  },
  {
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airlines.Airline'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 10.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airlines.Airline'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner airlines. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airlines.Airline'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null > 10.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['airlines.Airline'] null null null select "
  },
  {
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airlines.Airline'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 10.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airlines.Airline'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner airlines. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airlines.Airline'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null > 10.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['airlines.Airline'] null null null select "
  },
  {
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airlines.Airline'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '<', 'value': 200.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airlines.Airline'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner airlines. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airlines.Airline'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null < 200.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['airlines.Airline'] null null null select "
  },
  {
    "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
    "dsl": "[{'input': ['airlines', 'flights'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'airlines.', 'rsuffix': 'flights.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['airlines.Airline'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '<', 'value': 200.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['airlines.Airline'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['airlines', 'flights'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner airlines. flights. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['airlines.Airline'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null < 200.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['airlines.Airline'] null null null select "
  },
  {
    "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "dsl": "[{'input': ['flights', 'airlines'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airlines.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['flights.FlightNo'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['flights', 'airlines'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner flights. airlines. ['df_join_0'] ['df_bool_1'] Bool ['airlines.Airline'] null == United Airlines ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['flights.FlightNo'] null null null select "
  },
  {
    "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
    "dsl": "[{'input': ['flights', 'airlines'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['airlines.uid'], 'right_on': ['flights.Airline'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airlines.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airlines.Airline'], 'index': 'null', 'condition': '==', 'value': 'United Airlines'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['flights.FlightNo'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['flights', 'airlines'] ['df_join_0'] Join ['airlines.uid'] ['flights.Airline'] inner flights. airlines. ['df_join_0'] ['df_bool_1'] Bool ['airlines.Airline'] null == United Airlines ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['flights.FlightNo'] null null null select "
  },
  {
    "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "dsl": "[{'input': ['flights'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['SourceAirport'], 'index': 'null', 'condition': '==', 'value': 'APG'}}, {'input': ['flights', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['FlightNo'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['flights'] ['df_bool_0'] Bool ['SourceAirport'] null == APG ['flights', 'df_bool_0'] ['df_filter_1'] Filter ['FlightNo'] null null null select "
  },
  {
    "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "dsl": "[{'input': ['flights'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['SourceAirport'], 'index': 'null', 'condition': '==', 'value': 'APG'}}, {'input': ['flights', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['FlightNo'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['flights'] ['df_bool_0'] Bool ['SourceAirport'] null == APG ['flights', 'df_bool_0'] ['df_filter_1'] Filter ['FlightNo'] null null null select "
  },
  {
    "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "dsl": "[{'input': ['flights'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['DestAirport'], 'index': 'null', 'condition': '==', 'value': 'APG'}}, {'input': ['flights', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['FlightNo'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['flights'] ['df_bool_0'] Bool ['DestAirport'] null == APG ['flights', 'df_bool_0'] ['df_filter_1'] Filter ['FlightNo'] null null null select "
  },
  {
    "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "dsl": "[{'input': ['flights'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['DestAirport'], 'index': 'null', 'condition': '==', 'value': 'APG'}}, {'input': ['flights', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['FlightNo'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['flights'] ['df_bool_0'] Bool ['DestAirport'] null == APG ['flights', 'df_bool_0'] ['df_filter_1'] Filter ['FlightNo'] null null null select "
  },
  {
    "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.SourceAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['flights.FlightNo'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.SourceAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0'] ['df_bool_1'] Bool ['airports.City'] null == Aberdeen ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['flights.FlightNo'] null null null select "
  },
  {
    "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.SourceAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['flights.FlightNo'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.SourceAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0'] ['df_bool_1'] Bool ['airports.City'] null == Aberdeen ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['flights.FlightNo'] null null null select "
  },
  {
    "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.DestAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['flights.FlightNo'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.DestAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0'] ['df_bool_1'] Bool ['airports.City'] null == Aberdeen ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['flights.FlightNo'] null null null select "
  },
  {
    "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.DestAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['flights.FlightNo'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.DestAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0'] ['df_bool_1'] Bool ['airports.City'] null == Aberdeen ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['flights.FlightNo'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.DestAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'or': [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}, {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Abilene'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.DestAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}, {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Abilene'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
    "dsl": "[{'input': ['flights', 'airports'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['flights.DestAirport'], 'right_on': ['airports.AirportCode'], 'how': 'inner', 'lsuffix': 'flights.', 'rsuffix': 'airports.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'or': [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}, {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Abilene'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['flights', 'airports'] ['df_join_0'] Join ['flights.DestAirport'] ['airports.AirportCode'] inner flights. airports. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Aberdeen'}, {'column': ['airports.City'], 'index': 'null', 'condition': '==', 'value': 'Abilene'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM employee",
    "dsl": "[{'input': ['employee'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['employee'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM employee",
    "dsl": "[{'input': ['employee'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['employee'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT name FROM employee ORDER BY age",
    "dsl": "[{'input': ['employee'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['employee'] ['df_sort_values_0'] SortValues ['Age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT name FROM employee ORDER BY age",
    "dsl": "[{'input': ['employee'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['employee'] ['df_sort_values_0'] SortValues ['Age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "dsl": "[{'input': ['employee'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['City'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'City'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['employee'] ['df_groupby_agg_0'] GroupbyAgg ['City'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'City'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "dsl": "[{'input': ['employee'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['City'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'City'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['employee'] ['df_groupby_agg_0'] GroupbyAgg ['City'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'City'] null null null select "
  },
  {
    "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "dsl": "[{'input': ['employee'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Age'], 'index': 'null', 'condition': '<', 'value': 30.0}}, {'input': ['employee', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_groupby_agg_2'], 'command': 'GroupbyAgg', 'command_args': {'by': ['City'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_2'], 'output': ['df_bool_3'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 1.0}}, {'input': ['df_groupby_agg_2', 'df_bool_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['City'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['employee'] ['df_bool_0'] Bool ['Age'] null < 30.0 ['employee', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_groupby_agg_2'] GroupbyAgg ['City'] ['count'] ['df_groupby_agg_2'] ['df_bool_3'] Bool ['(all,count)'] null > 1.0 ['df_groupby_agg_2', 'df_bool_3'] ['df_filter_4'] Filter ['City'] null null null select "
  },
  {
    "sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "dsl": "[{'input': ['employee'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Age'], 'index': 'null', 'condition': '<', 'value': 30.0}}, {'input': ['employee', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_groupby_agg_2'], 'command': 'GroupbyAgg', 'command_args': {'by': ['City'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_2'], 'output': ['df_bool_3'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 1.0}}, {'input': ['df_groupby_agg_2', 'df_bool_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['City'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['employee'] ['df_bool_0'] Bool ['Age'] null < 30.0 ['employee', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_groupby_agg_2'] GroupbyAgg ['City'] ['count'] ['df_groupby_agg_2'] ['df_bool_3'] Bool ['(all,count)'] null > 1.0 ['df_groupby_agg_2', 'df_bool_3'] ['df_filter_4'] Filter ['City'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "dsl": "[{'input': ['shop'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Location'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'Location'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['shop'] ['df_groupby_agg_0'] GroupbyAgg ['Location'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'Location'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "dsl": "[{'input': ['shop'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Location'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'Location'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['shop'] ['df_groupby_agg_0'] GroupbyAgg ['Location'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'Location'] null null null select "
  },
  {
    "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "dsl": "[{'input': ['shop'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Number_products'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Manager_name', 'District'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['shop'] ['df_sort_values_0'] SortValues ['Number_products'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Manager_name', 'District'] [1] 0 False select "
  },
  {
    "sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "dsl": "[{'input': ['shop'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Number_products'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Manager_name', 'District'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['shop'] ['df_sort_values_0'] SortValues ['Number_products'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Manager_name', 'District'] [1] 0 False select "
  },
  {
    "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "dsl": "[{'input': ['shop'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Number_products': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['shop'] ['df_statics_column_0'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "dsl": "[{'input': ['shop'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Number_products': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['shop'] ['df_statics_column_0'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "dsl": "[{'input': ['shop'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Number_products'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Location', 'District'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['shop'] ['df_sort_values_0'] SortValues ['Number_products'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'Location', 'District'] null null null select "
  },
  {
    "sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "dsl": "[{'input': ['shop'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Number_products'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Location', 'District'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['shop'] ['df_sort_values_0'] SortValues ['Number_products'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'Location', 'District'] null null null select "
  },
  {
    "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "dsl": "[{'input': ['employee', 'evaluation'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['employee.Employee_ID'], 'right_on': ['evaluation.Employee_ID'], 'how': 'inner', 'lsuffix': 'employee.', 'rsuffix': 'evaluation.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['evaluation.Bonus'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['employee.Name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['employee', 'evaluation'] ['df_join_0'] Join ['employee.Employee_ID'] ['evaluation.Employee_ID'] inner employee. evaluation. ['df_join_0'] ['df_sort_values_1'] SortValues ['evaluation.Bonus'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['employee.Name'] [1] 0 False select "
  },
  {
    "sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "dsl": "[{'input': ['employee', 'evaluation'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['employee.Employee_ID'], 'right_on': ['evaluation.Employee_ID'], 'how': 'inner', 'lsuffix': 'employee.', 'rsuffix': 'evaluation.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['evaluation.Bonus'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['employee.Name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['employee', 'evaluation'] ['df_join_0'] Join ['employee.Employee_ID'] ['evaluation.Employee_ID'] inner employee. evaluation. ['df_join_0'] ['df_sort_values_1'] SortValues ['evaluation.Bonus'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['employee.Name'] [1] 0 False select "
  },
  {
    "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "dsl": "[{'input': ['hiring', 'shop'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['hiring.Shop_ID'], 'right_on': ['shop.Shop_ID'], 'how': 'inner', 'lsuffix': 'hiring.', 'rsuffix': 'shop.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['shop.Name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'shop.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['hiring', 'shop'] ['df_join_0'] Join ['hiring.Shop_ID'] ['shop.Shop_ID'] inner hiring. shop. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['shop.Name'] ['count'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['(all,count)', 'shop.Name'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "dsl": "[{'input': ['hiring', 'shop'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['hiring.Shop_ID'], 'right_on': ['shop.Shop_ID'], 'how': 'inner', 'lsuffix': 'hiring.', 'rsuffix': 'shop.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['shop.Name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'shop.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['hiring', 'shop'] ['df_join_0'] Join ['hiring.Shop_ID'] ['shop.Shop_ID'] inner hiring. shop. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['shop.Name'] ['count'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['(all,count)', 'shop.Name'] null null null select "
  },
  {
    "sql": "SELECT sum(bonus) FROM evaluation",
    "dsl": "[{'input': ['evaluation'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Bonus': ['sum']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['evaluation'] ['df_statics_column_0'] StaticsColumn ['sum'] null "
  },
  {
    "sql": "SELECT sum(bonus) FROM evaluation",
    "dsl": "[{'input': ['evaluation'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Bonus': ['sum']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['evaluation'] ['df_statics_column_0'] StaticsColumn ['sum'] null "
  },
  {
    "sql": "SELECT * FROM hiring",
    "dsl": "[{'input': ['hiring'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['hiring'] ['df_filter_0'] Filter ['all'] null null null select "
  },
  {
    "sql": "SELECT * FROM hiring",
    "dsl": "[{'input': ['hiring'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['hiring'] ['df_filter_0'] Filter ['all'] null null null select "
  },
  {
    "sql": "SELECT count(DISTINCT LOCATION) FROM shop",
    "dsl": "[{'input': ['shop'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Location': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['shop'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT LOCATION) FROM shop",
    "dsl": "[{'input': ['shop'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Location': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['shop'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(*) FROM Documents",
    "dsl": "[{'input': ['Documents'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Documents'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Documents",
    "dsl": "[{'input': ['Documents'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Documents'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "dsl": "[{'input': ['Documents'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Document_ID', 'Document_Name', 'Document_Description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Documents'] ['df_filter_0'] Filter ['Document_ID', 'Document_Name', 'Document_Description'] null null null select "
  },
  {
    "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "dsl": "[{'input': ['Documents'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Document_ID', 'Document_Name', 'Document_Description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Documents'] ['df_filter_0'] Filter ['Document_ID', 'Document_Name', 'Document_Description'] null null null select "
  },
  {
    "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "dsl": "[{'input': ['Documents'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Document_Description'], 'index': 'null', 'condition': 'contains', 'value': 'w'}}, {'input': ['Documents', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Document_Name', 'Template_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Documents'] ['df_bool_0'] Bool ['Document_Description'] null contains w ['Documents', 'df_bool_0'] ['df_filter_1'] Filter ['Document_Name', 'Template_ID'] null null null select "
  },
  {
    "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "dsl": "[{'input': ['Documents'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Document_Description'], 'index': 'null', 'condition': 'contains', 'value': 'w'}}, {'input': ['Documents', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Document_Name', 'Template_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Documents'] ['df_bool_0'] Bool ['Document_Description'] null contains w ['Documents', 'df_bool_0'] ['df_filter_1'] Filter ['Document_Name', 'Template_ID'] null null null select "
  },
  {
    "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "dsl": "[{'input': ['Documents'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Document_Name'], 'index': 'null', 'condition': '==', 'value': 'Robbin CV'}}, {'input': ['Documents', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Document_ID', 'Template_ID', 'Document_Description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Documents'] ['df_bool_0'] Bool ['Document_Name'] null == Robbin CV ['Documents', 'df_bool_0'] ['df_filter_1'] Filter ['Document_ID', 'Template_ID', 'Document_Description'] null null null select "
  },
  {
    "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "dsl": "[{'input': ['Documents'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Document_Name'], 'index': 'null', 'condition': '==', 'value': 'Robbin CV'}}, {'input': ['Documents', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Document_ID', 'Template_ID', 'Document_Description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Documents'] ['df_bool_0'] Bool ['Document_Name'] null == Robbin CV ['Documents', 'df_bool_0'] ['df_filter_1'] Filter ['Document_ID', 'Template_ID', 'Document_Description'] null null null select "
  },
  {
    "sql": "SELECT count(DISTINCT template_id) FROM Documents",
    "dsl": "[{'input': ['Documents'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Template_ID': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Documents'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT template_id) FROM Documents",
    "dsl": "[{'input': ['Documents'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Template_ID': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Documents'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "dsl": "[{'input': ['Documents', 'Templates'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Documents.Template_ID'], 'right_on': ['Templates.Template_ID'], 'how': 'inner', 'lsuffix': 'Documents.', 'rsuffix': 'Templates.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Templates.Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'PPT'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Documents', 'Templates'] ['df_join_0'] Join ['Documents.Template_ID'] ['Templates.Template_ID'] inner Documents. Templates. ['df_join_0'] ['df_bool_1'] Bool ['Templates.Template_Type_Code'] null == PPT ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
    "dsl": "[{'input': ['Documents', 'Templates'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Documents.Template_ID'], 'right_on': ['Templates.Template_ID'], 'how': 'inner', 'lsuffix': 'Documents.', 'rsuffix': 'Templates.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Templates.Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'PPT'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Documents', 'Templates'] ['df_join_0'] Join ['Documents.Template_ID'] ['Templates.Template_ID'] inner Documents. Templates. ['df_join_0'] ['df_bool_1'] Bool ['Templates.Template_Type_Code'] null == PPT ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "dsl": "[{'input': ['Documents'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Template_ID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_ID', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Documents'] ['df_groupby_agg_0'] GroupbyAgg ['Template_ID'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Template_ID', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "dsl": "[{'input': ['Documents'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Template_ID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_ID', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Documents'] ['df_groupby_agg_0'] GroupbyAgg ['Template_ID'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Template_ID', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "dsl": "[{'input': ['Documents'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Template_ID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 1.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Template_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Documents'] ['df_groupby_agg_0'] GroupbyAgg ['Template_ID'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null > 1.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Template_ID'] null null null select "
  },
  {
    "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "dsl": "[{'input': ['Documents'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Template_ID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 1.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Template_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Documents'] ['df_groupby_agg_0'] GroupbyAgg ['Template_ID'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null > 1.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Template_ID'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM Templates",
    "dsl": "[{'input': ['Templates'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Templates'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Templates",
    "dsl": "[{'input': ['Templates'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Templates'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "dsl": "[{'input': ['Templates'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Template_ID', 'Version_Number', 'Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_filter_0'] Filter ['Template_ID', 'Version_Number', 'Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "dsl": "[{'input': ['Templates'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Template_ID', 'Version_Number', 'Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_filter_0'] Filter ['Template_ID', 'Version_Number', 'Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT template_type_code FROM Templates",
    "dsl": "[{'input': ['Templates'], 'output': ['df_drop_duplicates_0'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Template_Type_Code'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_drop_duplicates_0'] DropDuplicates ['Template_Type_Code'] null ['df_drop_duplicates_0'] ['df_filter_1'] Filter ['Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT template_type_code FROM Templates",
    "dsl": "[{'input': ['Templates'], 'output': ['df_drop_duplicates_0'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Template_Type_Code'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_drop_duplicates_0'] DropDuplicates ['Template_Type_Code'] null ['df_drop_duplicates_0'] ['df_filter_1'] Filter ['Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "dsl": "[{'input': ['Templates'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'PP'}, {'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'PPT'}]}}, {'input': ['Templates', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_bool_0'] Bool [{'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'PP'}, {'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'PPT'}] ['Templates', 'df_bool_0'] ['df_filter_1'] Filter ['Template_ID'] null null null select "
  },
  {
    "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "dsl": "[{'input': ['Templates'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'PP'}, {'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'PPT'}]}}, {'input': ['Templates', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_bool_0'] Bool [{'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'PP'}, {'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'PPT'}] ['Templates', 'df_bool_0'] ['df_filter_1'] Filter ['Template_ID'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "dsl": "[{'input': ['Templates'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'CV'}}, {'input': ['Templates', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Templates'] ['df_bool_0'] Bool ['Template_Type_Code'] null == CV ['Templates', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "dsl": "[{'input': ['Templates'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'CV'}}, {'input': ['Templates', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Templates'] ['df_bool_0'] Bool ['Template_Type_Code'] null == CV ['Templates', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "dsl": "[{'input': ['Templates'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Version_Number'], 'index': 'null', 'condition': '>', 'value': 5.0}}, {'input': ['Templates', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Version_Number', 'Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_bool_0'] Bool ['Version_Number'] null > 5.0 ['Templates', 'df_bool_0'] ['df_filter_1'] Filter ['Version_Number', 'Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "dsl": "[{'input': ['Templates'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Version_Number'], 'index': 'null', 'condition': '>', 'value': 5.0}}, {'input': ['Templates', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Version_Number', 'Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_bool_0'] Bool ['Version_Number'] null > 5.0 ['Templates', 'df_bool_0'] ['df_filter_1'] Filter ['Version_Number', 'Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "dsl": "[{'input': ['Templates'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Template_Type_Code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_groupby_agg_0'] GroupbyAgg ['Template_Type_Code'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Template_Type_Code', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "dsl": "[{'input': ['Templates'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Template_Type_Code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_groupby_agg_0'] GroupbyAgg ['Template_Type_Code'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Template_Type_Code', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Templates'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Template_Type_Code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_groupby_agg_0'] GroupbyAgg ['Template_Type_Code'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Template_Type_Code'] [1] 0 False select "
  },
  {
    "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Templates'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Template_Type_Code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_groupby_agg_0'] GroupbyAgg ['Template_Type_Code'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Template_Type_Code'] [1] 0 False select "
  },
  {
    "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "dsl": "[{'input': ['Templates'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Template_Type_Code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '<', 'value': 3.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_groupby_agg_0'] GroupbyAgg ['Template_Type_Code'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null < 3.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "dsl": "[{'input': ['Templates'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Template_Type_Code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '<', 'value': 3.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates'] ['df_groupby_agg_0'] GroupbyAgg ['Template_Type_Code'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null < 3.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "dsl": "[{'input': ['Templates', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Templates.Template_ID'], 'right_on': ['Documents.Template_ID'], 'how': 'inner', 'lsuffix': 'Templates.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Documents.Document_Name'], 'index': 'null', 'condition': '==', 'value': 'Data base'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Templates.Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates', 'Documents'] ['df_join_0'] Join ['Templates.Template_ID'] ['Documents.Template_ID'] inner Templates. Documents. ['df_join_0'] ['df_bool_1'] Bool ['Documents.Document_Name'] null == Data base ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Templates.Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
    "dsl": "[{'input': ['Templates', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Templates.Template_ID'], 'right_on': ['Documents.Template_ID'], 'how': 'inner', 'lsuffix': 'Templates.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Documents.Document_Name'], 'index': 'null', 'condition': '==', 'value': 'Data base'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Templates.Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates', 'Documents'] ['df_join_0'] Join ['Templates.Template_ID'] ['Documents.Template_ID'] inner Templates. Documents. ['df_join_0'] ['df_bool_1'] Bool ['Documents.Document_Name'] null == Data base ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Templates.Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "dsl": "[{'input': ['Templates', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Templates.Template_ID'], 'right_on': ['Documents.Template_ID'], 'how': 'inner', 'lsuffix': 'Templates.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Templates.Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'BK'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Documents.Document_Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates', 'Documents'] ['df_join_0'] Join ['Templates.Template_ID'] ['Documents.Template_ID'] inner Templates. Documents. ['df_join_0'] ['df_bool_1'] Bool ['Templates.Template_Type_Code'] null == BK ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Documents.Document_Name'] null null null select "
  },
  {
    "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
    "dsl": "[{'input': ['Templates', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Templates.Template_ID'], 'right_on': ['Documents.Template_ID'], 'how': 'inner', 'lsuffix': 'Templates.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Templates.Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'BK'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Documents.Document_Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates', 'Documents'] ['df_join_0'] Join ['Templates.Template_ID'] ['Documents.Template_ID'] inner Templates. Documents. ['df_join_0'] ['df_bool_1'] Bool ['Templates.Template_Type_Code'] null == BK ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Documents.Document_Name'] null null null select "
  },
  {
    "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "dsl": "[{'input': ['Templates', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Templates.Template_ID'], 'right_on': ['Documents.Template_ID'], 'how': 'inner', 'lsuffix': 'Templates.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Templates.Template_Type_Code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Templates.Template_Type_Code', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates', 'Documents'] ['df_join_0'] Join ['Templates.Template_ID'] ['Documents.Template_ID'] inner Templates. Documents. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Templates.Template_Type_Code'] ['count'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['Templates.Template_Type_Code', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
    "dsl": "[{'input': ['Templates', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Templates.Template_ID'], 'right_on': ['Documents.Template_ID'], 'how': 'inner', 'lsuffix': 'Templates.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Templates.Template_Type_Code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Templates.Template_Type_Code', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Templates', 'Documents'] ['df_join_0'] Join ['Templates.Template_ID'] ['Documents.Template_ID'] inner Templates. Documents. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Templates.Template_Type_Code'] ['count'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['Templates.Template_Type_Code', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Templates', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Templates.Template_ID'], 'right_on': ['Documents.Template_ID'], 'how': 'inner', 'lsuffix': 'Templates.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Templates.Template_Type_Code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Templates.Template_Type_Code'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Templates', 'Documents'] ['df_join_0'] Join ['Templates.Template_ID'] ['Documents.Template_ID'] inner Templates. Documents. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Templates.Template_Type_Code'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Templates.Template_Type_Code'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Templates', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Templates.Template_ID'], 'right_on': ['Documents.Template_ID'], 'how': 'inner', 'lsuffix': 'Templates.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Templates.Template_Type_Code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Templates.Template_Type_Code'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Templates', 'Documents'] ['df_join_0'] Join ['Templates.Template_ID'] ['Documents.Template_ID'] inner Templates. Documents. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Templates.Template_Type_Code'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Templates.Template_Type_Code'] [1] 0 False select "
  },
  {
    "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "dsl": "[{'input': ['Ref_Template_Types'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code', 'Template_Type_Description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Ref_Template_Types'] ['df_filter_0'] Filter ['Template_Type_Code', 'Template_Type_Description'] null null null select "
  },
  {
    "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "dsl": "[{'input': ['Ref_Template_Types'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code', 'Template_Type_Description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Ref_Template_Types'] ['df_filter_0'] Filter ['Template_Type_Code', 'Template_Type_Description'] null null null select "
  },
  {
    "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "dsl": "[{'input': ['Ref_Template_Types'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'AD'}}, {'input': ['Ref_Template_Types', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Ref_Template_Types'] ['df_bool_0'] Bool ['Template_Type_Code'] null == AD ['Ref_Template_Types', 'df_bool_0'] ['df_filter_1'] Filter ['Template_Type_Description'] null null null select "
  },
  {
    "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "dsl": "[{'input': ['Ref_Template_Types'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Template_Type_Code'], 'index': 'null', 'condition': '==', 'value': 'AD'}}, {'input': ['Ref_Template_Types', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Ref_Template_Types'] ['df_bool_0'] Bool ['Template_Type_Code'] null == AD ['Ref_Template_Types', 'df_bool_0'] ['df_filter_1'] Filter ['Template_Type_Description'] null null null select "
  },
  {
    "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "dsl": "[{'input': ['Ref_Template_Types'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Template_Type_Description'], 'index': 'null', 'condition': '==', 'value': 'Book'}}, {'input': ['Ref_Template_Types', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Ref_Template_Types'] ['df_bool_0'] Bool ['Template_Type_Description'] null == Book ['Ref_Template_Types', 'df_bool_0'] ['df_filter_1'] Filter ['Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "dsl": "[{'input': ['Ref_Template_Types'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Template_Type_Description'], 'index': 'null', 'condition': '==', 'value': 'Book'}}, {'input': ['Ref_Template_Types', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Template_Type_Code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Ref_Template_Types'] ['df_bool_0'] Bool ['Template_Type_Description'] null == Book ['Ref_Template_Types', 'df_bool_0'] ['df_filter_1'] Filter ['Template_Type_Code'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "dsl": "[{'input': ['Ref_Template_Types', 'Templates'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Ref_Template_Types.Template_Type_Code'], 'right_on': ['Templates.Template_Type_Code'], 'how': 'inner', 'lsuffix': 'Ref_Template_Types.', 'rsuffix': 'Templates.'}}, {'input': ['df_join_0', 'Documents'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Templates.Template_ID'], 'right_on': ['Documents.Template_ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Documents.'}}, {'input': ['df_join_1'], 'output': ['df_drop_duplicates_2'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Ref_Template_Types.Template_Type_Description'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Ref_Template_Types.Template_Type_Description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Ref_Template_Types', 'Templates'] ['df_join_0'] Join ['Ref_Template_Types.Template_Type_Code'] ['Templates.Template_Type_Code'] inner Ref_Template_Types. Templates. ['df_join_0', 'Documents'] ['df_join_1'] Join ['Templates.Template_ID'] ['Documents.Template_ID'] inner  Documents. ['df_join_1'] ['df_drop_duplicates_2'] DropDuplicates ['Ref_Template_Types.Template_Type_Description'] null ['df_drop_duplicates_2'] ['df_filter_3'] Filter ['Ref_Template_Types.Template_Type_Description'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
    "dsl": "[{'input': ['Ref_Template_Types', 'Templates'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Ref_Template_Types.Template_Type_Code'], 'right_on': ['Templates.Template_Type_Code'], 'how': 'inner', 'lsuffix': 'Ref_Template_Types.', 'rsuffix': 'Templates.'}}, {'input': ['df_join_0', 'Documents'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Templates.Template_ID'], 'right_on': ['Documents.Template_ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Documents.'}}, {'input': ['df_join_1'], 'output': ['df_drop_duplicates_2'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Ref_Template_Types.Template_Type_Description'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Ref_Template_Types.Template_Type_Description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Ref_Template_Types', 'Templates'] ['df_join_0'] Join ['Ref_Template_Types.Template_Type_Code'] ['Templates.Template_Type_Code'] inner Ref_Template_Types. Templates. ['df_join_0', 'Documents'] ['df_join_1'] Join ['Templates.Template_ID'] ['Documents.Template_ID'] inner  Documents. ['df_join_1'] ['df_drop_duplicates_2'] DropDuplicates ['Ref_Template_Types.Template_Type_Description'] null ['df_drop_duplicates_2'] ['df_filter_3'] Filter ['Ref_Template_Types.Template_Type_Description'] null null null select "
  },
  {
    "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "dsl": "[{'input': ['Ref_Template_Types', 'Templates'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Ref_Template_Types.Template_Type_Code'], 'right_on': ['Templates.Template_Type_Code'], 'how': 'inner', 'lsuffix': 'Ref_Template_Types.', 'rsuffix': 'Templates.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Ref_Template_Types.Template_Type_Description'], 'index': 'null', 'condition': '==', 'value': 'Presentation'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Templates.Template_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Ref_Template_Types', 'Templates'] ['df_join_0'] Join ['Ref_Template_Types.Template_Type_Code'] ['Templates.Template_Type_Code'] inner Ref_Template_Types. Templates. ['df_join_0'] ['df_bool_1'] Bool ['Ref_Template_Types.Template_Type_Description'] null == Presentation ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Templates.Template_ID'] null null null select "
  },
  {
    "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
    "dsl": "[{'input': ['Ref_Template_Types', 'Templates'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Ref_Template_Types.Template_Type_Code'], 'right_on': ['Templates.Template_Type_Code'], 'how': 'inner', 'lsuffix': 'Ref_Template_Types.', 'rsuffix': 'Templates.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Ref_Template_Types.Template_Type_Description'], 'index': 'null', 'condition': '==', 'value': 'Presentation'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Templates.Template_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Ref_Template_Types', 'Templates'] ['df_join_0'] Join ['Ref_Template_Types.Template_Type_Code'] ['Templates.Template_Type_Code'] inner Ref_Template_Types. Templates. ['df_join_0'] ['df_bool_1'] Bool ['Ref_Template_Types.Template_Type_Description'] null == Presentation ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Templates.Template_ID'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM Paragraphs",
    "dsl": "[{'input': ['Paragraphs'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Paragraphs'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Paragraphs",
    "dsl": "[{'input': ['Paragraphs'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Paragraphs'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "dsl": "[{'input': ['Paragraphs', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Paragraphs.Document_ID'], 'right_on': ['Documents.Document_ID'], 'how': 'inner', 'lsuffix': 'Paragraphs.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Documents.Document_Name'], 'index': 'null', 'condition': '==', 'value': 'Summer Show'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Paragraphs', 'Documents'] ['df_join_0'] Join ['Paragraphs.Document_ID'] ['Documents.Document_ID'] inner Paragraphs. Documents. ['df_join_0'] ['df_bool_1'] Bool ['Documents.Document_Name'] null == Summer Show ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
    "dsl": "[{'input': ['Paragraphs', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Paragraphs.Document_ID'], 'right_on': ['Documents.Document_ID'], 'how': 'inner', 'lsuffix': 'Paragraphs.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Documents.Document_Name'], 'index': 'null', 'condition': '==', 'value': 'Summer Show'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Paragraphs', 'Documents'] ['df_join_0'] Join ['Paragraphs.Document_ID'] ['Documents.Document_ID'] inner Paragraphs. Documents. ['df_join_0'] ['df_bool_1'] Bool ['Documents.Document_Name'] null == Summer Show ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "select other_details from paragraphs where paragraph_text like 'korea'",
    "dsl": "[{'input': ['Paragraphs'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Paragraph_Text'], 'index': 'null', 'condition': 'contains', 'value': 'korea'}}, {'input': ['Paragraphs', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Other_Details'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs'] ['df_bool_0'] Bool ['Paragraph_Text'] null contains korea ['Paragraphs', 'df_bool_0'] ['df_filter_1'] Filter ['Other_Details'] null null null select "
  },
  {
    "sql": "select other_details from paragraphs where paragraph_text like 'korea'",
    "dsl": "[{'input': ['Paragraphs'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Paragraph_Text'], 'index': 'null', 'condition': 'contains', 'value': 'korea'}}, {'input': ['Paragraphs', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Other_Details'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs'] ['df_bool_0'] Bool ['Paragraph_Text'] null contains korea ['Paragraphs', 'df_bool_0'] ['df_filter_1'] Filter ['Other_Details'] null null null select "
  },
  {
    "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "dsl": "[{'input': ['Paragraphs', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Paragraphs.Document_ID'], 'right_on': ['Documents.Document_ID'], 'how': 'inner', 'lsuffix': 'Paragraphs.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Documents.Document_Name'], 'index': 'null', 'condition': '==', 'value': 'Welcome to NY'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Paragraphs.Paragraph_ID', 'Paragraphs.Paragraph_Text'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs', 'Documents'] ['df_join_0'] Join ['Paragraphs.Document_ID'] ['Documents.Document_ID'] inner Paragraphs. Documents. ['df_join_0'] ['df_bool_1'] Bool ['Documents.Document_Name'] null == Welcome to NY ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Paragraphs.Paragraph_ID', 'Paragraphs.Paragraph_Text'] null null null select "
  },
  {
    "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "dsl": "[{'input': ['Paragraphs', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Paragraphs.Document_ID'], 'right_on': ['Documents.Document_ID'], 'how': 'inner', 'lsuffix': 'Paragraphs.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Documents.Document_Name'], 'index': 'null', 'condition': '==', 'value': 'Welcome to NY'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Paragraphs.Paragraph_ID', 'Paragraphs.Paragraph_Text'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs', 'Documents'] ['df_join_0'] Join ['Paragraphs.Document_ID'] ['Documents.Document_ID'] inner Paragraphs. Documents. ['df_join_0'] ['df_bool_1'] Bool ['Documents.Document_Name'] null == Welcome to NY ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Paragraphs.Paragraph_ID', 'Paragraphs.Paragraph_Text'] null null null select "
  },
  {
    "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "dsl": "[{'input': ['Paragraphs', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Paragraphs.Document_ID'], 'right_on': ['Documents.Document_ID'], 'how': 'inner', 'lsuffix': 'Paragraphs.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Documents.Document_Name'], 'index': 'null', 'condition': '==', 'value': 'Customer reviews'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Paragraphs.Paragraph_Text'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs', 'Documents'] ['df_join_0'] Join ['Paragraphs.Document_ID'] ['Documents.Document_ID'] inner Paragraphs. Documents. ['df_join_0'] ['df_bool_1'] Bool ['Documents.Document_Name'] null == Customer reviews ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Paragraphs.Paragraph_Text'] null null null select "
  },
  {
    "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
    "dsl": "[{'input': ['Paragraphs', 'Documents'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Paragraphs.Document_ID'], 'right_on': ['Documents.Document_ID'], 'how': 'inner', 'lsuffix': 'Paragraphs.', 'rsuffix': 'Documents.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Documents.Document_Name'], 'index': 'null', 'condition': '==', 'value': 'Customer reviews'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Paragraphs.Paragraph_Text'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs', 'Documents'] ['df_join_0'] Join ['Paragraphs.Document_ID'] ['Documents.Document_ID'] inner Paragraphs. Documents. ['df_join_0'] ['df_bool_1'] Bool ['Documents.Document_Name'] null == Customer reviews ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Paragraphs.Paragraph_Text'] null null null select "
  },
  {
    "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "dsl": "[{'input': ['Paragraphs'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Document_ID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 2.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Document_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs'] ['df_groupby_agg_0'] GroupbyAgg ['Document_ID'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null >= 2.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Document_ID'] null null null select "
  },
  {
    "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "dsl": "[{'input': ['Paragraphs'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Document_ID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 2.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Document_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs'] ['df_groupby_agg_0'] GroupbyAgg ['Document_ID'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null >= 2.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Document_ID'] null null null select "
  },
  {
    "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "dsl": "[{'input': ['Paragraphs'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Document_ID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Document_ID'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs'] ['df_groupby_agg_0'] GroupbyAgg ['Document_ID'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['Document_ID'] [1] 0 False select "
  },
  {
    "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "dsl": "[{'input': ['Paragraphs'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Document_ID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Document_ID'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs'] ['df_groupby_agg_0'] GroupbyAgg ['Document_ID'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['Document_ID'] [1] 0 False select "
  },
  {
    "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "dsl": "[{'input': ['Paragraphs'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Document_ID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 1.0}, {'column': ['(all,count)'], 'index': 'null', 'condition': '<', 'value': 2.0}]}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Document_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs'] ['df_groupby_agg_0'] GroupbyAgg ['Document_ID'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool [{'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 1.0}, {'column': ['(all,count)'], 'index': 'null', 'condition': '<', 'value': 2.0}] ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Document_ID'] null null null select "
  },
  {
    "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "dsl": "[{'input': ['Paragraphs'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Document_ID'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 1.0}, {'column': ['(all,count)'], 'index': 'null', 'condition': '<', 'value': 2.0}]}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Document_ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Paragraphs'] ['df_groupby_agg_0'] GroupbyAgg ['Document_ID'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool [{'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 1.0}, {'column': ['(all,count)'], 'index': 'null', 'condition': '<', 'value': 2.0}] ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Document_ID'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM teacher",
    "dsl": "[{'input': ['teacher'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['teacher'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM teacher",
    "dsl": "[{'input': ['teacher'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['teacher'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT Name FROM teacher ORDER BY Age ASC",
    "dsl": "[{'input': ['teacher'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_sort_values_0'] SortValues ['Age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM teacher ORDER BY Age ASC",
    "dsl": "[{'input': ['teacher'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_sort_values_0'] SortValues ['Age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Age ,  Hometown FROM teacher",
    "dsl": "[{'input': ['teacher'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Age', 'Hometown'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_filter_0'] Filter ['Age', 'Hometown'] null null null select "
  },
  {
    "sql": "SELECT Age ,  Hometown FROM teacher",
    "dsl": "[{'input': ['teacher'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Age', 'Hometown'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_filter_0'] Filter ['Age', 'Hometown'] null null null select "
  },
  {
    "sql": "select name from teacher where hometown != \"little lever urban district\"",
    "dsl": "[{'input': ['teacher'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Hometown'], 'index': 'null', 'condition': '!=', 'value': 'little lever urban district'}}, {'input': ['teacher', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_bool_0'] Bool ['Hometown'] null != little lever urban district ['teacher', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "select name from teacher where hometown != \"little lever urban district\"",
    "dsl": "[{'input': ['teacher'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Hometown'], 'index': 'null', 'condition': '!=', 'value': 'little lever urban district'}}, {'input': ['teacher', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_bool_0'] Bool ['Hometown'] null != little lever urban district ['teacher', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "dsl": "[{'input': ['teacher'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Age'], 'index': 'null', 'condition': '==', 'value': 32.0}, {'column': ['Age'], 'index': 'null', 'condition': '==', 'value': 33.0}]}}, {'input': ['teacher', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_bool_0'] Bool [{'column': ['Age'], 'index': 'null', 'condition': '==', 'value': 32.0}, {'column': ['Age'], 'index': 'null', 'condition': '==', 'value': 33.0}] ['teacher', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "dsl": "[{'input': ['teacher'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Age'], 'index': 'null', 'condition': '==', 'value': 32.0}, {'column': ['Age'], 'index': 'null', 'condition': '==', 'value': 33.0}]}}, {'input': ['teacher', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_bool_0'] Bool [{'column': ['Age'], 'index': 'null', 'condition': '==', 'value': 32.0}, {'column': ['Age'], 'index': 'null', 'condition': '==', 'value': 33.0}] ['teacher', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "dsl": "[{'input': ['teacher'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Hometown'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_sort_values_0'] SortValues ['Age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Hometown'] [1] 0 False select "
  },
  {
    "sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "dsl": "[{'input': ['teacher'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Hometown'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_sort_values_0'] SortValues ['Age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Hometown'] [1] 0 False select "
  },
  {
    "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "dsl": "[{'input': ['teacher'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Hometown'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Hometown', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_groupby_agg_0'] GroupbyAgg ['Hometown'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Hometown', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "dsl": "[{'input': ['teacher'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Hometown'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Hometown', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_groupby_agg_0'] GroupbyAgg ['Hometown'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Hometown', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "dsl": "[{'input': ['teacher'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Hometown'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Hometown'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_groupby_agg_0'] GroupbyAgg ['Hometown'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Hometown'] [1] 0 False select "
  },
  {
    "sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "dsl": "[{'input': ['teacher'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Hometown'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Hometown'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_groupby_agg_0'] GroupbyAgg ['Hometown'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Hometown'] [1] 0 False select "
  },
  {
    "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "dsl": "[{'input': ['teacher'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Hometown'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 2.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Hometown'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_groupby_agg_0'] GroupbyAgg ['Hometown'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null >= 2.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Hometown'] null null null select "
  },
  {
    "sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "dsl": "[{'input': ['teacher'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Hometown'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 2.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Hometown'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['teacher'] ['df_groupby_agg_0'] GroupbyAgg ['Hometown'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null >= 2.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Hometown'] null null null select "
  },
  {
    "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "dsl": "[{'input': ['course_arrange', 'course'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Course_ID'], 'right_on': ['course.Course_ID'], 'how': 'inner', 'lsuffix': 'course_arrange.', 'rsuffix': 'course.'}}, {'input': ['df_join_0', 'teacher'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Teacher_ID'], 'right_on': ['teacher.Teacher_ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'teacher.'}}, {'input': ['df_join_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['teacher.Name', 'course.Course'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['course_arrange', 'course'] ['df_join_0'] Join ['course_arrange.Course_ID'] ['course.Course_ID'] inner course_arrange. course. ['df_join_0', 'teacher'] ['df_join_1'] Join ['course_arrange.Teacher_ID'] ['teacher.Teacher_ID'] inner  teacher. ['df_join_1'] ['df_filter_2'] Filter ['teacher.Name', 'course.Course'] null null null select "
  },
  {
    "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
    "dsl": "[{'input': ['course_arrange', 'course'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Course_ID'], 'right_on': ['course.Course_ID'], 'how': 'inner', 'lsuffix': 'course_arrange.', 'rsuffix': 'course.'}}, {'input': ['df_join_0', 'teacher'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Teacher_ID'], 'right_on': ['teacher.Teacher_ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'teacher.'}}, {'input': ['df_join_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['teacher.Name', 'course.Course'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['course_arrange', 'course'] ['df_join_0'] Join ['course_arrange.Course_ID'] ['course.Course_ID'] inner course_arrange. course. ['df_join_0', 'teacher'] ['df_join_1'] Join ['course_arrange.Teacher_ID'] ['teacher.Teacher_ID'] inner  teacher. ['df_join_1'] ['df_filter_2'] Filter ['teacher.Name', 'course.Course'] null null null select "
  },
  {
    "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "dsl": "[{'input': ['course_arrange', 'course'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Course_ID'], 'right_on': ['course.Course_ID'], 'how': 'inner', 'lsuffix': 'course_arrange.', 'rsuffix': 'course.'}}, {'input': ['df_join_0', 'teacher'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Teacher_ID'], 'right_on': ['teacher.Teacher_ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'teacher.'}}, {'input': ['df_join_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['teacher.Name'], 'ascending': True}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['teacher.Name', 'course.Course'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['course_arrange', 'course'] ['df_join_0'] Join ['course_arrange.Course_ID'] ['course.Course_ID'] inner course_arrange. course. ['df_join_0', 'teacher'] ['df_join_1'] Join ['course_arrange.Teacher_ID'] ['teacher.Teacher_ID'] inner  teacher. ['df_join_1'] ['df_sort_values_2'] SortValues ['teacher.Name'] True ['df_sort_values_2'] ['df_filter_3'] Filter ['teacher.Name', 'course.Course'] null null null select "
  },
  {
    "sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
    "dsl": "[{'input': ['course_arrange', 'course'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Course_ID'], 'right_on': ['course.Course_ID'], 'how': 'inner', 'lsuffix': 'course_arrange.', 'rsuffix': 'course.'}}, {'input': ['df_join_0', 'teacher'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Teacher_ID'], 'right_on': ['teacher.Teacher_ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'teacher.'}}, {'input': ['df_join_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['teacher.Name'], 'ascending': True}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['teacher.Name', 'course.Course'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['course_arrange', 'course'] ['df_join_0'] Join ['course_arrange.Course_ID'] ['course.Course_ID'] inner course_arrange. course. ['df_join_0', 'teacher'] ['df_join_1'] Join ['course_arrange.Teacher_ID'] ['teacher.Teacher_ID'] inner  teacher. ['df_join_1'] ['df_sort_values_2'] SortValues ['teacher.Name'] True ['df_sort_values_2'] ['df_filter_3'] Filter ['teacher.Name', 'course.Course'] null null null select "
  },
  {
    "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "dsl": "[{'input': ['course_arrange', 'course'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Course_ID'], 'right_on': ['course.Course_ID'], 'how': 'inner', 'lsuffix': 'course_arrange.', 'rsuffix': 'course.'}}, {'input': ['df_join_0', 'teacher'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Teacher_ID'], 'right_on': ['teacher.Teacher_ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'teacher.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['course.Course'], 'index': 'null', 'condition': '==', 'value': 'Math'}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['teacher.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['course_arrange', 'course'] ['df_join_0'] Join ['course_arrange.Course_ID'] ['course.Course_ID'] inner course_arrange. course. ['df_join_0', 'teacher'] ['df_join_1'] Join ['course_arrange.Teacher_ID'] ['teacher.Teacher_ID'] inner  teacher. ['df_join_1'] ['df_bool_2'] Bool ['course.Course'] null == Math ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['teacher.Name'] null null null select "
  },
  {
    "sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
    "dsl": "[{'input': ['course_arrange', 'course'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Course_ID'], 'right_on': ['course.Course_ID'], 'how': 'inner', 'lsuffix': 'course_arrange.', 'rsuffix': 'course.'}}, {'input': ['df_join_0', 'teacher'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Teacher_ID'], 'right_on': ['teacher.Teacher_ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'teacher.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['course.Course'], 'index': 'null', 'condition': '==', 'value': 'Math'}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['teacher.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['course_arrange', 'course'] ['df_join_0'] Join ['course_arrange.Course_ID'] ['course.Course_ID'] inner course_arrange. course. ['df_join_0', 'teacher'] ['df_join_1'] Join ['course_arrange.Teacher_ID'] ['teacher.Teacher_ID'] inner  teacher. ['df_join_1'] ['df_bool_2'] Bool ['course.Course'] null == Math ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['teacher.Name'] null null null select "
  },
  {
    "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "dsl": "[{'input': ['course_arrange', 'teacher'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Teacher_ID'], 'right_on': ['teacher.Teacher_ID'], 'how': 'inner', 'lsuffix': 'course_arrange.', 'rsuffix': 'teacher.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['teacher.Name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['teacher.Name', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['course_arrange', 'teacher'] ['df_join_0'] Join ['course_arrange.Teacher_ID'] ['teacher.Teacher_ID'] inner course_arrange. teacher. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['teacher.Name'] ['count'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['teacher.Name', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "dsl": "[{'input': ['course_arrange', 'teacher'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Teacher_ID'], 'right_on': ['teacher.Teacher_ID'], 'how': 'inner', 'lsuffix': 'course_arrange.', 'rsuffix': 'teacher.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['teacher.Name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['teacher.Name', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['course_arrange', 'teacher'] ['df_join_0'] Join ['course_arrange.Teacher_ID'] ['teacher.Teacher_ID'] inner course_arrange. teacher. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['teacher.Name'] ['count'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['teacher.Name', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "dsl": "[{'input': ['course_arrange', 'teacher'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Teacher_ID'], 'right_on': ['teacher.Teacher_ID'], 'how': 'inner', 'lsuffix': 'course_arrange.', 'rsuffix': 'teacher.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['teacher.Name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 2.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['teacher.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['course_arrange', 'teacher'] ['df_join_0'] Join ['course_arrange.Teacher_ID'] ['teacher.Teacher_ID'] inner course_arrange. teacher. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['teacher.Name'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null >= 2.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['teacher.Name'] null null null select "
  },
  {
    "sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "dsl": "[{'input': ['course_arrange', 'teacher'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['course_arrange.Teacher_ID'], 'right_on': ['teacher.Teacher_ID'], 'how': 'inner', 'lsuffix': 'course_arrange.', 'rsuffix': 'teacher.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['teacher.Name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 2.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['teacher.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['course_arrange', 'teacher'] ['df_join_0'] Join ['course_arrange.Teacher_ID'] ['teacher.Teacher_ID'] inner course_arrange. teacher. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['teacher.Name'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null >= 2.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['teacher.Name'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM visitor WHERE age  <  30",
    "dsl": "[{'input': ['visitor'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Age'], 'index': 'null', 'condition': '<', 'value': 30.0}}, {'input': ['visitor', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['visitor'] ['df_bool_0'] Bool ['Age'] null < 30.0 ['visitor', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
    "dsl": "[{'input': ['visitor'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Level_of_membership'], 'index': 'null', 'condition': '>', 'value': 4.0}}, {'input': ['visitor', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['Level_of_membership'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['visitor'] ['df_bool_0'] Bool ['Level_of_membership'] null > 4.0 ['visitor', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_sort_values_2'] SortValues ['Level_of_membership'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
    "dsl": "[{'input': ['visitor'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Level_of_membership'], 'index': 'null', 'condition': '<=', 'value': 4.0}}, {'input': ['visitor', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Age': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['visitor'] ['df_bool_0'] Bool ['Level_of_membership'] null <= 4.0 ['visitor', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
    "dsl": "[{'input': ['visitor'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Level_of_membership'], 'index': 'null', 'condition': '>', 'value': 4.0}}, {'input': ['visitor', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Level_of_membership'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['visitor'] ['df_bool_0'] Bool ['Level_of_membership'] null > 4.0 ['visitor', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_sort_values_2'] SortValues ['Age'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Name', 'Level_of_membership'] null null null select "
  },
  {
    "sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "dsl": "[{'input': ['museum'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Num_of_Staff'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Museum_ID', 'Name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['museum'] ['df_sort_values_0'] SortValues ['Num_of_Staff'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Museum_ID', 'Name'] [1] 0 False select "
  },
  {
    "sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
    "dsl": "[{'input': ['museum'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Open_Year'], 'index': 'null', 'condition': '<', 'value': 2009.0}}, {'input': ['museum', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Num_of_Staff': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['museum'] ['df_bool_0'] Bool ['Open_Year'] null < 2009.0 ['museum', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "dsl": "[{'input': ['museum'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Name'], 'index': 'null', 'condition': '==', 'value': 'Plaza Museum'}}, {'input': ['museum', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Num_of_Staff', 'Open_Year'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['museum'] ['df_bool_0'] Bool ['Name'] null == Plaza Museum ['museum', 'df_bool_0'] ['df_filter_1'] Filter ['Num_of_Staff', 'Open_Year'] null null null select "
  },
  {
    "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
    "dsl": "[{'input': ['visitor', 'visit'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['visitor.ID'], 'right_on': ['visit.visitor_ID'], 'how': 'inner', 'lsuffix': 'visitor.', 'rsuffix': 'visit.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['visit.Num_of_Ticket'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['visitor.Name', 'visitor.Age'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['visitor', 'visit'] ['df_join_0'] Join ['visitor.ID'] ['visit.visitor_ID'] inner visitor. visit. ['df_join_0'] ['df_sort_values_1'] SortValues ['visit.Num_of_Ticket'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['visitor.Name', 'visitor.Age'] [1] 0 False select "
  },
  {
    "sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
    "dsl": "[{'input': ['visit'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Num_of_Ticket': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['visit'] ['df_statics_column_0'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
    "dsl": "[{'input': ['visitor', 'visit'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['visitor.ID'], 'right_on': ['visit.visitor_ID'], 'how': 'inner', 'lsuffix': 'visitor.', 'rsuffix': 'visit.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['visitor.Level_of_membership'], 'index': 'null', 'condition': '==', 'value': 1.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'visit.Total_spent': ['sum']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['visitor', 'visit'] ['df_join_0'] Join ['visitor.ID'] ['visit.visitor_ID'] inner visitor. visit. ['df_join_0'] ['df_bool_1'] Bool ['visitor.Level_of_membership'] null == 1.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['sum'] null "
  },
  {
    "sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
    "dsl": "[{'input': ['museum'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Open_Year'], 'index': 'null', 'condition': '>', 'value': 2013.0}, {'column': ['Open_Year'], 'index': 'null', 'condition': '<', 'value': 2008.0}]}}, {'input': ['museum', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['museum'] ['df_bool_0'] Bool [{'column': ['Open_Year'], 'index': 'null', 'condition': '>', 'value': 2013.0}, {'column': ['Open_Year'], 'index': 'null', 'condition': '<', 'value': 2008.0}] ['museum', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM players",
    "dsl": "[{'input': ['players'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['players'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM players",
    "dsl": "[{'input': ['players'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['players'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM matches",
    "dsl": "[{'input': ['matches'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM matches",
    "dsl": "[{'input': ['matches'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "dsl": "[{'input': ['players'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['country_code'], 'index': 'null', 'condition': '==', 'value': 'USA'}}, {'input': ['players', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'birth_date'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_bool_0'] Bool ['country_code'] null == USA ['players', 'df_bool_0'] ['df_filter_1'] Filter ['first_name', 'birth_date'] null null null select "
  },
  {
    "sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "dsl": "[{'input': ['players'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['country_code'], 'index': 'null', 'condition': '==', 'value': 'USA'}}, {'input': ['players', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'birth_date'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_bool_0'] Bool ['country_code'] null == USA ['players', 'df_bool_0'] ['df_filter_1'] Filter ['first_name', 'birth_date'] null null null select "
  },
  {
    "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "dsl": "[{'input': ['matches'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'loser_age': ['mean'], 'winner_age': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_statics_column_0'] StaticsColumn ['mean'] ['mean'] null "
  },
  {
    "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "dsl": "[{'input': ['matches'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'loser_age': ['mean'], 'winner_age': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_statics_column_0'] StaticsColumn ['mean'] ['mean'] null "
  },
  {
    "sql": "SELECT avg(winner_rank) FROM matches",
    "dsl": "[{'input': ['matches'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'winner_rank': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_statics_column_0'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT avg(winner_rank) FROM matches",
    "dsl": "[{'input': ['matches'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'winner_rank': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_statics_column_0'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT min(loser_rank) FROM matches",
    "dsl": "[{'input': ['matches'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'loser_rank': ['min']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_statics_column_0'] StaticsColumn ['min'] null "
  },
  {
    "sql": "SELECT min(loser_rank) FROM matches",
    "dsl": "[{'input': ['matches'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'loser_rank': ['min']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_statics_column_0'] StaticsColumn ['min'] null "
  },
  {
    "sql": "SELECT count(DISTINCT country_code) FROM players",
    "dsl": "[{'input': ['players'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'country_code': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['players'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT country_code) FROM players",
    "dsl": "[{'input': ['players'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'country_code': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['players'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT loser_name) FROM matches",
    "dsl": "[{'input': ['matches'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'loser_name': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT loser_name) FROM matches",
    "dsl": "[{'input': ['matches'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'loser_name': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "dsl": "[{'input': ['matches'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['tourney_name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 10.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['tourney_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_groupby_agg_0'] GroupbyAgg ['tourney_name'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null > 10.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['tourney_name'] null null null select "
  },
  {
    "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "dsl": "[{'input': ['matches'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['tourney_name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 10.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['tourney_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_groupby_agg_0'] GroupbyAgg ['tourney_name'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null > 10.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['tourney_name'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "dsl": "[{'input': ['matches'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['year'], 'index': 'null', 'condition': '==', 'value': 2013.0}, {'column': ['year'], 'index': 'null', 'condition': '==', 'value': 2016.0}]}}, {'input': ['matches', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_bool_0'] Bool [{'column': ['year'], 'index': 'null', 'condition': '==', 'value': 2013.0}, {'column': ['year'], 'index': 'null', 'condition': '==', 'value': 2016.0}] ['matches', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "dsl": "[{'input': ['matches'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['year'], 'index': 'null', 'condition': '==', 'value': 2013.0}, {'column': ['year'], 'index': 'null', 'condition': '==', 'value': 2016.0}]}}, {'input': ['matches', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_bool_0'] Bool [{'column': ['year'], 'index': 'null', 'condition': '==', 'value': 2013.0}, {'column': ['year'], 'index': 'null', 'condition': '==', 'value': 2016.0}] ['matches', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "dsl": "[{'input': ['players'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['birth_date'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'country_code'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_sort_values_0'] SortValues ['birth_date'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['first_name', 'country_code'] [1] 0 False select "
  },
  {
    "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "dsl": "[{'input': ['players'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['birth_date'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'country_code'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_sort_values_0'] SortValues ['birth_date'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['first_name', 'country_code'] [1] 0 False select "
  },
  {
    "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "dsl": "[{'input': ['players'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['birth_date'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'last_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_sort_values_0'] SortValues ['birth_date'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['first_name', 'last_name'] null null null select "
  },
  {
    "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "dsl": "[{'input': ['players'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['birth_date'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'last_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_sort_values_0'] SortValues ['birth_date'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['first_name', 'last_name'] null null null select "
  },
  {
    "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "dsl": "[{'input': ['players'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['hand'], 'index': 'null', 'condition': '==', 'value': 'L'}}, {'input': ['players', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['birth_date'], 'ascending': True}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'last_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_bool_0'] Bool ['hand'] null == L ['players', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_sort_values_2'] SortValues ['birth_date'] True ['df_sort_values_2'] ['df_filter_3'] Filter ['first_name', 'last_name'] null null null select "
  },
  {
    "sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "dsl": "[{'input': ['players'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['hand'], 'index': 'null', 'condition': '==', 'value': 'L'}}, {'input': ['players', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['birth_date'], 'ascending': True}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'last_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_bool_0'] Bool ['hand'] null == L ['players', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_sort_values_2'] SortValues ['birth_date'] True ['df_sort_values_2'] ['df_filter_3'] Filter ['first_name', 'last_name'] null null null select "
  },
  {
    "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "dsl": "[{'input': ['players', 'rankings'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['players.player_id'], 'right_on': ['rankings.player_id'], 'how': 'inner', 'lsuffix': 'players.', 'rsuffix': 'rankings.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['rankings.tours'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['players.country_code', 'players.first_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['players', 'rankings'] ['df_join_0'] Join ['players.player_id'] ['rankings.player_id'] inner players. rankings. ['df_join_0'] ['df_sort_values_1'] SortValues ['rankings.tours'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['players.country_code', 'players.first_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "dsl": "[{'input': ['players', 'rankings'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['players.player_id'], 'right_on': ['rankings.player_id'], 'how': 'inner', 'lsuffix': 'players.', 'rsuffix': 'rankings.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['rankings.tours'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['players.country_code', 'players.first_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['players', 'rankings'] ['df_join_0'] Join ['players.player_id'] ['rankings.player_id'] inner players. rankings. ['df_join_0'] ['df_sort_values_1'] SortValues ['rankings.tours'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['players.country_code', 'players.first_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['matches'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['year'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['year'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_groupby_agg_0'] GroupbyAgg ['year'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['year'] [1] 0 False select "
  },
  {
    "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['matches'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['year'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['year'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_groupby_agg_0'] GroupbyAgg ['year'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['year'] [1] 0 False select "
  },
  {
    "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "dsl": "[{'input': ['matches'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['tourney_name'], 'index': 'null', 'condition': '==', 'value': 'Australian Open'}}, {'input': ['matches', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['winner_rank_points'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['winner_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_bool_0'] Bool ['tourney_name'] null == Australian Open ['matches', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_sort_values_2'] SortValues ['winner_rank_points'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['winner_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "dsl": "[{'input': ['matches'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['tourney_name'], 'index': 'null', 'condition': '==', 'value': 'Australian Open'}}, {'input': ['matches', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['winner_rank_points'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['winner_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_bool_0'] Bool ['tourney_name'] null == Australian Open ['matches', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_sort_values_2'] SortValues ['winner_rank_points'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['winner_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "dsl": "[{'input': ['matches'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['minutes'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['winner_name', 'loser_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_sort_values_0'] SortValues ['minutes'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['winner_name', 'loser_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "dsl": "[{'input': ['matches'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['minutes'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['winner_name', 'loser_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_sort_values_0'] SortValues ['minutes'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['winner_name', 'loser_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "dsl": "[{'input': ['players', 'rankings'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['players.player_id'], 'right_on': ['rankings.player_id'], 'how': 'inner', 'lsuffix': 'players.', 'rsuffix': 'rankings.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['players.first_name'], 'agg_args': {'rankings.ranking': ['mean']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(rankings.ranking,mean)', 'players.first_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players', 'rankings'] ['df_join_0'] Join ['players.player_id'] ['rankings.player_id'] inner players. rankings. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['players.first_name'] ['mean'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['(rankings.ranking,mean)', 'players.first_name'] null null null select "
  },
  {
    "sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "dsl": "[{'input': ['players', 'rankings'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['players.player_id'], 'right_on': ['rankings.player_id'], 'how': 'inner', 'lsuffix': 'players.', 'rsuffix': 'rankings.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['players.first_name'], 'agg_args': {'rankings.ranking': ['mean']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(rankings.ranking,mean)', 'players.first_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players', 'rankings'] ['df_join_0'] Join ['players.player_id'] ['rankings.player_id'] inner players. rankings. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['players.first_name'] ['mean'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['(rankings.ranking,mean)', 'players.first_name'] null null null select "
  },
  {
    "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "dsl": "[{'input': ['players', 'rankings'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['players.player_id'], 'right_on': ['rankings.player_id'], 'how': 'inner', 'lsuffix': 'players.', 'rsuffix': 'rankings.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['players.first_name'], 'agg_args': {'rankings.ranking_points': ['sum']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(rankings.ranking_points,sum)', 'players.first_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players', 'rankings'] ['df_join_0'] Join ['players.player_id'] ['rankings.player_id'] inner players. rankings. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['players.first_name'] ['sum'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['(rankings.ranking_points,sum)', 'players.first_name'] null null null select "
  },
  {
    "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
    "dsl": "[{'input': ['players', 'rankings'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['players.player_id'], 'right_on': ['rankings.player_id'], 'how': 'inner', 'lsuffix': 'players.', 'rsuffix': 'rankings.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['players.first_name'], 'agg_args': {'rankings.ranking_points': ['sum']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(rankings.ranking_points,sum)', 'players.first_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players', 'rankings'] ['df_join_0'] Join ['players.player_id'] ['rankings.player_id'] inner players. rankings. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['players.first_name'] ['sum'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['(rankings.ranking_points,sum)', 'players.first_name'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "dsl": "[{'input': ['players'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country_code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'country_code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_groupby_agg_0'] GroupbyAgg ['country_code'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'country_code'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "dsl": "[{'input': ['players'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country_code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'country_code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_groupby_agg_0'] GroupbyAgg ['country_code'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'country_code'] null null null select "
  },
  {
    "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['players'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country_code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['country_code'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_groupby_agg_0'] GroupbyAgg ['country_code'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['country_code'] [1] 0 False select "
  },
  {
    "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['players'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country_code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['country_code'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_groupby_agg_0'] GroupbyAgg ['country_code'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['country_code'] [1] 0 False select "
  },
  {
    "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "dsl": "[{'input': ['players'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country_code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 50.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['country_code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_groupby_agg_0'] GroupbyAgg ['country_code'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null > 50.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['country_code'] null null null select "
  },
  {
    "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "dsl": "[{'input': ['players'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country_code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 50.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['country_code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_groupby_agg_0'] GroupbyAgg ['country_code'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null > 50.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['country_code'] null null null select "
  },
  {
    "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "dsl": "[{'input': ['rankings'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['ranking_date'], 'agg_args': {'tours': ['sum']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(tours,sum)', 'ranking_date'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['rankings'] ['df_groupby_agg_0'] GroupbyAgg ['ranking_date'] ['sum'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(tours,sum)', 'ranking_date'] null null null select "
  },
  {
    "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "dsl": "[{'input': ['rankings'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['ranking_date'], 'agg_args': {'tours': ['sum']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(tours,sum)', 'ranking_date'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['rankings'] ['df_groupby_agg_0'] GroupbyAgg ['ranking_date'] ['sum'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(tours,sum)', 'ranking_date'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "dsl": "[{'input': ['matches'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['year'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'year'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_groupby_agg_0'] GroupbyAgg ['year'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'year'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
    "dsl": "[{'input': ['matches'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['year'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'year'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_groupby_agg_0'] GroupbyAgg ['year'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'year'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "dsl": "[{'input': ['matches'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['winner_age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_drop_duplicates_1'], 'command': 'DropDuplicates', 'command_args': {'subset': ['winner_name', 'winner_rank'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['winner_name', 'winner_rank'], 'index': [3], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_sort_values_0'] SortValues ['winner_age'] True ['df_sort_values_0'] ['df_drop_duplicates_1'] DropDuplicates ['winner_name', 'winner_rank'] null ['df_drop_duplicates_1'] ['df_filter_2'] Filter ['winner_name', 'winner_rank'] [3] 0 False select "
  },
  {
    "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "dsl": "[{'input': ['matches'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['winner_age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_drop_duplicates_1'], 'command': 'DropDuplicates', 'command_args': {'subset': ['winner_name', 'winner_rank'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['winner_name', 'winner_rank'], 'index': [3], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['matches'] ['df_sort_values_0'] SortValues ['winner_age'] True ['df_sort_values_0'] ['df_drop_duplicates_1'] DropDuplicates ['winner_name', 'winner_rank'] null ['df_drop_duplicates_1'] ['df_filter_2'] Filter ['winner_name', 'winner_rank'] [3] 0 False select "
  },
  {
    "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "dsl": "[{'input': ['matches'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['tourney_name'], 'index': 'null', 'condition': '==', 'value': 'WTA Championships'}, {'column': ['winner_hand'], 'index': 'null', 'condition': '==', 'value': 'L'}]}}, {'input': ['matches', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'winner_name': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_bool_0'] Bool [{'column': ['tourney_name'], 'index': 'null', 'condition': '==', 'value': 'WTA Championships'}, {'column': ['winner_hand'], 'index': 'null', 'condition': '==', 'value': 'L'}] ['matches', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "dsl": "[{'input': ['matches'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['tourney_name'], 'index': 'null', 'condition': '==', 'value': 'WTA Championships'}, {'column': ['winner_hand'], 'index': 'null', 'condition': '==', 'value': 'L'}]}}, {'input': ['matches', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'winner_name': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['matches'] ['df_bool_0'] Bool [{'column': ['tourney_name'], 'index': 'null', 'condition': '==', 'value': 'WTA Championships'}, {'column': ['winner_hand'], 'index': 'null', 'condition': '==', 'value': 'L'}] ['matches', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "dsl": "[{'input': ['players', 'matches'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['players.player_id'], 'right_on': ['matches.winner_id'], 'how': 'inner', 'lsuffix': 'players.', 'rsuffix': 'matches.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['matches.winner_rank_points'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['players.first_name', 'players.country_code', 'players.birth_date'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['players', 'matches'] ['df_join_0'] Join ['players.player_id'] ['matches.winner_id'] inner players. matches. ['df_join_0'] ['df_sort_values_1'] SortValues ['matches.winner_rank_points'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['players.first_name', 'players.country_code', 'players.birth_date'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "dsl": "[{'input': ['players', 'matches'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['players.player_id'], 'right_on': ['matches.winner_id'], 'how': 'inner', 'lsuffix': 'players.', 'rsuffix': 'matches.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['matches.winner_rank_points'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['players.first_name', 'players.country_code', 'players.birth_date'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['players', 'matches'] ['df_join_0'] Join ['players.player_id'] ['matches.winner_id'] inner players. matches. ['df_join_0'] ['df_sort_values_1'] SortValues ['matches.winner_rank_points'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['players.first_name', 'players.country_code', 'players.birth_date'] [1] 0 False select "
  },
  {
    "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "dsl": "[{'input': ['players'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['hand'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'hand'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_groupby_agg_0'] GroupbyAgg ['hand'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'hand'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
    "dsl": "[{'input': ['players'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['hand'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'hand'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['players'] ['df_groupby_agg_0'] GroupbyAgg ['hand'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'hand'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
    "dsl": "[{'input': ['ship'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['disposition_of_ship'], 'index': 'null', 'condition': '==', 'value': 'Captured'}}, {'input': ['ship', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['ship'] ['df_bool_0'] Bool ['disposition_of_ship'] null == Captured ['ship', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
    "dsl": "[{'input': ['ship'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['name'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['name', 'tonnage'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['ship'] ['df_sort_values_0'] SortValues ['name'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['name', 'tonnage'] null null null select "
  },
  {
    "sql": "SELECT name ,  date FROM battle",
    "dsl": "[{'input': ['battle'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['name', 'date'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['battle'] ['df_filter_0'] Filter ['name', 'date'] null null null select "
  },
  {
    "sql": "SELECT max(killed) ,  min(killed) FROM death",
    "dsl": "[{'input': ['death'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'killed': ['min']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['death'] ['df_statics_column_0'] StaticsColumn ['min'] null "
  },
  {
    "sql": "SELECT avg(injured) FROM death",
    "dsl": "[{'input': ['death'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'injured': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['death'] ['df_statics_column_0'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
    "dsl": "[{'input': ['death', 'ship'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['death.caused_by_ship_id'], 'right_on': ['ship.id'], 'how': 'inner', 'lsuffix': 'death.', 'rsuffix': 'ship.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['ship.tonnage'], 'index': 'null', 'condition': '==', 'value': 't'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['death.killed', 'death.injured'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['death', 'ship'] ['df_join_0'] Join ['death.caused_by_ship_id'] ['ship.id'] inner death. ship. ['df_join_0'] ['df_bool_1'] Bool ['ship.tonnage'] null == t ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['death.killed', 'death.injured'] null null null select "
  },
  {
    "sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "dsl": "[{'input': ['battle'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['bulgarian_commander'], 'index': 'null', 'condition': '!=', 'value': 'Boril'}}, {'input': ['battle', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['name', 'result'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['battle'] ['df_bool_0'] Bool ['bulgarian_commander'] null != Boril ['battle', 'df_bool_0'] ['df_filter_1'] Filter ['name', 'result'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
    "dsl": "[{'input': ['battle', 'ship'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['battle.id'], 'right_on': ['ship.lost_in_battle'], 'how': 'inner', 'lsuffix': 'battle.', 'rsuffix': 'ship.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['ship.ship_type'], 'index': 'null', 'condition': '==', 'value': 'Brig'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_drop_duplicates_3'], 'command': 'DropDuplicates', 'command_args': {'subset': ['battle.id', 'battle.name'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['battle.id', 'battle.name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['battle', 'ship'] ['df_join_0'] Join ['battle.id'] ['ship.lost_in_battle'] inner battle. ship. ['df_join_0'] ['df_bool_1'] Bool ['ship.ship_type'] null == Brig ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_drop_duplicates_3'] DropDuplicates ['battle.id', 'battle.name'] null ['df_drop_duplicates_3'] ['df_filter_4'] Filter ['battle.id', 'battle.name'] null null null select "
  },
  {
    "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "dsl": "[{'input': ['battle'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['bulgarian_commander'], 'index': 'null', 'condition': '==', 'value': 'Kaloyan'}, {'column': ['latin_commander'], 'index': 'null', 'condition': '==', 'value': 'Baldwin I'}]}}, {'input': ['battle', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['battle'] ['df_bool_0'] Bool [{'column': ['bulgarian_commander'], 'index': 'null', 'condition': '==', 'value': 'Kaloyan'}, {'column': ['latin_commander'], 'index': 'null', 'condition': '==', 'value': 'Baldwin I'}] ['battle', 'df_bool_0'] ['df_filter_1'] Filter ['name'] null null null select "
  },
  {
    "sql": "SELECT count(DISTINCT RESULT) FROM battle",
    "dsl": "[{'input': ['battle'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'result': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['battle'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT note FROM death WHERE note LIKE '%East%'",
    "dsl": "[{'input': ['death'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['note'], 'index': 'null', 'condition': 'contains', 'value': 'East'}}, {'input': ['death', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['note'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['death'] ['df_bool_0'] Bool ['note'] null contains East ['death', 'df_bool_0'] ['df_filter_1'] Filter ['note'] null null null select "
  },
  {
    "sql": "SELECT line_1 ,  line_2 FROM addresses",
    "dsl": "[{'input': ['Addresses'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['line_1', 'line_2'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Addresses'] ['df_filter_0'] Filter ['line_1', 'line_2'] null null null select "
  },
  {
    "sql": "SELECT line_1 ,  line_2 FROM addresses",
    "dsl": "[{'input': ['Addresses'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['line_1', 'line_2'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Addresses'] ['df_filter_0'] Filter ['line_1', 'line_2'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM Courses",
    "dsl": "[{'input': ['Courses'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Courses'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Courses",
    "dsl": "[{'input': ['Courses'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Courses'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "dsl": "[{'input': ['Courses'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['course_name'], 'index': 'null', 'condition': '==', 'value': 'math'}}, {'input': ['Courses', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['course_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Courses'] ['df_bool_0'] Bool ['course_name'] null == math ['Courses', 'df_bool_0'] ['df_filter_1'] Filter ['course_description'] null null null select "
  },
  {
    "sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "dsl": "[{'input': ['Courses'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['course_name'], 'index': 'null', 'condition': '==', 'value': 'math'}}, {'input': ['Courses', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['course_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Courses'] ['df_bool_0'] Bool ['course_name'] null == math ['Courses', 'df_bool_0'] ['df_filter_1'] Filter ['course_description'] null null null select "
  },
  {
    "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "dsl": "[{'input': ['Addresses'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['city'], 'index': 'null', 'condition': '==', 'value': 'Port Chelsea'}}, {'input': ['Addresses', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['zip_postcode'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Addresses'] ['df_bool_0'] Bool ['city'] null == Port Chelsea ['Addresses', 'df_bool_0'] ['df_filter_1'] Filter ['zip_postcode'] null null null select "
  },
  {
    "sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "dsl": "[{'input': ['Addresses'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['city'], 'index': 'null', 'condition': '==', 'value': 'Port Chelsea'}}, {'input': ['Addresses', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['zip_postcode'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Addresses'] ['df_bool_0'] Bool ['city'] null == Port Chelsea ['Addresses', 'df_bool_0'] ['df_filter_1'] Filter ['zip_postcode'] null null null select "
  },
  {
    "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "dsl": "[{'input': ['Degree_Programs'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'department_id': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Degree_Programs'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "dsl": "[{'input': ['Degree_Programs'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'department_id': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Degree_Programs'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "dsl": "[{'input': ['Degree_Programs'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'degree_summary_name': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Degree_Programs'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "dsl": "[{'input': ['Degree_Programs'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'degree_summary_name': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Degree_Programs'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "dsl": "[{'input': ['Departments', 'Degree_Programs'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Departments.department_id'], 'right_on': ['Degree_Programs.department_id'], 'how': 'inner', 'lsuffix': 'Departments.', 'rsuffix': 'Degree_Programs.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Departments.department_name'], 'index': 'null', 'condition': '==', 'value': 'engineer'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Departments', 'Degree_Programs'] ['df_join_0'] Join ['Departments.department_id'] ['Degree_Programs.department_id'] inner Departments. Degree_Programs. ['df_join_0'] ['df_bool_1'] Bool ['Departments.department_name'] null == engineer ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "dsl": "[{'input': ['Departments', 'Degree_Programs'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Departments.department_id'], 'right_on': ['Degree_Programs.department_id'], 'how': 'inner', 'lsuffix': 'Departments.', 'rsuffix': 'Degree_Programs.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Departments.department_name'], 'index': 'null', 'condition': '==', 'value': 'engineer'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Departments', 'Degree_Programs'] ['df_join_0'] Join ['Departments.department_id'] ['Degree_Programs.department_id'] inner Departments. Degree_Programs. ['df_join_0'] ['df_bool_1'] Bool ['Departments.department_name'] null == engineer ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT section_name ,  section_description FROM Sections",
    "dsl": "[{'input': ['Sections'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['section_name', 'section_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Sections'] ['df_filter_0'] Filter ['section_name', 'section_description'] null null null select "
  },
  {
    "sql": "SELECT section_name ,  section_description FROM Sections",
    "dsl": "[{'input': ['Sections'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['section_name', 'section_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Sections'] ['df_filter_0'] Filter ['section_name', 'section_description'] null null null select "
  },
  {
    "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "dsl": "[{'input': ['Sections'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['section_name'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['section_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Sections'] ['df_sort_values_0'] SortValues ['section_name'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['section_name'] null null null select "
  },
  {
    "sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "dsl": "[{'input': ['Sections'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['section_name'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['section_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Sections'] ['df_sort_values_0'] SortValues ['section_name'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['section_name'] null null null select "
  },
  {
    "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "dsl": "[{'input': ['Departments'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['department_name'], 'index': 'null', 'condition': 'contains', 'value': 'computer'}}, {'input': ['Departments', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['department_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Departments'] ['df_bool_0'] Bool ['department_name'] null contains computer ['Departments', 'df_bool_0'] ['df_filter_1'] Filter ['department_description'] null null null select "
  },
  {
    "sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "dsl": "[{'input': ['Departments'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['department_name'], 'index': 'null', 'condition': 'contains', 'value': 'computer'}}, {'input': ['Departments', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['department_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Departments'] ['df_bool_0'] Bool ['department_name'] null contains computer ['Departments', 'df_bool_0'] ['df_filter_1'] Filter ['department_description'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "dsl": "[{'input': ['Students', 'Student_Enrolment'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Students.student_id'], 'right_on': ['Student_Enrolment.student_id'], 'how': 'inner', 'lsuffix': 'Students.', 'rsuffix': 'Student_Enrolment.'}}, {'input': ['df_join_0', 'Degree_Programs'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Student_Enrolment.degree_program_id'], 'right_on': ['Degree_Programs.degree_program_id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Degree_Programs.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['Degree_Programs.degree_summary_name'], 'index': 'null', 'condition': '==', 'value': 'Bachelor'}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_drop_duplicates_4'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Students.first_name', 'Students.middle_name', 'Students.last_name'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['Students.first_name', 'Students.middle_name', 'Students.last_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Students', 'Student_Enrolment'] ['df_join_0'] Join ['Students.student_id'] ['Student_Enrolment.student_id'] inner Students. Student_Enrolment. ['df_join_0', 'Degree_Programs'] ['df_join_1'] Join ['Student_Enrolment.degree_program_id'] ['Degree_Programs.degree_program_id'] inner  Degree_Programs. ['df_join_1'] ['df_bool_2'] Bool ['Degree_Programs.degree_summary_name'] null == Bachelor ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_drop_duplicates_4'] DropDuplicates ['Students.first_name', 'Students.middle_name', 'Students.last_name'] null ['df_drop_duplicates_4'] ['df_filter_5'] Filter ['Students.first_name', 'Students.middle_name', 'Students.last_name'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "dsl": "[{'input': ['Students', 'Student_Enrolment'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Students.student_id'], 'right_on': ['Student_Enrolment.student_id'], 'how': 'inner', 'lsuffix': 'Students.', 'rsuffix': 'Student_Enrolment.'}}, {'input': ['df_join_0', 'Degree_Programs'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Student_Enrolment.degree_program_id'], 'right_on': ['Degree_Programs.degree_program_id'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Degree_Programs.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['Degree_Programs.degree_summary_name'], 'index': 'null', 'condition': '==', 'value': 'Bachelor'}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_drop_duplicates_4'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Students.first_name', 'Students.middle_name', 'Students.last_name'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['Students.first_name', 'Students.middle_name', 'Students.last_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Students', 'Student_Enrolment'] ['df_join_0'] Join ['Students.student_id'] ['Student_Enrolment.student_id'] inner Students. Student_Enrolment. ['df_join_0', 'Degree_Programs'] ['df_join_1'] Join ['Student_Enrolment.degree_program_id'] ['Degree_Programs.degree_program_id'] inner  Degree_Programs. ['df_join_1'] ['df_bool_2'] Bool ['Degree_Programs.degree_summary_name'] null == Bachelor ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_drop_duplicates_4'] DropDuplicates ['Students.first_name', 'Students.middle_name', 'Students.last_name'] null ['df_drop_duplicates_4'] ['df_filter_5'] Filter ['Students.first_name', 'Students.middle_name', 'Students.last_name'] null null null select "
  },
  {
    "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Degree_Programs', 'Student_Enrolment'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Degree_Programs.degree_program_id'], 'right_on': ['Student_Enrolment.degree_program_id'], 'how': 'inner', 'lsuffix': 'Degree_Programs.', 'rsuffix': 'Student_Enrolment.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Degree_Programs.degree_summary_name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Degree_Programs.degree_summary_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Degree_Programs', 'Student_Enrolment'] ['df_join_0'] Join ['Degree_Programs.degree_program_id'] ['Student_Enrolment.degree_program_id'] inner Degree_Programs. Student_Enrolment. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Degree_Programs.degree_summary_name'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Degree_Programs.degree_summary_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Degree_Programs', 'Student_Enrolment'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Degree_Programs.degree_program_id'], 'right_on': ['Student_Enrolment.degree_program_id'], 'how': 'inner', 'lsuffix': 'Degree_Programs.', 'rsuffix': 'Student_Enrolment.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Degree_Programs.degree_summary_name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Degree_Programs.degree_summary_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Degree_Programs', 'Student_Enrolment'] ['df_join_0'] Join ['Degree_Programs.degree_program_id'] ['Student_Enrolment.degree_program_id'] inner Degree_Programs. Student_Enrolment. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Degree_Programs.degree_summary_name'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Degree_Programs.degree_summary_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "dsl": "[{'input': ['Courses', 'Student_Enrolment_Courses'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Courses.course_id'], 'right_on': ['Student_Enrolment_Courses.course_id'], 'how': 'inner', 'lsuffix': 'Courses.', 'rsuffix': 'Student_Enrolment_Courses.'}}, {'input': ['df_join_0'], 'output': ['df_drop_duplicates_1'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Courses.course_name'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Courses.course_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Courses', 'Student_Enrolment_Courses'] ['df_join_0'] Join ['Courses.course_id'] ['Student_Enrolment_Courses.course_id'] inner Courses. Student_Enrolment_Courses. ['df_join_0'] ['df_drop_duplicates_1'] DropDuplicates ['Courses.course_name'] null ['df_drop_duplicates_1'] ['df_filter_2'] Filter ['Courses.course_name'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "dsl": "[{'input': ['Courses', 'Student_Enrolment_Courses'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Courses.course_id'], 'right_on': ['Student_Enrolment_Courses.course_id'], 'how': 'inner', 'lsuffix': 'Courses.', 'rsuffix': 'Student_Enrolment_Courses.'}}, {'input': ['df_join_0'], 'output': ['df_drop_duplicates_1'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Courses.course_name'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Courses.course_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Courses', 'Student_Enrolment_Courses'] ['df_join_0'] Join ['Courses.course_id'] ['Student_Enrolment_Courses.course_id'] inner Courses. Student_Enrolment_Courses. ['df_join_0'] ['df_drop_duplicates_1'] DropDuplicates ['Courses.course_name'] null ['df_drop_duplicates_1'] ['df_filter_2'] Filter ['Courses.course_name'] null null null select "
  },
  {
    "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Courses', 'Student_Enrolment_Courses'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Courses.course_id'], 'right_on': ['Student_Enrolment_Courses.course_id'], 'how': 'inner', 'lsuffix': 'Courses.', 'rsuffix': 'Student_Enrolment_Courses.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Courses.course_name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Courses.course_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Courses', 'Student_Enrolment_Courses'] ['df_join_0'] Join ['Courses.course_id'] ['Student_Enrolment_Courses.course_id'] inner Courses. Student_Enrolment_Courses. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Courses.course_name'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Courses.course_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Courses', 'Student_Enrolment_Courses'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Courses.course_id'], 'right_on': ['Student_Enrolment_Courses.course_id'], 'how': 'inner', 'lsuffix': 'Courses.', 'rsuffix': 'Student_Enrolment_Courses.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Courses.course_name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Courses.course_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Courses', 'Student_Enrolment_Courses'] ['df_join_0'] Join ['Courses.course_id'] ['Student_Enrolment_Courses.course_id'] inner Courses. Student_Enrolment_Courses. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Courses.course_name'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Courses.course_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "dsl": "[{'input': ['Students'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['first_name'], 'index': 'null', 'condition': '==', 'value': 'Timmothy'}, {'column': ['last_name'], 'index': 'null', 'condition': '==', 'value': 'Ward'}]}}, {'input': ['Students', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['cell_mobile_number'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Students'] ['df_bool_0'] Bool [{'column': ['first_name'], 'index': 'null', 'condition': '==', 'value': 'Timmothy'}, {'column': ['last_name'], 'index': 'null', 'condition': '==', 'value': 'Ward'}] ['Students', 'df_bool_0'] ['df_filter_1'] Filter ['cell_mobile_number'] null null null select "
  },
  {
    "sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
    "dsl": "[{'input': ['Students'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['first_name'], 'index': 'null', 'condition': '==', 'value': 'timmothy'}, {'column': ['last_name'], 'index': 'null', 'condition': '==', 'value': 'ward'}]}}, {'input': ['Students', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['cell_mobile_number'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Students'] ['df_bool_0'] Bool [{'column': ['first_name'], 'index': 'null', 'condition': '==', 'value': 'timmothy'}, {'column': ['last_name'], 'index': 'null', 'condition': '==', 'value': 'ward'}] ['Students', 'df_bool_0'] ['df_filter_1'] Filter ['cell_mobile_number'] null null null select "
  },
  {
    "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "dsl": "[{'input': ['Students'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['date_first_registered'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'middle_name', 'last_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Students'] ['df_sort_values_0'] SortValues ['date_first_registered'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['first_name', 'middle_name', 'last_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "dsl": "[{'input': ['Students'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['date_first_registered'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'middle_name', 'last_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Students'] ['df_sort_values_0'] SortValues ['date_first_registered'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['first_name', 'middle_name', 'last_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "dsl": "[{'input': ['Students'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['date_left'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'middle_name', 'last_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Students'] ['df_sort_values_0'] SortValues ['date_left'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['first_name', 'middle_name', 'last_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "dsl": "[{'input': ['Students'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['date_left'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'middle_name', 'last_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Students'] ['df_sort_values_0'] SortValues ['date_left'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['first_name', 'middle_name', 'last_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "dsl": "[{'input': ['Students'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['current_address_id'], 'index': 'null', 'condition': '!=', 'value': 'permanent_address_id'}}, {'input': ['Students', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Students'] ['df_bool_0'] Bool ['current_address_id'] null != permanent_address_id ['Students', 'df_bool_0'] ['df_filter_1'] Filter ['first_name'] null null null select "
  },
  {
    "sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "dsl": "[{'input': ['Students'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['current_address_id'], 'index': 'null', 'condition': '!=', 'value': 'permanent_address_id'}}, {'input': ['Students', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Students'] ['df_bool_0'] Bool ['current_address_id'] null != permanent_address_id ['Students', 'df_bool_0'] ['df_filter_1'] Filter ['first_name'] null null null select "
  },
  {
    "sql": "SELECT avg(transcript_date) FROM Transcripts",
    "dsl": "[{'input': ['Transcripts'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'transcript_date': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Transcripts'] ['df_statics_column_0'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT avg(transcript_date) FROM Transcripts",
    "dsl": "[{'input': ['Transcripts'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'transcript_date': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Transcripts'] ['df_statics_column_0'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "dsl": "[{'input': ['Transcripts'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['transcript_date'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['transcript_date', 'other_details'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Transcripts'] ['df_sort_values_0'] SortValues ['transcript_date'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['transcript_date', 'other_details'] [1] 0 False select "
  },
  {
    "sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "dsl": "[{'input': ['Transcripts'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['transcript_date'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['transcript_date', 'other_details'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Transcripts'] ['df_sort_values_0'] SortValues ['transcript_date'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['transcript_date', 'other_details'] [1] 0 False select "
  },
  {
    "sql": "SELECT count(*) FROM Transcripts",
    "dsl": "[{'input': ['Transcripts'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Transcripts'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Transcripts",
    "dsl": "[{'input': ['Transcripts'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Transcripts'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "dsl": "[{'input': ['Transcripts'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['transcript_date'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['transcript_date'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Transcripts'] ['df_sort_values_0'] SortValues ['transcript_date'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['transcript_date'] [1] 0 False select "
  },
  {
    "sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "dsl": "[{'input': ['Transcripts'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['transcript_date'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['transcript_date'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Transcripts'] ['df_sort_values_0'] SortValues ['transcript_date'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['transcript_date'] [1] 0 False select "
  },
  {
    "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Transcript_Contents'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['student_course_id'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'student_course_id'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Transcript_Contents'] ['df_groupby_agg_0'] GroupbyAgg ['student_course_id'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['(all,count)', 'student_course_id'] [1] 0 False select "
  },
  {
    "sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Transcript_Contents'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['student_course_id'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'student_course_id'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Transcript_Contents'] ['df_groupby_agg_0'] GroupbyAgg ['student_course_id'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['(all,count)', 'student_course_id'] [1] 0 False select "
  },
  {
    "sql": "SELECT count(DISTINCT current_address_id) FROM Students",
    "dsl": "[{'input': ['Students'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'current_address_id': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Students'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT current_address_id) FROM Students",
    "dsl": "[{'input': ['Students'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'current_address_id': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Students'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "dsl": "[{'input': ['Students'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['other_student_details'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['other_student_details'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Students'] ['df_sort_values_0'] SortValues ['other_student_details'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['other_student_details'] null null null select "
  },
  {
    "sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "dsl": "[{'input': ['Students'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['other_student_details'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['other_student_details'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Students'] ['df_sort_values_0'] SortValues ['other_student_details'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['other_student_details'] null null null select "
  },
  {
    "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "dsl": "[{'input': ['Sections'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['section_name'], 'index': 'null', 'condition': '==', 'value': 'h'}}, {'input': ['Sections', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['section_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Sections'] ['df_bool_0'] Bool ['section_name'] null == h ['Sections', 'df_bool_0'] ['df_filter_1'] Filter ['section_description'] null null null select "
  },
  {
    "sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "dsl": "[{'input': ['Sections'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['section_name'], 'index': 'null', 'condition': '==', 'value': 'h'}}, {'input': ['Sections', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['section_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Sections'] ['df_bool_0'] Bool ['section_name'] null == h ['Sections', 'df_bool_0'] ['df_filter_1'] Filter ['section_description'] null null null select "
  },
  {
    "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "dsl": "[{'input': ['Students', 'Addresses'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Students.permanent_address_id'], 'right_on': ['Addresses.address_id'], 'how': 'inner', 'lsuffix': 'Students.', 'rsuffix': 'Addresses.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Addresses.country'], 'index': 'null', 'condition': '==', 'value': 'haiti'}, {'column': ['Students.cell_mobile_number'], 'index': 'null', 'condition': '==', 'value': '09700166582'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Students.first_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Students', 'Addresses'] ['df_join_0'] Join ['Students.permanent_address_id'] ['Addresses.address_id'] inner Students. Addresses. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['Addresses.country'], 'index': 'null', 'condition': '==', 'value': 'haiti'}, {'column': ['Students.cell_mobile_number'], 'index': 'null', 'condition': '==', 'value': '09700166582'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Students.first_name'] null null null select "
  },
  {
    "sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "dsl": "[{'input': ['Students', 'Addresses'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Students.permanent_address_id'], 'right_on': ['Addresses.address_id'], 'how': 'inner', 'lsuffix': 'Students.', 'rsuffix': 'Addresses.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Addresses.country'], 'index': 'null', 'condition': '==', 'value': 'haiti'}, {'column': ['Students.cell_mobile_number'], 'index': 'null', 'condition': '==', 'value': '09700166582'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Students.first_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Students', 'Addresses'] ['df_join_0'] Join ['Students.permanent_address_id'] ['Addresses.address_id'] inner Students. Addresses. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['Addresses.country'], 'index': 'null', 'condition': '==', 'value': 'haiti'}, {'column': ['Students.cell_mobile_number'], 'index': 'null', 'condition': '==', 'value': '09700166582'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Students.first_name'] null null null select "
  },
  {
    "sql": "SELECT Title FROM Cartoon ORDER BY title",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Title'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Title'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_sort_values_0'] SortValues ['Title'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Title'] null null null select "
  },
  {
    "sql": "SELECT Title FROM Cartoon ORDER BY title",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Title'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Title'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_sort_values_0'] SortValues ['Title'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Title'] null null null select "
  },
  {
    "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Directed_by'], 'index': 'null', 'condition': '==', 'value': 'Ben Jones'}}, {'input': ['Cartoon', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Title'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_bool_0'] Bool ['Directed_by'] null == Ben Jones ['Cartoon', 'df_bool_0'] ['df_filter_1'] Filter ['Title'] null null null select "
  },
  {
    "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Directed_by'], 'index': 'null', 'condition': '==', 'value': 'Ben Jones'}}, {'input': ['Cartoon', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Title'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_bool_0'] Bool ['Directed_by'] null == Ben Jones ['Cartoon', 'df_bool_0'] ['df_filter_1'] Filter ['Title'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Written_by'], 'index': 'null', 'condition': '==', 'value': 'Joseph Kuhr'}}, {'input': ['Cartoon', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Cartoon'] ['df_bool_0'] Bool ['Written_by'] null == Joseph Kuhr ['Cartoon', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Written_by'], 'index': 'null', 'condition': '==', 'value': 'Joseph Kuhr'}}, {'input': ['Cartoon', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Cartoon'] ['df_bool_0'] Bool ['Written_by'] null == Joseph Kuhr ['Cartoon', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Original_air_date'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Title', 'Directed_by'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_sort_values_0'] SortValues ['Original_air_date'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Title', 'Directed_by'] null null null select "
  },
  {
    "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Original_air_date'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Title', 'Directed_by'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_sort_values_0'] SortValues ['Original_air_date'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Title', 'Directed_by'] null null null select "
  },
  {
    "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Directed_by'], 'index': 'null', 'condition': '==', 'value': 'Ben Jones'}, {'column': ['Directed_by'], 'index': 'null', 'condition': '==', 'value': 'Brandon Vietti'}]}}, {'input': ['Cartoon', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Title'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_bool_0'] Bool [{'column': ['Directed_by'], 'index': 'null', 'condition': '==', 'value': 'Ben Jones'}, {'column': ['Directed_by'], 'index': 'null', 'condition': '==', 'value': 'Brandon Vietti'}] ['Cartoon', 'df_bool_0'] ['df_filter_1'] Filter ['Title'] null null null select "
  },
  {
    "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Directed_by'], 'index': 'null', 'condition': '==', 'value': 'Ben Jones'}, {'column': ['Directed_by'], 'index': 'null', 'condition': '==', 'value': 'Brandon Vietti'}]}}, {'input': ['Cartoon', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Title'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_bool_0'] Bool [{'column': ['Directed_by'], 'index': 'null', 'condition': '==', 'value': 'Ben Jones'}, {'column': ['Directed_by'], 'index': 'null', 'condition': '==', 'value': 'Brandon Vietti'}] ['Cartoon', 'df_bool_0'] ['df_filter_1'] Filter ['Title'] null null null select "
  },
  {
    "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Country'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Country', '(all,count)'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_groupby_agg_0'] GroupbyAgg ['Country'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Country', '(all,count)'] [1] 0 False select "
  },
  {
    "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Country'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Country', '(all,count)'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_groupby_agg_0'] GroupbyAgg ['Country'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Country', '(all,count)'] [1] 0 False select "
  },
  {
    "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'series_name': ['nunique'], 'Content': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_statics_column_0'] StaticsColumn ['nunique'] ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'series_name': ['nunique'], 'Content': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_statics_column_0'] StaticsColumn ['nunique'] ['nunique'] null "
  },
  {
    "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['series_name'], 'index': 'null', 'condition': '==', 'value': 'Sky Radio'}}, {'input': ['TV_Channel', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Content'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_bool_0'] Bool ['series_name'] null == Sky Radio ['TV_Channel', 'df_bool_0'] ['df_filter_1'] Filter ['Content'] null null null select "
  },
  {
    "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['series_name'], 'index': 'null', 'condition': '==', 'value': 'Sky Radio'}}, {'input': ['TV_Channel', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Content'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_bool_0'] Bool ['series_name'] null == Sky Radio ['TV_Channel', 'df_bool_0'] ['df_filter_1'] Filter ['Content'] null null null select "
  },
  {
    "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['series_name'], 'index': 'null', 'condition': '==', 'value': 'Sky Radio'}}, {'input': ['TV_Channel', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Package_Option'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_bool_0'] Bool ['series_name'] null == Sky Radio ['TV_Channel', 'df_bool_0'] ['df_filter_1'] Filter ['Package_Option'] null null null select "
  },
  {
    "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['series_name'], 'index': 'null', 'condition': '==', 'value': 'Sky Radio'}}, {'input': ['TV_Channel', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Package_Option'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_bool_0'] Bool ['series_name'] null == Sky Radio ['TV_Channel', 'df_bool_0'] ['df_filter_1'] Filter ['Package_Option'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Language'], 'index': 'null', 'condition': '==', 'value': 'English'}}, {'input': ['TV_Channel', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_bool_0'] Bool ['Language'] null == English ['TV_Channel', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Language'], 'index': 'null', 'condition': '==', 'value': 'English'}}, {'input': ['TV_Channel', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_bool_0'] Bool ['Language'] null == English ['TV_Channel', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Language'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Language', '(all,count)'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_groupby_agg_0'] GroupbyAgg ['Language'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['Language', '(all,count)'] [1] 0 False select "
  },
  {
    "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Language'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Language', '(all,count)'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_groupby_agg_0'] GroupbyAgg ['Language'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['Language', '(all,count)'] [1] 0 False select "
  },
  {
    "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Language'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Language', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_groupby_agg_0'] GroupbyAgg ['Language'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Language', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Language'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Language', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_groupby_agg_0'] GroupbyAgg ['Language'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Language', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "dsl": "[{'input': ['TV_Channel', 'Cartoon'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['TV_Channel.id'], 'right_on': ['Cartoon.Channel'], 'how': 'inner', 'lsuffix': 'TV_Channel.', 'rsuffix': 'Cartoon.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Cartoon.Title'], 'index': 'null', 'condition': '==', 'value': 'The Rise of the Blue Beetle!'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['TV_Channel.series_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel', 'Cartoon'] ['df_join_0'] Join ['TV_Channel.id'] ['Cartoon.Channel'] inner TV_Channel. Cartoon. ['df_join_0'] ['df_bool_1'] Bool ['Cartoon.Title'] null == The Rise of the Blue Beetle! ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['TV_Channel.series_name'] null null null select "
  },
  {
    "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "dsl": "[{'input': ['TV_Channel', 'Cartoon'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['TV_Channel.id'], 'right_on': ['Cartoon.Channel'], 'how': 'inner', 'lsuffix': 'TV_Channel.', 'rsuffix': 'Cartoon.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Cartoon.Title'], 'index': 'null', 'condition': '==', 'value': 'The Rise of the Blue Beetle!'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['TV_Channel.series_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel', 'Cartoon'] ['df_join_0'] Join ['TV_Channel.id'] ['Cartoon.Channel'] inner TV_Channel. Cartoon. ['df_join_0'] ['df_bool_1'] Bool ['Cartoon.Title'] null == The Rise of the Blue Beetle! ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['TV_Channel.series_name'] null null null select "
  },
  {
    "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "dsl": "[{'input': ['TV_Channel', 'Cartoon'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['TV_Channel.id'], 'right_on': ['Cartoon.Channel'], 'how': 'inner', 'lsuffix': 'TV_Channel.', 'rsuffix': 'Cartoon.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['TV_Channel.series_name'], 'index': 'null', 'condition': '==', 'value': 'Sky Radio'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Cartoon.Title'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel', 'Cartoon'] ['df_join_0'] Join ['TV_Channel.id'] ['Cartoon.Channel'] inner TV_Channel. Cartoon. ['df_join_0'] ['df_bool_1'] Bool ['TV_Channel.series_name'] null == Sky Radio ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Cartoon.Title'] null null null select "
  },
  {
    "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "dsl": "[{'input': ['TV_Channel', 'Cartoon'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['TV_Channel.id'], 'right_on': ['Cartoon.Channel'], 'how': 'inner', 'lsuffix': 'TV_Channel.', 'rsuffix': 'Cartoon.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['TV_Channel.series_name'], 'index': 'null', 'condition': '==', 'value': 'Sky Radio'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Cartoon.Title'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel', 'Cartoon'] ['df_join_0'] Join ['TV_Channel.id'] ['Cartoon.Channel'] inner TV_Channel. Cartoon. ['df_join_0'] ['df_bool_1'] Bool ['TV_Channel.series_name'] null == Sky Radio ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Cartoon.Title'] null null null select "
  },
  {
    "sql": "SELECT Episode FROM TV_series ORDER BY rating",
    "dsl": "[{'input': ['TV_series'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Rating'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Episode'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_series'] ['df_sort_values_0'] SortValues ['Rating'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Episode'] null null null select "
  },
  {
    "sql": "SELECT Episode FROM TV_series ORDER BY rating",
    "dsl": "[{'input': ['TV_series'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Rating'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Episode'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_series'] ['df_sort_values_0'] SortValues ['Rating'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Episode'] null null null select "
  },
  {
    "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "dsl": "[{'input': ['TV_series'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Rating'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Episode', 'Rating'], 'index': [3], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['TV_series'] ['df_sort_values_0'] SortValues ['Rating'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Episode', 'Rating'] [3] 0 False select "
  },
  {
    "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "dsl": "[{'input': ['TV_series'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Rating'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Episode', 'Rating'], 'index': [3], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['TV_series'] ['df_sort_values_0'] SortValues ['Rating'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Episode', 'Rating'] [3] 0 False select "
  },
  {
    "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "dsl": "[{'input': ['TV_series'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Share': ['min']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['TV_series'] ['df_statics_column_0'] StaticsColumn ['min'] null "
  },
  {
    "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "dsl": "[{'input': ['TV_series'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Share': ['min']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['TV_series'] ['df_statics_column_0'] StaticsColumn ['min'] null "
  },
  {
    "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "dsl": "[{'input': ['TV_series'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Episode'], 'index': 'null', 'condition': '==', 'value': 'A Love of a Lifetime'}}, {'input': ['TV_series', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Air_Date'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_series'] ['df_bool_0'] Bool ['Episode'] null == A Love of a Lifetime ['TV_series', 'df_bool_0'] ['df_filter_1'] Filter ['Air_Date'] null null null select "
  },
  {
    "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "dsl": "[{'input': ['TV_series'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Episode'], 'index': 'null', 'condition': '==', 'value': 'A Love of a Lifetime'}}, {'input': ['TV_series', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Air_Date'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_series'] ['df_bool_0'] Bool ['Episode'] null == A Love of a Lifetime ['TV_series', 'df_bool_0'] ['df_filter_1'] Filter ['Air_Date'] null null null select "
  },
  {
    "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "dsl": "[{'input': ['TV_series'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Episode'], 'index': 'null', 'condition': '==', 'value': 'A Love of a Lifetime'}}, {'input': ['TV_series', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Weekly_Rank'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_series'] ['df_bool_0'] Bool ['Episode'] null == A Love of a Lifetime ['TV_series', 'df_bool_0'] ['df_filter_1'] Filter ['Weekly_Rank'] null null null select "
  },
  {
    "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "dsl": "[{'input': ['TV_series'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Episode'], 'index': 'null', 'condition': '==', 'value': 'A Love of a Lifetime'}}, {'input': ['TV_series', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Weekly_Rank'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_series'] ['df_bool_0'] Bool ['Episode'] null == A Love of a Lifetime ['TV_series', 'df_bool_0'] ['df_filter_1'] Filter ['Weekly_Rank'] null null null select "
  },
  {
    "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "dsl": "[{'input': ['TV_Channel', 'TV_series'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['TV_Channel.id'], 'right_on': ['TV_series.Channel'], 'how': 'inner', 'lsuffix': 'TV_Channel.', 'rsuffix': 'TV_series.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['TV_series.Episode'], 'index': 'null', 'condition': '==', 'value': 'A Love of a Lifetime'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['TV_Channel.series_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel', 'TV_series'] ['df_join_0'] Join ['TV_Channel.id'] ['TV_series.Channel'] inner TV_Channel. TV_series. ['df_join_0'] ['df_bool_1'] Bool ['TV_series.Episode'] null == A Love of a Lifetime ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['TV_Channel.series_name'] null null null select "
  },
  {
    "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "dsl": "[{'input': ['TV_Channel', 'TV_series'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['TV_Channel.id'], 'right_on': ['TV_series.Channel'], 'how': 'inner', 'lsuffix': 'TV_Channel.', 'rsuffix': 'TV_series.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['TV_series.Episode'], 'index': 'null', 'condition': '==', 'value': 'A Love of a Lifetime'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['TV_Channel.series_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel', 'TV_series'] ['df_join_0'] Join ['TV_Channel.id'] ['TV_series.Channel'] inner TV_Channel. TV_series. ['df_join_0'] ['df_bool_1'] Bool ['TV_series.Episode'] null == A Love of a Lifetime ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['TV_Channel.series_name'] null null null select "
  },
  {
    "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "dsl": "[{'input': ['TV_Channel', 'TV_series'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['TV_Channel.id'], 'right_on': ['TV_series.Channel'], 'how': 'inner', 'lsuffix': 'TV_Channel.', 'rsuffix': 'TV_series.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['TV_Channel.series_name'], 'index': 'null', 'condition': '==', 'value': 'Sky Radio'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['TV_series.Episode'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel', 'TV_series'] ['df_join_0'] Join ['TV_Channel.id'] ['TV_series.Channel'] inner TV_Channel. TV_series. ['df_join_0'] ['df_bool_1'] Bool ['TV_Channel.series_name'] null == Sky Radio ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['TV_series.Episode'] null null null select "
  },
  {
    "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "dsl": "[{'input': ['TV_Channel', 'TV_series'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['TV_Channel.id'], 'right_on': ['TV_series.Channel'], 'how': 'inner', 'lsuffix': 'TV_Channel.', 'rsuffix': 'TV_series.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['TV_Channel.series_name'], 'index': 'null', 'condition': '==', 'value': 'Sky Radio'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['TV_series.Episode'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel', 'TV_series'] ['df_join_0'] Join ['TV_Channel.id'] ['TV_series.Channel'] inner TV_Channel. TV_series. ['df_join_0'] ['df_bool_1'] Bool ['TV_Channel.series_name'] null == Sky Radio ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['TV_series.Episode'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Directed_by'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'Directed_by'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_groupby_agg_0'] GroupbyAgg ['Directed_by'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'Directed_by'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Directed_by'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', 'Directed_by'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_groupby_agg_0'] GroupbyAgg ['Directed_by'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['(all,count)', 'Directed_by'] null null null select "
  },
  {
    "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Original_air_date'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Production_code', 'Channel'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_sort_values_0'] SortValues ['Original_air_date'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Production_code', 'Channel'] [1] 0 False select "
  },
  {
    "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "dsl": "[{'input': ['Cartoon'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Original_air_date'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Production_code', 'Channel'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Cartoon'] ['df_sort_values_0'] SortValues ['Original_air_date'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Production_code', 'Channel'] [1] 0 False select "
  },
  {
    "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Hight_definition_TV'], 'index': 'null', 'condition': '==', 'value': 'yes'}}, {'input': ['TV_Channel', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Package_Option', 'series_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_bool_0'] Bool ['Hight_definition_TV'] null == yes ['TV_Channel', 'df_bool_0'] ['df_filter_1'] Filter ['Package_Option', 'series_name'] null null null select "
  },
  {
    "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Hight_definition_TV'], 'index': 'null', 'condition': '==', 'value': 'yes'}}, {'input': ['TV_Channel', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Package_Option', 'series_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_bool_0'] Bool ['Hight_definition_TV'] null == yes ['TV_Channel', 'df_bool_0'] ['df_filter_1'] Filter ['Package_Option', 'series_name'] null null null select "
  },
  {
    "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "dsl": "[{'input': ['TV_Channel', 'Cartoon'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['TV_Channel.id'], 'right_on': ['Cartoon.Channel'], 'how': 'inner', 'lsuffix': 'TV_Channel.', 'rsuffix': 'Cartoon.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Cartoon.Written_by'], 'index': 'null', 'condition': '==', 'value': 'Todd Casey'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['TV_Channel.Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel', 'Cartoon'] ['df_join_0'] Join ['TV_Channel.id'] ['Cartoon.Channel'] inner TV_Channel. Cartoon. ['df_join_0'] ['df_bool_1'] Bool ['Cartoon.Written_by'] null == Todd Casey ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['TV_Channel.Country'] null null null select "
  },
  {
    "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "dsl": "[{'input': ['TV_Channel', 'Cartoon'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['TV_Channel.id'], 'right_on': ['Cartoon.Channel'], 'how': 'inner', 'lsuffix': 'TV_Channel.', 'rsuffix': 'Cartoon.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Cartoon.Written_by'], 'index': 'null', 'condition': '==', 'value': 'Todd Casey'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['TV_Channel.Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel', 'Cartoon'] ['df_join_0'] Join ['TV_Channel.id'] ['Cartoon.Channel'] inner TV_Channel. Cartoon. ['df_join_0'] ['df_bool_1'] Bool ['Cartoon.Written_by'] null == Todd Casey ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['TV_Channel.Country'] null null null select "
  },
  {
    "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Language'], 'index': 'null', 'condition': '!=', 'value': 'English'}}, {'input': ['TV_Channel', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Pixel_aspect_ratio_PAR', 'Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_bool_0'] Bool ['Language'] null != English ['TV_Channel', 'df_bool_0'] ['df_filter_1'] Filter ['Pixel_aspect_ratio_PAR', 'Country'] null null null select "
  },
  {
    "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "dsl": "[{'input': ['TV_Channel'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Language'], 'index': 'null', 'condition': '!=', 'value': 'English'}}, {'input': ['TV_Channel', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Pixel_aspect_ratio_PAR', 'Country'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['TV_Channel'] ['df_bool_0'] Bool ['Language'] null != English ['TV_Channel', 'df_bool_0'] ['df_filter_1'] Filter ['Pixel_aspect_ratio_PAR', 'Country'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM poker_player",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['poker_player'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM poker_player",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['poker_player'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Earnings'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Earnings'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['poker_player'] ['df_sort_values_0'] SortValues ['Earnings'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Earnings'] null null null select "
  },
  {
    "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Earnings'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Earnings'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['poker_player'] ['df_sort_values_0'] SortValues ['Earnings'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Earnings'] null null null select "
  },
  {
    "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Final_Table_Made', 'Best_Finish'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['poker_player'] ['df_filter_0'] Filter ['Final_Table_Made', 'Best_Finish'] null null null select "
  },
  {
    "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Final_Table_Made', 'Best_Finish'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['poker_player'] ['df_filter_0'] Filter ['Final_Table_Made', 'Best_Finish'] null null null select "
  },
  {
    "sql": "SELECT avg(Earnings) FROM poker_player",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Earnings': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['poker_player'] ['df_statics_column_0'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT avg(Earnings) FROM poker_player",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Earnings': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['poker_player'] ['df_statics_column_0'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Earnings'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Money_Rank'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['poker_player'] ['df_sort_values_0'] SortValues ['Earnings'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Money_Rank'] [1] 0 False select "
  },
  {
    "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Earnings'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Money_Rank'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['poker_player'] ['df_sort_values_0'] SortValues ['Earnings'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Money_Rank'] [1] 0 False select "
  },
  {
    "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Earnings'], 'index': 'null', 'condition': '<', 'value': 200000.0}}, {'input': ['poker_player', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Final_Table_Made': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['poker_player'] ['df_bool_0'] Bool ['Earnings'] null < 200000.0 ['poker_player', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "dsl": "[{'input': ['poker_player'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Earnings'], 'index': 'null', 'condition': '<', 'value': 200000.0}}, {'input': ['poker_player', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Final_Table_Made': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['poker_player'] ['df_bool_0'] Bool ['Earnings'] null < 200000.0 ['poker_player', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['people.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_filter_1'] Filter ['people.Name'] null null null select "
  },
  {
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['people.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_filter_1'] Filter ['people.Name'] null null null select "
  },
  {
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['poker_player.Earnings'], 'index': 'null', 'condition': '>', 'value': 300000.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['people.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_bool_1'] Bool ['poker_player.Earnings'] null > 300000.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['people.Name'] null null null select "
  },
  {
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['poker_player.Earnings'], 'index': 'null', 'condition': '>', 'value': 300000.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['people.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_bool_1'] Bool ['poker_player.Earnings'] null > 300000.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['people.Name'] null null null select "
  },
  {
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['poker_player.Final_Table_Made'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['people.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_sort_values_1'] SortValues ['poker_player.Final_Table_Made'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['people.Name'] null null null select "
  },
  {
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['poker_player.Final_Table_Made'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['people.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_sort_values_1'] SortValues ['poker_player.Final_Table_Made'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['people.Name'] null null null select "
  },
  {
    "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['poker_player.Earnings'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['people.Birth_Date'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_sort_values_1'] SortValues ['poker_player.Earnings'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['people.Birth_Date'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['poker_player.Earnings'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['people.Birth_Date'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_sort_values_1'] SortValues ['poker_player.Earnings'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['people.Birth_Date'] [1] 0 False select "
  },
  {
    "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['people.Height'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['poker_player.Money_Rank'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_sort_values_1'] SortValues ['people.Height'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['poker_player.Money_Rank'] [1] 0 False select "
  },
  {
    "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['people.Height'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['poker_player.Money_Rank'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_sort_values_1'] SortValues ['people.Height'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['poker_player.Money_Rank'] [1] 0 False select "
  },
  {
    "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['people.Height'], 'index': 'null', 'condition': '>', 'value': 200.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'poker_player.Earnings': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_bool_1'] Bool ['people.Height'] null > 200.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['people.Height'], 'index': 'null', 'condition': '>', 'value': 200.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'poker_player.Earnings': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_bool_1'] Bool ['people.Height'] null > 200.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['poker_player.Earnings'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['people.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_sort_values_1'] SortValues ['poker_player.Earnings'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['people.Name'] null null null select "
  },
  {
    "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
    "dsl": "[{'input': ['people', 'poker_player'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['people.People_ID'], 'right_on': ['poker_player.People_ID'], 'how': 'inner', 'lsuffix': 'people.', 'rsuffix': 'poker_player.'}}, {'input': ['df_join_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['poker_player.Earnings'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['people.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people', 'poker_player'] ['df_join_0'] Join ['people.People_ID'] ['poker_player.People_ID'] inner people. poker_player. ['df_join_0'] ['df_sort_values_1'] SortValues ['poker_player.Earnings'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['people.Name'] null null null select "
  },
  {
    "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "dsl": "[{'input': ['people'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Nationality'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Nationality', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people'] ['df_groupby_agg_0'] GroupbyAgg ['Nationality'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Nationality', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "dsl": "[{'input': ['people'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Nationality'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Nationality', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people'] ['df_groupby_agg_0'] GroupbyAgg ['Nationality'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Nationality', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "dsl": "[{'input': ['people'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Nationality'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Nationality'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['people'] ['df_groupby_agg_0'] GroupbyAgg ['Nationality'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Nationality'] [1] 0 False select "
  },
  {
    "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "dsl": "[{'input': ['people'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Nationality'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Nationality'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['people'] ['df_groupby_agg_0'] GroupbyAgg ['Nationality'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Nationality'] [1] 0 False select "
  },
  {
    "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "dsl": "[{'input': ['people'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Nationality'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 2.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Nationality'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people'] ['df_groupby_agg_0'] GroupbyAgg ['Nationality'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null >= 2.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Nationality'] null null null select "
  },
  {
    "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "dsl": "[{'input': ['people'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Nationality'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 2.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Nationality'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people'] ['df_groupby_agg_0'] GroupbyAgg ['Nationality'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null >= 2.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['Nationality'] null null null select "
  },
  {
    "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "dsl": "[{'input': ['people'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Name'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Birth_Date'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people'] ['df_sort_values_0'] SortValues ['Name'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'Birth_Date'] null null null select "
  },
  {
    "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "dsl": "[{'input': ['people'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Name'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Birth_Date'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people'] ['df_sort_values_0'] SortValues ['Name'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'Birth_Date'] null null null select "
  },
  {
    "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "dsl": "[{'input': ['people'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Nationality'], 'index': 'null', 'condition': '!=', 'value': 'Russia'}}, {'input': ['people', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people'] ['df_bool_0'] Bool ['Nationality'] null != Russia ['people', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "dsl": "[{'input': ['people'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Nationality'], 'index': 'null', 'condition': '!=', 'value': 'Russia'}}, {'input': ['people', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['people'] ['df_bool_0'] Bool ['Nationality'] null != Russia ['people', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT count(DISTINCT Nationality) FROM people",
    "dsl": "[{'input': ['people'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Nationality': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['people'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT Nationality) FROM people",
    "dsl": "[{'input': ['people'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Nationality': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['people'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(*) FROM area_code_state",
    "dsl": "[{'input': ['AREA_CODE_STATE'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['AREA_CODE_STATE'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
    "dsl": "[{'input': ['CONTESTANTS'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['contestant_name'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['contestant_number', 'contestant_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['CONTESTANTS'] ['df_sort_values_0'] SortValues ['contestant_name'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['contestant_number', 'contestant_name'] null null null select "
  },
  {
    "sql": "SELECT vote_id ,  phone_number ,  state FROM votes",
    "dsl": "[{'input': ['VOTES'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['vote_id', 'phone_number', 'state'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['VOTES'] ['df_filter_0'] Filter ['vote_id', 'phone_number', 'state'] null null null select "
  },
  {
    "sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
    "dsl": "[{'input': ['AREA_CODE_STATE'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'area_code': ['min']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['AREA_CODE_STATE'] ['df_statics_column_0'] StaticsColumn ['min'] null "
  },
  {
    "sql": "SELECT max(created) FROM votes WHERE state  =  'CA'",
    "dsl": "[{'input': ['VOTES'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'CA'}}, {'input': ['VOTES', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'created': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['VOTES'] ['df_bool_0'] Bool ['state'] null == CA ['VOTES', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "dsl": "[{'input': ['CONTESTANTS'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['contestant_name'], 'index': 'null', 'condition': '!=', 'value': 'Jessie Alloway'}}, {'input': ['CONTESTANTS', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['contestant_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['CONTESTANTS'] ['df_bool_0'] Bool ['contestant_name'] null != Jessie Alloway ['CONTESTANTS', 'df_bool_0'] ['df_filter_1'] Filter ['contestant_name'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT state ,  created FROM votes",
    "dsl": "[{'input': ['VOTES'], 'output': ['df_drop_duplicates_0'], 'command': 'DropDuplicates', 'command_args': {'subset': ['state', 'created'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['state', 'created'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['VOTES'] ['df_drop_duplicates_0'] DropDuplicates ['state', 'created'] null ['df_drop_duplicates_0'] ['df_filter_1'] Filter ['state', 'created'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
    "dsl": "[{'input': ['VOTES'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'NY'}, {'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'CA'}]}}, {'input': ['VOTES', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['VOTES'] ['df_bool_0'] Bool [{'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'NY'}, {'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'CA'}] ['VOTES', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['AREA_CODE_STATE', 'VOTES'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['AREA_CODE_STATE.state'], 'right_on': ['VOTES.state'], 'how': 'inner', 'lsuffix': 'AREA_CODE_STATE.', 'rsuffix': 'VOTES.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['AREA_CODE_STATE.area_code'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['AREA_CODE_STATE.area_code'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['AREA_CODE_STATE', 'VOTES'] ['df_join_0'] Join ['AREA_CODE_STATE.state'] ['VOTES.state'] inner AREA_CODE_STATE. VOTES. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['AREA_CODE_STATE.area_code'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['AREA_CODE_STATE.area_code'] [1] 0 False select "
  },
  {
    "sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
    "dsl": "[{'input': ['CONTESTANTS', 'VOTES'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['CONTESTANTS.contestant_number'], 'right_on': ['VOTES.contestant_number'], 'how': 'inner', 'lsuffix': 'CONTESTANTS.', 'rsuffix': 'VOTES.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['CONTESTANTS.contestant_name'], 'index': 'null', 'condition': '==', 'value': 'Tabatha Gehling'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['VOTES.created', 'VOTES.state', 'VOTES.phone_number'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['CONTESTANTS', 'VOTES'] ['df_join_0'] Join ['CONTESTANTS.contestant_number'] ['VOTES.contestant_number'] inner CONTESTANTS. VOTES. ['df_join_0'] ['df_bool_1'] Bool ['CONTESTANTS.contestant_name'] null == Tabatha Gehling ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['VOTES.created', 'VOTES.state', 'VOTES.phone_number'] null null null select "
  },
  {
    "sql": "select contestant_name from contestants where contestant_name like \"%al%\"",
    "dsl": "[{'input': ['CONTESTANTS'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['contestant_name'], 'index': 'null', 'condition': 'contains', 'value': 'al'}}, {'input': ['CONTESTANTS', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['contestant_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['CONTESTANTS'] ['df_bool_0'] Bool ['contestant_name'] null contains al ['CONTESTANTS', 'df_bool_0'] ['df_filter_1'] Filter ['contestant_name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['IndepYear'], 'index': 'null', 'condition': '>', 'value': 1950.0}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['IndepYear'] null > 1950.0 ['country', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['IndepYear'], 'index': 'null', 'condition': '>', 'value': 1950.0}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['IndepYear'] null > 1950.0 ['country', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['GovernmentForm'], 'index': 'null', 'condition': '==', 'value': 'Republic'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['GovernmentForm'] null == Republic ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['GovernmentForm'], 'index': 'null', 'condition': '==', 'value': 'Republic'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['GovernmentForm'] null == Republic ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Region'], 'index': 'null', 'condition': '==', 'value': 'Caribbean'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'SurfaceArea': ['sum']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Region'] null == Caribbean ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['sum'] null "
  },
  {
    "sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Region'], 'index': 'null', 'condition': '==', 'value': 'Caribbean'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'SurfaceArea': ['sum']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Region'] null == Caribbean ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['sum'] null "
  },
  {
    "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Name'], 'index': 'null', 'condition': '==', 'value': 'Anguilla'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Continent'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Name'] null == Anguilla ['country', 'df_bool_0'] ['df_filter_1'] Filter ['Continent'] null null null select "
  },
  {
    "sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Name'], 'index': 'null', 'condition': '==', 'value': 'Anguilla'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Continent'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Name'] null == Anguilla ['country', 'df_bool_0'] ['df_filter_1'] Filter ['Continent'] null null null select "
  },
  {
    "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "dsl": "[{'input': ['country', 'city'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['city.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'city.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['city.Name'], 'index': 'null', 'condition': '==', 'value': 'Kabul'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['country.Region'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'city'] ['df_join_0'] Join ['country.Code'] ['city.CountryCode'] inner country. city. ['df_join_0'] ['df_bool_1'] Bool ['city.Name'] null == Kabul ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['country.Region'] null null null select "
  },
  {
    "sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
    "dsl": "[{'input': ['country', 'city'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['city.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'city.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['city.Name'], 'index': 'null', 'condition': '==', 'value': 'Kabul'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['country.Region'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'city'] ['df_join_0'] Join ['country.Code'] ['city.CountryCode'] inner country. city. ['df_join_0'] ['df_bool_1'] Bool ['city.Name'] null == Kabul ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['country.Region'] null null null select "
  },
  {
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['country.Name'], 'index': 'null', 'condition': '==', 'value': 'Aruba'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_sort_values_3'], 'command': 'SortValues', 'command_args': {'by': ['countrylanguage.Percentage'], 'ascending': False}}, {'input': ['df_sort_values_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['countrylanguage.Language'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['country.Name'] null == Aruba ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_sort_values_3'] SortValues ['countrylanguage.Percentage'] False ['df_sort_values_3'] ['df_filter_4'] Filter ['countrylanguage.Language'] [1] 0 False select "
  },
  {
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['country.Name'], 'index': 'null', 'condition': '==', 'value': 'Aruba'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_sort_values_3'], 'command': 'SortValues', 'command_args': {'by': ['countrylanguage.Percentage'], 'ascending': False}}, {'input': ['df_sort_values_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['countrylanguage.Language'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['country.Name'] null == Aruba ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_sort_values_3'] SortValues ['countrylanguage.Percentage'] False ['df_sort_values_3'] ['df_filter_4'] Filter ['countrylanguage.Language'] [1] 0 False select "
  },
  {
    "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Name'], 'index': 'null', 'condition': '==', 'value': 'Brazil'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Population', 'LifeExpectancy'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Name'] null == Brazil ['country', 'df_bool_0'] ['df_filter_1'] Filter ['Population', 'LifeExpectancy'] null null null select "
  },
  {
    "sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Name'], 'index': 'null', 'condition': '==', 'value': 'Brazil'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Population', 'LifeExpectancy'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Name'] null == Brazil ['country', 'df_bool_0'] ['df_filter_1'] Filter ['Population', 'LifeExpectancy'] null null null select "
  },
  {
    "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Name'], 'index': 'null', 'condition': '==', 'value': 'Angola'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Population', 'Region'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Name'] null == Angola ['country', 'df_bool_0'] ['df_filter_1'] Filter ['Population', 'Region'] null null null select "
  },
  {
    "sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Name'], 'index': 'null', 'condition': '==', 'value': 'Angola'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Population', 'Region'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Name'] null == Angola ['country', 'df_bool_0'] ['df_filter_1'] Filter ['Population', 'Region'] null null null select "
  },
  {
    "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Region'], 'index': 'null', 'condition': '==', 'value': 'Central Africa'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'LifeExpectancy': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Region'] null == Central Africa ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Region'], 'index': 'null', 'condition': '==', 'value': 'Central Africa'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'LifeExpectancy': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Region'] null == Central Africa ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['LifeExpectancy'], 'ascending': True}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Continent'] null == Asia ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_sort_values_2'] SortValues ['LifeExpectancy'] True ['df_sort_values_2'] ['df_filter_3'] Filter ['Name'] [1] 0 False select "
  },
  {
    "sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['LifeExpectancy'], 'ascending': True}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Continent'] null == Asia ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_sort_values_2'] SortValues ['LifeExpectancy'] True ['df_sort_values_2'] ['df_filter_3'] Filter ['Name'] [1] 0 False select "
  },
  {
    "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Population': ['sum'], 'GNP': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Continent'] null == Asia ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['sum'] ['max'] null "
  },
  {
    "sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Population': ['sum'], 'GNP': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Continent'] null == Asia ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['sum'] ['max'] null "
  },
  {
    "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Africa'}, {'column': ['GovernmentForm'], 'index': 'null', 'condition': '==', 'value': 'Republic'}]}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'LifeExpectancy': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Africa'}, {'column': ['GovernmentForm'], 'index': 'null', 'condition': '==', 'value': 'Republic'}] ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Africa'}, {'column': ['GovernmentForm'], 'index': 'null', 'condition': '==', 'value': 'Republic'}]}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'LifeExpectancy': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Africa'}, {'column': ['GovernmentForm'], 'index': 'null', 'condition': '==', 'value': 'Republic'}] ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}, {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Europe'}]}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'SurfaceArea': ['sum']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}, {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Europe'}] ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['sum'] null "
  },
  {
    "sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}, {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Europe'}]}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'SurfaceArea': ['sum']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}, {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Europe'}] ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['sum'] null "
  },
  {
    "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "dsl": "[{'input': ['city'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['District'], 'index': 'null', 'condition': '==', 'value': 'Gelderland'}}, {'input': ['city', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Population': ['sum']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['city'] ['df_bool_0'] Bool ['District'] null == Gelderland ['city', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['sum'] null "
  },
  {
    "sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "dsl": "[{'input': ['city'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['District'], 'index': 'null', 'condition': '==', 'value': 'Gelderland'}}, {'input': ['city', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Population': ['sum']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['city'] ['df_bool_0'] Bool ['District'] null == Gelderland ['city', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['sum'] null "
  },
  {
    "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['GovernmentForm'], 'index': 'null', 'condition': '==', 'value': 'US Territory'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'GNP': ['mean'], 'Population': ['sum']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['GovernmentForm'] null == US Territory ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] ['sum'] null "
  },
  {
    "sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['GovernmentForm'], 'index': 'null', 'condition': '==', 'value': 'US Territory'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'GNP': ['mean'], 'Population': ['sum']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['GovernmentForm'] null == US Territory ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['mean'] ['sum'] null "
  },
  {
    "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "dsl": "[{'input': ['countrylanguage'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Language': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['countrylanguage'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "dsl": "[{'input': ['countrylanguage'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Language': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['countrylanguage'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Africa'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'GovernmentForm': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Continent'] null == Africa ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Africa'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'GovernmentForm': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Continent'] null == Africa ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['country.Name'], 'index': 'null', 'condition': '==', 'value': 'Aruba'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'countrylanguage.Language': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['country.Name'] null == Aruba ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['country.Name'], 'index': 'null', 'condition': '==', 'value': 'Aruba'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'countrylanguage.Language': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['country.Name'] null == Aruba ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['country.Name'], 'index': 'null', 'condition': '==', 'value': 'Afghanistan'}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['country.Name'], 'index': 'null', 'condition': '==', 'value': 'Afghanistan'}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['country.Name'], 'index': 'null', 'condition': '==', 'value': 'Afghanistan'}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['country.Name'], 'index': 'null', 'condition': '==', 'value': 'Afghanistan'}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country.Name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['country.Name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['country.Name'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['country.Name'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country.Name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['country.Name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['country.Name'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['country.Name'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country.Continent'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['country.Continent'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['country.Continent'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['country.Continent'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country.Continent'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['country.Continent'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['country.Continent'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['country.Continent'] [1] 0 False select "
  },
  {
    "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'Chinese'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'country.Continent': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['countrylanguage.Language'] null == Chinese ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'Chinese'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'country.Continent': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['countrylanguage.Language'] null == Chinese ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'or': [{'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'English'}, {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'Dutch'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_drop_duplicates_3'], 'command': 'DropDuplicates', 'command_args': {'subset': ['country.Region'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['country.Region'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'English'}, {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'Dutch'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_drop_duplicates_3'] DropDuplicates ['country.Region'] null ['df_drop_duplicates_3'] ['df_filter_4'] Filter ['country.Region'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'or': [{'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'English'}, {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'Dutch'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_drop_duplicates_3'], 'command': 'DropDuplicates', 'command_args': {'subset': ['country.Region'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['country.Region'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'English'}, {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'Dutch'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_drop_duplicates_3'] DropDuplicates ['country.Region'] null ['df_drop_duplicates_3'] ['df_filter_4'] Filter ['country.Region'] null null null select "
  },
  {
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['country.Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_groupby_agg_3'], 'command': 'GroupbyAgg', 'command_args': {'by': ['countrylanguage.Language'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_3'], 'output': ['df_sort_values_4'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['countrylanguage.Language'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['country.Continent'] null == Asia ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_groupby_agg_3'] GroupbyAgg ['countrylanguage.Language'] ['count'] ['df_groupby_agg_3'] ['df_sort_values_4'] SortValues ['(all,count)'] False ['df_sort_values_4'] ['df_filter_5'] Filter ['countrylanguage.Language'] [1] 0 False select "
  },
  {
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['country.Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_groupby_agg_3'], 'command': 'GroupbyAgg', 'command_args': {'by': ['countrylanguage.Language'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_3'], 'output': ['df_sort_values_4'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['countrylanguage.Language'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['country.Continent'] null == Asia ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_groupby_agg_3'] GroupbyAgg ['countrylanguage.Language'] ['count'] ['df_groupby_agg_3'] ['df_sort_values_4'] SortValues ['(all,count)'] False ['df_sort_values_4'] ['df_filter_5'] Filter ['countrylanguage.Language'] [1] 0 False select "
  },
  {
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['country.GovernmentForm'], 'index': 'null', 'condition': '==', 'value': 'Republic'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_groupby_agg_3'], 'command': 'GroupbyAgg', 'command_args': {'by': ['countrylanguage.Language'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_3'], 'output': ['df_bool_4'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '==', 'value': 1.0}}, {'input': ['df_groupby_agg_3', 'df_bool_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['countrylanguage.Language'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['country.GovernmentForm'] null == Republic ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_groupby_agg_3'] GroupbyAgg ['countrylanguage.Language'] ['count'] ['df_groupby_agg_3'] ['df_bool_4'] Bool ['(all,count)'] null == 1.0 ['df_groupby_agg_3', 'df_bool_4'] ['df_filter_5'] Filter ['countrylanguage.Language'] null null null select "
  },
  {
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['country.GovernmentForm'], 'index': 'null', 'condition': '==', 'value': 'Republic'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_groupby_agg_3'], 'command': 'GroupbyAgg', 'command_args': {'by': ['countrylanguage.Language'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_3'], 'output': ['df_bool_4'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '==', 'value': 1.0}}, {'input': ['df_groupby_agg_3', 'df_bool_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['countrylanguage.Language'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['country.GovernmentForm'] null == Republic ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_groupby_agg_3'] GroupbyAgg ['countrylanguage.Language'] ['count'] ['df_groupby_agg_3'] ['df_bool_4'] Bool ['(all,count)'] null == 1.0 ['df_groupby_agg_3', 'df_bool_4'] ['df_filter_5'] Filter ['countrylanguage.Language'] null null null select "
  },
  {
    "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "dsl": "[{'input': ['city', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['city.CountryCode'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'city.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'English'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_sort_values_3'], 'command': 'SortValues', 'command_args': {'by': ['city.Population'], 'ascending': False}}, {'input': ['df_sort_values_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['city.Name', 'city.Population'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['city', 'countrylanguage'] ['df_join_0'] Join ['city.CountryCode'] ['countrylanguage.CountryCode'] inner city. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['countrylanguage.Language'] null == English ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_sort_values_3'] SortValues ['city.Population'] False ['df_sort_values_3'] ['df_filter_4'] Filter ['city.Name', 'city.Population'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "dsl": "[{'input': ['city', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['city.CountryCode'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'city.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'English'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_sort_values_3'], 'command': 'SortValues', 'command_args': {'by': ['city.Population'], 'ascending': False}}, {'input': ['df_sort_values_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['city.Name', 'city.Population'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['city', 'countrylanguage'] ['df_join_0'] Join ['city.CountryCode'] ['countrylanguage.CountryCode'] inner city. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool ['countrylanguage.Language'] null == English ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_sort_values_3'] SortValues ['city.Population'] False ['df_sort_values_3'] ['df_filter_4'] Filter ['city.Name', 'city.Population'] [1] 0 False select "
  },
  {
    "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['SurfaceArea'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Population', 'LifeExpectancy'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Continent'] null == Asia ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_sort_values_2'] SortValues ['SurfaceArea'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Name', 'Population', 'LifeExpectancy'] [1] 0 False select "
  },
  {
    "sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['SurfaceArea'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Population', 'LifeExpectancy'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Continent'] null == Asia ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_sort_values_2'] SortValues ['SurfaceArea'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Name', 'Population', 'LifeExpectancy'] [1] 0 False select "
  },
  {
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['country.HeadOfState'], 'index': 'null', 'condition': '==', 'value': 'Beatrix'}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['countrylanguage.Language'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['country.HeadOfState'], 'index': 'null', 'condition': '==', 'value': 'Beatrix'}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['countrylanguage.Language'] null null null select "
  },
  {
    "sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['country.HeadOfState'], 'index': 'null', 'condition': '==', 'value': 'Beatrix'}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['countrylanguage.Language'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['country.HeadOfState'], 'index': 'null', 'condition': '==', 'value': 'Beatrix'}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['countrylanguage.Language'] null null null select "
  },
  {
    "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['country.IndepYear'], 'index': 'null', 'condition': '<', 'value': 1930.0}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'countrylanguage.Language': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['country.IndepYear'], 'index': 'null', 'condition': '<', 'value': 1930.0}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'and': [{'column': ['country.IndepYear'], 'index': 'null', 'condition': '<', 'value': 1930.0}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}]}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'countrylanguage.Language': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_bool_1'] Bool [{'column': ['country.IndepYear'], 'index': 'null', 'condition': '<', 'value': 1930.0}, {'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}] ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "dsl": "[{'input': ['countrylanguage'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Language'], 'index': 'null', 'condition': '!=', 'value': 'English'}}, {'input': ['countrylanguage', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_drop_duplicates_2'], 'command': 'DropDuplicates', 'command_args': {'subset': ['CountryCode'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['CountryCode'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['countrylanguage'] ['df_bool_0'] Bool ['Language'] null != English ['countrylanguage', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_drop_duplicates_2'] DropDuplicates ['CountryCode'] null ['df_drop_duplicates_2'] ['df_filter_3'] Filter ['CountryCode'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "dsl": "[{'input': ['countrylanguage'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Language'], 'index': 'null', 'condition': '!=', 'value': 'English'}}, {'input': ['countrylanguage', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_drop_duplicates_2'], 'command': 'DropDuplicates', 'command_args': {'subset': ['CountryCode'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['CountryCode'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['countrylanguage'] ['df_bool_0'] Bool ['Language'] null != English ['countrylanguage', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_drop_duplicates_2'] DropDuplicates ['CountryCode'] null ['df_drop_duplicates_2'] ['df_filter_3'] Filter ['CountryCode'] null null null select "
  },
  {
    "sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0', 'city'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['city.CountryCode'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'city.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'and': [{'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 't'}, {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'chinese'}, {'column': ['country.Continent'], 'index': 'null', 'condition': '==', 'value': 'asia'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_drop_duplicates_4'], 'command': 'DropDuplicates', 'command_args': {'subset': ['city.Name'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['city.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0', 'city'] ['df_join_1'] Join ['country.Code'] ['city.CountryCode'] inner  city. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 't'}, {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'chinese'}, {'column': ['country.Continent'], 'index': 'null', 'condition': '==', 'value': 'asia'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_drop_duplicates_4'] DropDuplicates ['city.Name'] null ['df_drop_duplicates_4'] ['df_filter_5'] Filter ['city.Name'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0', 'city'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['city.CountryCode'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'city.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'and': [{'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}, {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'Chinese'}, {'column': ['country.Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}]}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_3'], 'output': ['df_drop_duplicates_4'], 'command': 'DropDuplicates', 'command_args': {'subset': ['city.Name'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_4'], 'output': ['df_filter_5'], 'command': 'Filter', 'command_args': {'columns': ['city.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0', 'city'] ['df_join_1'] Join ['country.Code'] ['city.CountryCode'] inner  city. ['df_join_1'] ['df_bool_2'] Bool [{'column': ['countrylanguage.IsOfficial'], 'index': 'null', 'condition': '==', 'value': 'T'}, {'column': ['countrylanguage.Language'], 'index': 'null', 'condition': '==', 'value': 'Chinese'}, {'column': ['country.Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}] ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['all'] null null null select ['df_filter_3'] ['df_drop_duplicates_4'] DropDuplicates ['city.Name'] null ['df_drop_duplicates_4'] ['df_filter_5'] Filter ['city.Name'] null null null select "
  },
  {
    "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "dsl": "[{'input': ['country'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Population'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'SurfaceArea', 'IndepYear'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_sort_values_0'] SortValues ['Population'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'SurfaceArea', 'IndepYear'] [1] 0 False select "
  },
  {
    "sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "dsl": "[{'input': ['country'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Population'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'SurfaceArea', 'IndepYear'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_sort_values_0'] SortValues ['Population'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'SurfaceArea', 'IndepYear'] [1] 0 False select "
  },
  {
    "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "dsl": "[{'input': ['country'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['SurfaceArea'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Population', 'HeadOfState'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_sort_values_0'] SortValues ['SurfaceArea'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'Population', 'HeadOfState'] [1] 0 False select "
  },
  {
    "sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "dsl": "[{'input': ['country'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['SurfaceArea'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'Population', 'HeadOfState'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_sort_values_0'] SortValues ['SurfaceArea'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'Population', 'HeadOfState'] [1] 0 False select "
  },
  {
    "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country.Name'], 'agg_args': {'all': ['count'], 'countrylanguage.Language': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 2.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['(countrylanguage.Language,count)', 'country.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['country.Name'] ['count'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null > 2.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['(countrylanguage.Language,count)', 'country.Name'] null null null select "
  },
  {
    "sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
    "dsl": "[{'input': ['country', 'countrylanguage'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['country.Code'], 'right_on': ['countrylanguage.CountryCode'], 'how': 'inner', 'lsuffix': 'country.', 'rsuffix': 'countrylanguage.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['country.Name'], 'agg_args': {'all': ['count'], 'countrylanguage.Language': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 2.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['(countrylanguage.Language,count)', 'country.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country', 'countrylanguage'] ['df_join_0'] Join ['country.Code'] ['countrylanguage.CountryCode'] inner country. countrylanguage. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['country.Name'] ['count'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null > 2.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['(countrylanguage.Language,count)', 'country.Name'] null null null select "
  },
  {
    "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "dsl": "[{'input': ['country'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['GovernmentForm'], 'agg_args': {'LifeExpectancy': ['mean'], 'Population': ['sum']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(LifeExpectancy,mean)'], 'index': 'null', 'condition': '>', 'value': 72.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(Population,sum)', 'GovernmentForm'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_groupby_agg_0'] GroupbyAgg ['GovernmentForm'] ['mean'] ['sum'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(LifeExpectancy,mean)'] null > 72.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['(Population,sum)', 'GovernmentForm'] null null null select "
  },
  {
    "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "dsl": "[{'input': ['country'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['GovernmentForm'], 'agg_args': {'LifeExpectancy': ['mean'], 'Population': ['sum']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(LifeExpectancy,mean)'], 'index': 'null', 'condition': '>', 'value': 72.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(Population,sum)', 'GovernmentForm'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_groupby_agg_0'] GroupbyAgg ['GovernmentForm'] ['mean'] ['sum'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(LifeExpectancy,mean)'] null > 72.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['(Population,sum)', 'GovernmentForm'] null null null select "
  },
  {
    "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "dsl": "[{'input': ['country'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Continent'], 'agg_args': {'LifeExpectancy': ['mean'], 'Population': ['sum']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(LifeExpectancy,mean)'], 'index': 'null', 'condition': '<', 'value': 72.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(Population,sum)', '(LifeExpectancy,mean)', 'Continent'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_groupby_agg_0'] GroupbyAgg ['Continent'] ['mean'] ['sum'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(LifeExpectancy,mean)'] null < 72.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['(Population,sum)', '(LifeExpectancy,mean)', 'Continent'] null null null select "
  },
  {
    "sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "dsl": "[{'input': ['country'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Continent'], 'agg_args': {'LifeExpectancy': ['mean'], 'Population': ['sum']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(LifeExpectancy,mean)'], 'index': 'null', 'condition': '<', 'value': 72.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['(Population,sum)', '(LifeExpectancy,mean)', 'Continent'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_groupby_agg_0'] GroupbyAgg ['Continent'] ['mean'] ['sum'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(LifeExpectancy,mean)'] null < 72.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['(Population,sum)', '(LifeExpectancy,mean)', 'Continent'] null null null select "
  },
  {
    "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "dsl": "[{'input': ['country'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['SurfaceArea'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'SurfaceArea'], 'index': [5], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_sort_values_0'] SortValues ['SurfaceArea'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'SurfaceArea'] [5] 0 False select "
  },
  {
    "sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "dsl": "[{'input': ['country'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['SurfaceArea'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name', 'SurfaceArea'], 'index': [5], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_sort_values_0'] SortValues ['SurfaceArea'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name', 'SurfaceArea'] [5] 0 False select "
  },
  {
    "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "dsl": "[{'input': ['country'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Population'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': [3], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_sort_values_0'] SortValues ['Population'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] [3] 0 False select "
  },
  {
    "sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "dsl": "[{'input': ['country'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Population'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': [3], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_sort_values_0'] SortValues ['Population'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] [3] 0 False select "
  },
  {
    "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "dsl": "[{'input': ['country'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Population'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': [3], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_sort_values_0'] SortValues ['Population'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] [3] 0 False select "
  },
  {
    "sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "dsl": "[{'input': ['country'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Population'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': [3], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_sort_values_0'] SortValues ['Population'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] [3] 0 False select "
  },
  {
    "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Continent'] null == Asia ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Asia'}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool ['Continent'] null == Asia ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Europe'}, {'column': ['Population'], 'index': 'null', 'condition': '==', 'value': '80000'}]}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Europe'}, {'column': ['Population'], 'index': 'null', 'condition': '==', 'value': '80000'}] ['country', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Europe'}, {'column': ['Population'], 'index': 'null', 'condition': '==', 'value': '80000'}]}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'Europe'}, {'column': ['Population'], 'index': 'null', 'condition': '==', 'value': '80000'}] ['country', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'north america'}, {'column': ['SurfaceArea'], 'index': 'null', 'condition': '>', 'value': 3000.0}]}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Population': ['sum'], 'SurfaceArea': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'north america'}, {'column': ['SurfaceArea'], 'index': 'null', 'condition': '>', 'value': 3000.0}] ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['sum'] ['mean'] null "
  },
  {
    "sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "dsl": "[{'input': ['country'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'north america'}, {'column': ['SurfaceArea'], 'index': 'null', 'condition': '>', 'value': 3000.0}]}}, {'input': ['country', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Population': ['sum'], 'SurfaceArea': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['country'] ['df_bool_0'] Bool [{'column': ['Continent'], 'index': 'null', 'condition': '==', 'value': 'north america'}, {'column': ['SurfaceArea'], 'index': 'null', 'condition': '>', 'value': 3000.0}] ['country', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['sum'] ['mean'] null "
  },
  {
    "sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "dsl": "[{'input': ['city'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Population'], 'index': 'null', 'condition': '>', 'value': 160000.0}, {'column': ['Population'], 'index': 'null', 'condition': '<', 'value': 900000.0}]}}, {'input': ['city', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['city'] ['df_bool_0'] Bool [{'column': ['Population'], 'index': 'null', 'condition': '>', 'value': 160000.0}, {'column': ['Population'], 'index': 'null', 'condition': '<', 'value': 900000.0}] ['city', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "select name from city where population between 160000 and 900000",
    "dsl": "[{'input': ['city'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'and': [{'column': ['Population'], 'index': 'null', 'condition': '>', 'value': 160000.0}, {'column': ['Population'], 'index': 'null', 'condition': '<', 'value': 900000.0}]}}, {'input': ['city', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['city'] ['df_bool_0'] Bool [{'column': ['Population'], 'index': 'null', 'condition': '>', 'value': 160000.0}, {'column': ['Population'], 'index': 'null', 'condition': '<', 'value': 900000.0}] ['city', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['countrylanguage'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Language'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Language'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['countrylanguage'] ['df_groupby_agg_0'] GroupbyAgg ['Language'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Language'] [1] 0 False select "
  },
  {
    "sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['countrylanguage'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Language'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Language'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['countrylanguage'] ['df_groupby_agg_0'] GroupbyAgg ['Language'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Language'] [1] 0 False select "
  },
  {
    "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "dsl": "[{'input': ['countrylanguage'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Language'], 'index': 'null', 'condition': '==', 'value': 'Spanish'}}, {'input': ['countrylanguage', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_groupby_agg_2'], 'command': 'GroupbyAgg', 'command_args': {'by': ['CountryCode'], 'agg_args': {'all': ['count'], 'Percentage': ['max']}}}, {'input': ['df_groupby_agg_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', '(Percentage,max)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['countrylanguage'] ['df_bool_0'] Bool ['Language'] null == Spanish ['countrylanguage', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_groupby_agg_2'] GroupbyAgg ['CountryCode'] ['count'] ['max'] ['df_groupby_agg_2'] ['df_filter_3'] Filter ['(all,count)', '(Percentage,max)'] null null null select "
  },
  {
    "sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "dsl": "[{'input': ['countrylanguage'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Language'], 'index': 'null', 'condition': '==', 'value': 'Spanish'}}, {'input': ['countrylanguage', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_groupby_agg_2'], 'command': 'GroupbyAgg', 'command_args': {'by': ['CountryCode'], 'agg_args': {'all': ['count'], 'Percentage': ['max']}}}, {'input': ['df_groupby_agg_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['(all,count)', '(Percentage,max)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['countrylanguage'] ['df_bool_0'] Bool ['Language'] null == Spanish ['countrylanguage', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_groupby_agg_2'] GroupbyAgg ['CountryCode'] ['count'] ['max'] ['df_groupby_agg_2'] ['df_filter_3'] Filter ['(all,count)', '(Percentage,max)'] null null null select "
  },
  {
    "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "dsl": "[{'input': ['countrylanguage'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Language'], 'index': 'null', 'condition': '==', 'value': 'Spanish'}}, {'input': ['countrylanguage', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_groupby_agg_2'], 'command': 'GroupbyAgg', 'command_args': {'by': ['CountryCode'], 'agg_args': {'Percentage': ['max']}}}, {'input': ['df_groupby_agg_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['CountryCode', '(Percentage,max)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['countrylanguage'] ['df_bool_0'] Bool ['Language'] null == Spanish ['countrylanguage', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_groupby_agg_2'] GroupbyAgg ['CountryCode'] ['max'] ['df_groupby_agg_2'] ['df_filter_3'] Filter ['CountryCode', '(Percentage,max)'] null null null select "
  },
  {
    "sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "dsl": "[{'input': ['countrylanguage'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Language'], 'index': 'null', 'condition': '==', 'value': 'Spanish'}}, {'input': ['countrylanguage', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_groupby_agg_2'], 'command': 'GroupbyAgg', 'command_args': {'by': ['CountryCode'], 'agg_args': {'Percentage': ['max']}}}, {'input': ['df_groupby_agg_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['CountryCode', '(Percentage,max)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['countrylanguage'] ['df_bool_0'] Bool ['Language'] null == Spanish ['countrylanguage', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_groupby_agg_2'] GroupbyAgg ['CountryCode'] ['max'] ['df_groupby_agg_2'] ['df_filter_3'] Filter ['CountryCode', '(Percentage,max)'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM conductor",
    "dsl": "[{'input': ['conductor'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['conductor'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM conductor",
    "dsl": "[{'input': ['conductor'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['conductor'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT Name FROM conductor ORDER BY Age ASC",
    "dsl": "[{'input': ['conductor'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['conductor'] ['df_sort_values_0'] SortValues ['Age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM conductor ORDER BY Age ASC",
    "dsl": "[{'input': ['conductor'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Age'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['conductor'] ['df_sort_values_0'] SortValues ['Age'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "dsl": "[{'input': ['conductor'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Nationality'], 'index': 'null', 'condition': '!=', 'value': 'USA'}}, {'input': ['conductor', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['conductor'] ['df_bool_0'] Bool ['Nationality'] null != USA ['conductor', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "dsl": "[{'input': ['conductor'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Nationality'], 'index': 'null', 'condition': '!=', 'value': 'USA'}}, {'input': ['conductor', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['conductor'] ['df_bool_0'] Bool ['Nationality'] null != USA ['conductor', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "dsl": "[{'input': ['orchestra'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Year_of_Founded'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Record_Company'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['orchestra'] ['df_sort_values_0'] SortValues ['Year_of_Founded'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Record_Company'] null null null select "
  },
  {
    "sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "dsl": "[{'input': ['orchestra'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Year_of_Founded'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Record_Company'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['orchestra'] ['df_sort_values_0'] SortValues ['Year_of_Founded'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Record_Company'] null null null select "
  },
  {
    "sql": "SELECT avg(Attendance) FROM SHOW",
    "dsl": "[{'input': ['show'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Attendance': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['show'] ['df_statics_column_0'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT avg(Attendance) FROM SHOW",
    "dsl": "[{'input': ['show'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Attendance': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['show'] ['df_statics_column_0'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "dsl": "[{'input': ['performance'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Type'], 'index': 'null', 'condition': '!=', 'value': 'Live final'}}, {'input': ['performance', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Share': ['min']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['performance'] ['df_bool_0'] Bool ['Type'] null != Live final ['performance', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['min'] null "
  },
  {
    "sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "dsl": "[{'input': ['performance'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Type'], 'index': 'null', 'condition': '!=', 'value': 'Live final'}}, {'input': ['performance', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Share': ['min']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['performance'] ['df_bool_0'] Bool ['Type'] null != Live final ['performance', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['min'] null "
  },
  {
    "sql": "SELECT count(DISTINCT Nationality) FROM conductor",
    "dsl": "[{'input': ['conductor'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Nationality': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['conductor'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT Nationality) FROM conductor",
    "dsl": "[{'input': ['conductor'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'Nationality': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['conductor'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "dsl": "[{'input': ['conductor'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Year_of_Work'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['conductor'] ['df_sort_values_0'] SortValues ['Year_of_Work'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "dsl": "[{'input': ['conductor'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Year_of_Work'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['conductor'] ['df_sort_values_0'] SortValues ['Year_of_Work'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "dsl": "[{'input': ['conductor'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Year_of_Work'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['conductor'] ['df_sort_values_0'] SortValues ['Year_of_Work'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] [1] 0 False select "
  },
  {
    "sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "dsl": "[{'input': ['conductor'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Year_of_Work'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['conductor'] ['df_sort_values_0'] SortValues ['Year_of_Work'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "dsl": "[{'input': ['conductor', 'orchestra'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['conductor.Conductor_ID'], 'right_on': ['orchestra.Conductor_ID'], 'how': 'inner', 'lsuffix': 'conductor.', 'rsuffix': 'orchestra.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['conductor.Name', 'orchestra.Orchestra'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['conductor', 'orchestra'] ['df_join_0'] Join ['conductor.Conductor_ID'] ['orchestra.Conductor_ID'] inner conductor. orchestra. ['df_join_0'] ['df_filter_1'] Filter ['conductor.Name', 'orchestra.Orchestra'] null null null select "
  },
  {
    "sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
    "dsl": "[{'input': ['conductor', 'orchestra'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['conductor.Conductor_ID'], 'right_on': ['orchestra.Conductor_ID'], 'how': 'inner', 'lsuffix': 'conductor.', 'rsuffix': 'orchestra.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['conductor.Name', 'orchestra.Orchestra'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['conductor', 'orchestra'] ['df_join_0'] Join ['conductor.Conductor_ID'] ['orchestra.Conductor_ID'] inner conductor. orchestra. ['df_join_0'] ['df_filter_1'] Filter ['conductor.Name', 'orchestra.Orchestra'] null null null select "
  },
  {
    "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "dsl": "[{'input': ['conductor', 'orchestra'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['conductor.Conductor_ID'], 'right_on': ['orchestra.Conductor_ID'], 'how': 'inner', 'lsuffix': 'conductor.', 'rsuffix': 'orchestra.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['orchestra.Year_of_Founded'], 'index': 'null', 'condition': '>', 'value': 2008.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['conductor.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['conductor', 'orchestra'] ['df_join_0'] Join ['conductor.Conductor_ID'] ['orchestra.Conductor_ID'] inner conductor. orchestra. ['df_join_0'] ['df_bool_1'] Bool ['orchestra.Year_of_Founded'] null > 2008.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['conductor.Name'] null null null select "
  },
  {
    "sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
    "dsl": "[{'input': ['conductor', 'orchestra'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['conductor.Conductor_ID'], 'right_on': ['orchestra.Conductor_ID'], 'how': 'inner', 'lsuffix': 'conductor.', 'rsuffix': 'orchestra.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['orchestra.Year_of_Founded'], 'index': 'null', 'condition': '>', 'value': 2008.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['conductor.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['conductor', 'orchestra'] ['df_join_0'] Join ['conductor.Conductor_ID'] ['orchestra.Conductor_ID'] inner conductor. orchestra. ['df_join_0'] ['df_bool_1'] Bool ['orchestra.Year_of_Founded'] null > 2008.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['conductor.Name'] null null null select "
  },
  {
    "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "dsl": "[{'input': ['orchestra'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Record_Company'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Record_Company', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['orchestra'] ['df_groupby_agg_0'] GroupbyAgg ['Record_Company'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Record_Company', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "dsl": "[{'input': ['orchestra'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Record_Company'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Record_Company', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['orchestra'] ['df_groupby_agg_0'] GroupbyAgg ['Record_Company'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Record_Company', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "dsl": "[{'input': ['orchestra'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Major_Record_Format'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Major_Record_Format'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['orchestra'] ['df_groupby_agg_0'] GroupbyAgg ['Major_Record_Format'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['Major_Record_Format'] null null null select "
  },
  {
    "sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "dsl": "[{'input': ['orchestra'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Major_Record_Format'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': True}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Major_Record_Format'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['orchestra'] ['df_groupby_agg_0'] GroupbyAgg ['Major_Record_Format'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] True ['df_sort_values_1'] ['df_filter_2'] Filter ['Major_Record_Format'] null null null select "
  },
  {
    "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "dsl": "[{'input': ['orchestra'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Record_Company'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Record_Company'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['orchestra'] ['df_groupby_agg_0'] GroupbyAgg ['Record_Company'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Record_Company'] [1] 0 False select "
  },
  {
    "sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "dsl": "[{'input': ['orchestra'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Record_Company'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Record_Company'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['orchestra'] ['df_groupby_agg_0'] GroupbyAgg ['Record_Company'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Record_Company'] [1] 0 False select "
  },
  {
    "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "dsl": "[{'input': ['orchestra'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Major_Record_Format'], 'index': 'null', 'condition': '==', 'value': 'CD'}, {'column': ['Major_Record_Format'], 'index': 'null', 'condition': '==', 'value': 'DVD'}]}}, {'input': ['orchestra', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['orchestra'] ['df_bool_0'] Bool [{'column': ['Major_Record_Format'], 'index': 'null', 'condition': '==', 'value': 'CD'}, {'column': ['Major_Record_Format'], 'index': 'null', 'condition': '==', 'value': 'DVD'}] ['orchestra', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "dsl": "[{'input': ['orchestra'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Major_Record_Format'], 'index': 'null', 'condition': '==', 'value': 'CD'}, {'column': ['Major_Record_Format'], 'index': 'null', 'condition': '==', 'value': 'DVD'}]}}, {'input': ['orchestra', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['orchestra'] ['df_bool_0'] Bool [{'column': ['Major_Record_Format'], 'index': 'null', 'condition': '==', 'value': 'CD'}, {'column': ['Major_Record_Format'], 'index': 'null', 'condition': '==', 'value': 'DVD'}] ['orchestra', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Highschooler",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Highschooler'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Highschooler",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Highschooler'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT name ,  grade FROM Highschooler",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['name', 'grade'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_filter_0'] Filter ['name', 'grade'] null null null select "
  },
  {
    "sql": "SELECT name ,  grade FROM Highschooler",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['name', 'grade'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_filter_0'] Filter ['name', 'grade'] null null null select "
  },
  {
    "sql": "SELECT grade FROM Highschooler",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['grade'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_filter_0'] Filter ['grade'] null null null select "
  },
  {
    "sql": "SELECT grade FROM Highschooler",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['grade'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_filter_0'] Filter ['grade'] null null null select "
  },
  {
    "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['name'], 'index': 'null', 'condition': '==', 'value': 'Kyle'}}, {'input': ['Highschooler', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['grade'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_bool_0'] Bool ['name'] null == Kyle ['Highschooler', 'df_bool_0'] ['df_filter_1'] Filter ['grade'] null null null select "
  },
  {
    "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['name'], 'index': 'null', 'condition': '==', 'value': 'Kyle'}}, {'input': ['Highschooler', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['grade'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_bool_0'] Bool ['name'] null == Kyle ['Highschooler', 'df_bool_0'] ['df_filter_1'] Filter ['grade'] null null null select "
  },
  {
    "sql": "SELECT name FROM Highschooler WHERE grade  =  10",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['grade'], 'index': 'null', 'condition': '==', 'value': 10.0}}, {'input': ['Highschooler', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_bool_0'] Bool ['grade'] null == 10.0 ['Highschooler', 'df_bool_0'] ['df_filter_1'] Filter ['name'] null null null select "
  },
  {
    "sql": "SELECT name FROM Highschooler WHERE grade  =  10",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['grade'], 'index': 'null', 'condition': '==', 'value': 10.0}}, {'input': ['Highschooler', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_bool_0'] Bool ['grade'] null == 10.0 ['Highschooler', 'df_bool_0'] ['df_filter_1'] Filter ['name'] null null null select "
  },
  {
    "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['name'], 'index': 'null', 'condition': '==', 'value': 'Kyle'}}, {'input': ['Highschooler', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_bool_0'] Bool ['name'] null == Kyle ['Highschooler', 'df_bool_0'] ['df_filter_1'] Filter ['ID'] null null null select "
  },
  {
    "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['name'], 'index': 'null', 'condition': '==', 'value': 'Kyle'}}, {'input': ['Highschooler', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['ID'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_bool_0'] Bool ['name'] null == Kyle ['Highschooler', 'df_bool_0'] ['df_filter_1'] Filter ['ID'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['grade'], 'index': 'null', 'condition': '==', 'value': 9.0}, {'column': ['grade'], 'index': 'null', 'condition': '==', 'value': 10.0}]}}, {'input': ['Highschooler', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Highschooler'] ['df_bool_0'] Bool [{'column': ['grade'], 'index': 'null', 'condition': '==', 'value': 9.0}, {'column': ['grade'], 'index': 'null', 'condition': '==', 'value': 10.0}] ['Highschooler', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['grade'], 'index': 'null', 'condition': '==', 'value': 9.0}, {'column': ['grade'], 'index': 'null', 'condition': '==', 'value': 10.0}]}}, {'input': ['Highschooler', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_1'], 'output': ['df_statics_column_2'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Highschooler'] ['df_bool_0'] Bool [{'column': ['grade'], 'index': 'null', 'condition': '==', 'value': 9.0}, {'column': ['grade'], 'index': 'null', 'condition': '==', 'value': 10.0}] ['Highschooler', 'df_bool_0'] ['df_filter_1'] Filter ['all'] null null null select ['df_filter_1'] ['df_statics_column_2'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['grade'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['grade', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_groupby_agg_0'] GroupbyAgg ['grade'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['grade', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['grade'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['grade', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_groupby_agg_0'] GroupbyAgg ['grade'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['grade', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['grade'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['grade'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_groupby_agg_0'] GroupbyAgg ['grade'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['grade'] [1] 0 False select "
  },
  {
    "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['grade'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['grade'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_groupby_agg_0'] GroupbyAgg ['grade'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['grade'] [1] 0 False select "
  },
  {
    "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['grade'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 4.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['grade'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_groupby_agg_0'] GroupbyAgg ['grade'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null >= 4.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['grade'] null null null select "
  },
  {
    "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "dsl": "[{'input': ['Highschooler'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['grade'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>=', 'value': 4.0}}, {'input': ['df_groupby_agg_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['grade'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Highschooler'] ['df_groupby_agg_0'] GroupbyAgg ['grade'] ['count'] ['df_groupby_agg_0'] ['df_bool_1'] Bool ['(all,count)'] null >= 4.0 ['df_groupby_agg_0', 'df_bool_1'] ['df_filter_2'] Filter ['grade'] null null null select "
  },
  {
    "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "dsl": "[{'input': ['Friend'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['student_id'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['student_id', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Friend'] ['df_groupby_agg_0'] GroupbyAgg ['student_id'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['student_id', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "dsl": "[{'input': ['Friend'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['student_id'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['student_id', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Friend'] ['df_groupby_agg_0'] GroupbyAgg ['student_id'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['student_id', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "dsl": "[{'input': ['Friend', 'Highschooler'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Friend.student_id'], 'right_on': ['Highschooler.ID'], 'how': 'inner', 'lsuffix': 'Friend.', 'rsuffix': 'Highschooler.'}}, {'input': ['df_join_0', 'Highschooler'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Friend.friend_id'], 'right_on': ['Highschooler.ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Highschooler.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['Highschooler.name'], 'index': 'null', 'condition': '==', 'value': 'Kyle'}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Highschooler.name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Friend', 'Highschooler'] ['df_join_0'] Join ['Friend.student_id'] ['Highschooler.ID'] inner Friend. Highschooler. ['df_join_0', 'Highschooler'] ['df_join_1'] Join ['Friend.friend_id'] ['Highschooler.ID'] inner  Highschooler. ['df_join_1'] ['df_bool_2'] Bool ['Highschooler.name'] null == Kyle ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['Highschooler.name'] null null null select "
  },
  {
    "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "dsl": "[{'input': ['Friend', 'Highschooler'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Friend.student_id'], 'right_on': ['Highschooler.ID'], 'how': 'inner', 'lsuffix': 'Friend.', 'rsuffix': 'Highschooler.'}}, {'input': ['df_join_0', 'Highschooler'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Friend.friend_id'], 'right_on': ['Highschooler.ID'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Highschooler.'}}, {'input': ['df_join_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['Highschooler.name'], 'index': 'null', 'condition': '==', 'value': 'Kyle'}}, {'input': ['df_join_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Highschooler.name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Friend', 'Highschooler'] ['df_join_0'] Join ['Friend.student_id'] ['Highschooler.ID'] inner Friend. Highschooler. ['df_join_0', 'Highschooler'] ['df_join_1'] Join ['Friend.friend_id'] ['Highschooler.ID'] inner  Highschooler. ['df_join_1'] ['df_bool_2'] Bool ['Highschooler.name'] null == Kyle ['df_join_1', 'df_bool_2'] ['df_filter_3'] Filter ['Highschooler.name'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "dsl": "[{'input': ['Friend', 'Highschooler'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Friend.student_id'], 'right_on': ['Highschooler.ID'], 'how': 'inner', 'lsuffix': 'Friend.', 'rsuffix': 'Highschooler.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Highschooler.name'], 'index': 'null', 'condition': '==', 'value': 'Kyle'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Friend', 'Highschooler'] ['df_join_0'] Join ['Friend.student_id'] ['Highschooler.ID'] inner Friend. Highschooler. ['df_join_0'] ['df_bool_1'] Bool ['Highschooler.name'] null == Kyle ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "dsl": "[{'input': ['Friend', 'Highschooler'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Friend.student_id'], 'right_on': ['Highschooler.ID'], 'how': 'inner', 'lsuffix': 'Friend.', 'rsuffix': 'Highschooler.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Highschooler.name'], 'index': 'null', 'condition': '==', 'value': 'Kyle'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Friend', 'Highschooler'] ['df_join_0'] Join ['Friend.student_id'] ['Highschooler.ID'] inner Friend. Highschooler. ['df_join_0'] ['df_bool_1'] Bool ['Highschooler.name'] null == Kyle ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "dsl": "[{'input': ['Likes'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['student_id'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['student_id', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Likes'] ['df_groupby_agg_0'] GroupbyAgg ['student_id'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['student_id', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "dsl": "[{'input': ['Likes'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['student_id'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['student_id', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Likes'] ['df_groupby_agg_0'] GroupbyAgg ['student_id'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['student_id', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "dsl": "[{'input': ['Likes', 'Highschooler'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Likes.student_id'], 'right_on': ['Highschooler.ID'], 'how': 'inner', 'lsuffix': 'Likes.', 'rsuffix': 'Highschooler.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Highschooler.name'], 'index': 'null', 'condition': '==', 'value': 'Kyle'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Likes', 'Highschooler'] ['df_join_0'] Join ['Likes.student_id'] ['Highschooler.ID'] inner Likes. Highschooler. ['df_join_0'] ['df_bool_1'] Bool ['Highschooler.name'] null == Kyle ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "dsl": "[{'input': ['Likes', 'Highschooler'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Likes.student_id'], 'right_on': ['Highschooler.ID'], 'how': 'inner', 'lsuffix': 'Likes.', 'rsuffix': 'Highschooler.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Highschooler.name'], 'index': 'null', 'condition': '==', 'value': 'Kyle'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_statics_column_3'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Likes', 'Highschooler'] ['df_join_0'] Join ['Likes.student_id'] ['Highschooler.ID'] inner Likes. Highschooler. ['df_join_0'] ['df_bool_1'] Bool ['Highschooler.name'] null == Kyle ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_statics_column_3'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Breeds', 'Dogs'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Breeds.breed_code'], 'right_on': ['Dogs.breed_code'], 'how': 'inner', 'lsuffix': 'Breeds.', 'rsuffix': 'Dogs.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Breeds.breed_name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Breeds.breed_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Breeds', 'Dogs'] ['df_join_0'] Join ['Breeds.breed_code'] ['Dogs.breed_code'] inner Breeds. Dogs. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Breeds.breed_name'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Breeds.breed_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "dsl": "[{'input': ['Breeds', 'Dogs'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Breeds.breed_code'], 'right_on': ['Dogs.breed_code'], 'how': 'inner', 'lsuffix': 'Breeds.', 'rsuffix': 'Dogs.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Breeds.breed_name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_sort_values_2'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Breeds.breed_name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Breeds', 'Dogs'] ['df_join_0'] Join ['Breeds.breed_code'] ['Dogs.breed_code'] inner Breeds. Dogs. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['Breeds.breed_name'] ['count'] ['df_groupby_agg_1'] ['df_sort_values_2'] SortValues ['(all,count)'] False ['df_sort_values_2'] ['df_filter_3'] Filter ['Breeds.breed_name'] [1] 0 False select "
  },
  {
    "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "dsl": "[{'input': ['Treatments', 'Professionals'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Treatments.professional_id'], 'right_on': ['Professionals.professional_id'], 'how': 'inner', 'lsuffix': 'Treatments.', 'rsuffix': 'Professionals.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Treatments.date_of_treatment', 'Professionals.first_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Treatments', 'Professionals'] ['df_join_0'] Join ['Treatments.professional_id'] ['Professionals.professional_id'] inner Treatments. Professionals. ['df_join_0'] ['df_filter_1'] Filter ['Treatments.date_of_treatment', 'Professionals.first_name'] null null null select "
  },
  {
    "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
    "dsl": "[{'input': ['Treatments', 'Professionals'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Treatments.professional_id'], 'right_on': ['Professionals.professional_id'], 'how': 'inner', 'lsuffix': 'Treatments.', 'rsuffix': 'Professionals.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Treatments.date_of_treatment', 'Professionals.first_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Treatments', 'Professionals'] ['df_join_0'] Join ['Treatments.professional_id'] ['Professionals.professional_id'] inner Treatments. Professionals. ['df_join_0'] ['df_filter_1'] Filter ['Treatments.date_of_treatment', 'Professionals.first_name'] null null null select "
  },
  {
    "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "dsl": "[{'input': ['Treatments', 'Treatment_Types'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Treatments.treatment_type_code'], 'right_on': ['Treatment_Types.treatment_type_code'], 'how': 'inner', 'lsuffix': 'Treatments.', 'rsuffix': 'Treatment_Types.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Treatments.cost_of_treatment', 'Treatment_Types.treatment_type_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Treatments', 'Treatment_Types'] ['df_join_0'] Join ['Treatments.treatment_type_code'] ['Treatment_Types.treatment_type_code'] inner Treatments. Treatment_Types. ['df_join_0'] ['df_filter_1'] Filter ['Treatments.cost_of_treatment', 'Treatment_Types.treatment_type_description'] null null null select "
  },
  {
    "sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
    "dsl": "[{'input': ['Treatments', 'Treatment_Types'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Treatments.treatment_type_code'], 'right_on': ['Treatment_Types.treatment_type_code'], 'how': 'inner', 'lsuffix': 'Treatments.', 'rsuffix': 'Treatment_Types.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Treatments.cost_of_treatment', 'Treatment_Types.treatment_type_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Treatments', 'Treatment_Types'] ['df_join_0'] Join ['Treatments.treatment_type_code'] ['Treatment_Types.treatment_type_code'] inner Treatments. Treatment_Types. ['df_join_0'] ['df_filter_1'] Filter ['Treatments.cost_of_treatment', 'Treatment_Types.treatment_type_description'] null null null select "
  },
  {
    "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "dsl": "[{'input': ['Owners', 'Dogs'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Owners.owner_id'], 'right_on': ['Dogs.owner_id'], 'how': 'inner', 'lsuffix': 'Owners.', 'rsuffix': 'Dogs.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Owners.first_name', 'Owners.last_name', 'Dogs.size_code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Owners', 'Dogs'] ['df_join_0'] Join ['Owners.owner_id'] ['Dogs.owner_id'] inner Owners. Dogs. ['df_join_0'] ['df_filter_1'] Filter ['Owners.first_name', 'Owners.last_name', 'Dogs.size_code'] null null null select "
  },
  {
    "sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "dsl": "[{'input': ['Owners', 'Dogs'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Owners.owner_id'], 'right_on': ['Dogs.owner_id'], 'how': 'inner', 'lsuffix': 'Owners.', 'rsuffix': 'Dogs.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Owners.first_name', 'Owners.last_name', 'Dogs.size_code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Owners', 'Dogs'] ['df_join_0'] Join ['Owners.owner_id'] ['Dogs.owner_id'] inner Owners. Dogs. ['df_join_0'] ['df_filter_1'] Filter ['Owners.first_name', 'Owners.last_name', 'Dogs.size_code'] null null null select "
  },
  {
    "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "dsl": "[{'input': ['Owners', 'Dogs'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Owners.owner_id'], 'right_on': ['Dogs.owner_id'], 'how': 'inner', 'lsuffix': 'Owners.', 'rsuffix': 'Dogs.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Owners.first_name', 'Dogs.name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Owners', 'Dogs'] ['df_join_0'] Join ['Owners.owner_id'] ['Dogs.owner_id'] inner Owners. Dogs. ['df_join_0'] ['df_filter_1'] Filter ['Owners.first_name', 'Dogs.name'] null null null select "
  },
  {
    "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
    "dsl": "[{'input': ['Owners', 'Dogs'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Owners.owner_id'], 'right_on': ['Dogs.owner_id'], 'how': 'inner', 'lsuffix': 'Owners.', 'rsuffix': 'Dogs.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Owners.first_name', 'Dogs.name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Owners', 'Dogs'] ['df_join_0'] Join ['Owners.owner_id'] ['Dogs.owner_id'] inner Owners. Dogs. ['df_join_0'] ['df_filter_1'] Filter ['Owners.first_name', 'Dogs.name'] null null null select "
  },
  {
    "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "dsl": "[{'input': ['Owners', 'Dogs'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Owners.owner_id'], 'right_on': ['Dogs.owner_id'], 'how': 'inner', 'lsuffix': 'Owners.', 'rsuffix': 'Dogs.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Owners.state'], 'index': 'null', 'condition': '==', 'value': 'Virginia'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Owners.first_name', 'Dogs.name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Owners', 'Dogs'] ['df_join_0'] Join ['Owners.owner_id'] ['Dogs.owner_id'] inner Owners. Dogs. ['df_join_0'] ['df_bool_1'] Bool ['Owners.state'] null == Virginia ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Owners.first_name', 'Dogs.name'] null null null select "
  },
  {
    "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "dsl": "[{'input': ['Owners', 'Dogs'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Owners.owner_id'], 'right_on': ['Dogs.owner_id'], 'how': 'inner', 'lsuffix': 'Owners.', 'rsuffix': 'Dogs.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Owners.state'], 'index': 'null', 'condition': '==', 'value': 'Virginia'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Owners.first_name', 'Dogs.name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Owners', 'Dogs'] ['df_join_0'] Join ['Owners.owner_id'] ['Dogs.owner_id'] inner Owners. Dogs. ['df_join_0'] ['df_bool_1'] Bool ['Owners.state'] null == Virginia ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Owners.first_name', 'Dogs.name'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "dsl": "[{'input': ['Dogs', 'Treatments'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Dogs.dog_id'], 'right_on': ['Treatments.dog_id'], 'how': 'inner', 'lsuffix': 'Dogs.', 'rsuffix': 'Treatments.'}}, {'input': ['df_join_0'], 'output': ['df_drop_duplicates_1'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Dogs.date_arrived', 'Dogs.date_departed'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Dogs.date_arrived', 'Dogs.date_departed'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Dogs', 'Treatments'] ['df_join_0'] Join ['Dogs.dog_id'] ['Treatments.dog_id'] inner Dogs. Treatments. ['df_join_0'] ['df_drop_duplicates_1'] DropDuplicates ['Dogs.date_arrived', 'Dogs.date_departed'] null ['df_drop_duplicates_1'] ['df_filter_2'] Filter ['Dogs.date_arrived', 'Dogs.date_departed'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "dsl": "[{'input': ['Dogs', 'Treatments'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Dogs.dog_id'], 'right_on': ['Treatments.dog_id'], 'how': 'inner', 'lsuffix': 'Dogs.', 'rsuffix': 'Treatments.'}}, {'input': ['df_join_0'], 'output': ['df_drop_duplicates_1'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Dogs.date_arrived', 'Dogs.date_departed'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Dogs.date_arrived', 'Dogs.date_departed'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Dogs', 'Treatments'] ['df_join_0'] Join ['Dogs.dog_id'] ['Treatments.dog_id'] inner Dogs. Treatments. ['df_join_0'] ['df_drop_duplicates_1'] DropDuplicates ['Dogs.date_arrived', 'Dogs.date_departed'] null ['df_drop_duplicates_1'] ['df_filter_2'] Filter ['Dogs.date_arrived', 'Dogs.date_departed'] null null null select "
  },
  {
    "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "dsl": "[{'input': ['Professionals'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'Hawaii'}, {'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'Wisconsin'}]}}, {'input': ['Professionals', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['email_address'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Professionals'] ['df_bool_0'] Bool [{'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'Hawaii'}, {'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'Wisconsin'}] ['Professionals', 'df_bool_0'] ['df_filter_1'] Filter ['email_address'] null null null select "
  },
  {
    "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "dsl": "[{'input': ['Professionals'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'Hawaii'}, {'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'Wisconsin'}]}}, {'input': ['Professionals', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['email_address'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Professionals'] ['df_bool_0'] Bool [{'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'Hawaii'}, {'column': ['state'], 'index': 'null', 'condition': '==', 'value': 'Wisconsin'}] ['Professionals', 'df_bool_0'] ['df_filter_1'] Filter ['email_address'] null null null select "
  },
  {
    "sql": "SELECT date_arrived ,  date_departed FROM Dogs",
    "dsl": "[{'input': ['Dogs'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['date_arrived', 'date_departed'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Dogs'] ['df_filter_0'] Filter ['date_arrived', 'date_departed'] null null null select "
  },
  {
    "sql": "SELECT date_arrived ,  date_departed FROM Dogs",
    "dsl": "[{'input': ['Dogs'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['date_arrived', 'date_departed'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Dogs'] ['df_filter_0'] Filter ['date_arrived', 'date_departed'] null null null select "
  },
  {
    "sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "dsl": "[{'input': ['Treatments'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'dog_id': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Treatments'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "dsl": "[{'input': ['Treatments'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'dog_id': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Treatments'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "dsl": "[{'input': ['Treatments'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'professional_id': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Treatments'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "dsl": "[{'input': ['Treatments'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'professional_id': ['nunique']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Treatments'] ['df_statics_column_0'] StaticsColumn ['nunique'] null "
  },
  {
    "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "dsl": "[{'input': ['Professionals'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['city'], 'index': 'null', 'condition': 'contains', 'value': 'West'}}, {'input': ['Professionals', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['role_code', 'street', 'city', 'state'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Professionals'] ['df_bool_0'] Bool ['city'] null contains West ['Professionals', 'df_bool_0'] ['df_filter_1'] Filter ['role_code', 'street', 'city', 'state'] null null null select "
  },
  {
    "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "dsl": "[{'input': ['Professionals'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['city'], 'index': 'null', 'condition': 'contains', 'value': 'West'}}, {'input': ['Professionals', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['role_code', 'street', 'city', 'state'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Professionals'] ['df_bool_0'] Bool ['city'] null contains West ['Professionals', 'df_bool_0'] ['df_filter_1'] Filter ['role_code', 'street', 'city', 'state'] null null null select "
  },
  {
    "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "dsl": "[{'input': ['Owners'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['state'], 'index': 'null', 'condition': 'contains', 'value': 'North'}}, {'input': ['Owners', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'last_name', 'email_address'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Owners'] ['df_bool_0'] Bool ['state'] null contains North ['Owners', 'df_bool_0'] ['df_filter_1'] Filter ['first_name', 'last_name', 'email_address'] null null null select "
  },
  {
    "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "dsl": "[{'input': ['Owners'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['state'], 'index': 'null', 'condition': 'contains', 'value': 'North'}}, {'input': ['Owners', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['first_name', 'last_name', 'email_address'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Owners'] ['df_bool_0'] Bool ['state'] null contains North ['Owners', 'df_bool_0'] ['df_filter_1'] Filter ['first_name', 'last_name', 'email_address'] null null null select "
  },
  {
    "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "dsl": "[{'input': ['Treatments'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['date_of_treatment'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['cost_of_treatment'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Treatments'] ['df_sort_values_0'] SortValues ['date_of_treatment'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['cost_of_treatment'] [1] 0 False select "
  },
  {
    "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "dsl": "[{'input': ['Treatments'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['date_of_treatment'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['cost_of_treatment'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['Treatments'] ['df_sort_values_0'] SortValues ['date_of_treatment'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['cost_of_treatment'] [1] 0 False select "
  },
  {
    "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "dsl": "[{'input': ['Dogs'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['abandoned_yn'], 'index': 'null', 'condition': '==', 'value': 1.0}}, {'input': ['Dogs', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['name', 'age', 'weight'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Dogs'] ['df_bool_0'] Bool ['abandoned_yn'] null == 1.0 ['Dogs', 'df_bool_0'] ['df_filter_1'] Filter ['name', 'age', 'weight'] null null null select "
  },
  {
    "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "dsl": "[{'input': ['Dogs'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['abandoned_yn'], 'index': 'null', 'condition': '==', 'value': 1.0}}, {'input': ['Dogs', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['name', 'age', 'weight'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Dogs'] ['df_bool_0'] Bool ['abandoned_yn'] null == 1.0 ['Dogs', 'df_bool_0'] ['df_filter_1'] Filter ['name', 'age', 'weight'] null null null select "
  },
  {
    "sql": "SELECT avg(age) FROM Dogs",
    "dsl": "[{'input': ['Dogs'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'age': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Dogs'] ['df_statics_column_0'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT avg(age) FROM Dogs",
    "dsl": "[{'input': ['Dogs'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'age': ['mean']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Dogs'] ['df_statics_column_0'] StaticsColumn ['mean'] null "
  },
  {
    "sql": "SELECT max(age) FROM Dogs",
    "dsl": "[{'input': ['Dogs'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'age': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Dogs'] ['df_statics_column_0'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT max(age) FROM Dogs",
    "dsl": "[{'input': ['Dogs'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'age': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Dogs'] ['df_statics_column_0'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT charge_type ,  charge_amount FROM Charges",
    "dsl": "[{'input': ['Charges'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['charge_type', 'charge_amount'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Charges'] ['df_filter_0'] Filter ['charge_type', 'charge_amount'] null null null select "
  },
  {
    "sql": "SELECT charge_type ,  charge_amount FROM Charges",
    "dsl": "[{'input': ['Charges'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['charge_type', 'charge_amount'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Charges'] ['df_filter_0'] Filter ['charge_type', 'charge_amount'] null null null select "
  },
  {
    "sql": "SELECT max(charge_amount) FROM Charges",
    "dsl": "[{'input': ['Charges'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'charge_amount': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Charges'] ['df_statics_column_0'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT max(charge_amount) FROM Charges",
    "dsl": "[{'input': ['Charges'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'charge_amount': ['max']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Charges'] ['df_statics_column_0'] StaticsColumn ['max'] null "
  },
  {
    "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "dsl": "[{'input': ['Professionals'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['email_address', 'cell_number', 'home_phone'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Professionals'] ['df_filter_0'] Filter ['email_address', 'cell_number', 'home_phone'] null null null select "
  },
  {
    "sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "dsl": "[{'input': ['Professionals'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['email_address', 'cell_number', 'home_phone'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Professionals'] ['df_filter_0'] Filter ['email_address', 'cell_number', 'home_phone'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "dsl": "[{'input': ['Dogs'], 'output': ['df_drop_duplicates_0'], 'command': 'DropDuplicates', 'command_args': {'subset': ['breed_code', 'size_code'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['breed_code', 'size_code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Dogs'] ['df_drop_duplicates_0'] DropDuplicates ['breed_code', 'size_code'] null ['df_drop_duplicates_0'] ['df_filter_1'] Filter ['breed_code', 'size_code'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "dsl": "[{'input': ['Dogs'], 'output': ['df_drop_duplicates_0'], 'command': 'DropDuplicates', 'command_args': {'subset': ['breed_code', 'size_code'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['breed_code', 'size_code'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Dogs'] ['df_drop_duplicates_0'] DropDuplicates ['breed_code', 'size_code'] null ['df_drop_duplicates_0'] ['df_filter_1'] Filter ['breed_code', 'size_code'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "dsl": "[{'input': ['Professionals', 'Treatments'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Professionals.professional_id'], 'right_on': ['Treatments.professional_id'], 'how': 'inner', 'lsuffix': 'Professionals.', 'rsuffix': 'Treatments.'}}, {'input': ['df_join_0', 'Treatment_Types'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Treatments.treatment_type_code'], 'right_on': ['Treatment_Types.treatment_type_code'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Treatment_Types.'}}, {'input': ['df_join_1'], 'output': ['df_drop_duplicates_2'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Professionals.first_name', 'Treatment_Types.treatment_type_description'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Professionals.first_name', 'Treatment_Types.treatment_type_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Professionals', 'Treatments'] ['df_join_0'] Join ['Professionals.professional_id'] ['Treatments.professional_id'] inner Professionals. Treatments. ['df_join_0', 'Treatment_Types'] ['df_join_1'] Join ['Treatments.treatment_type_code'] ['Treatment_Types.treatment_type_code'] inner  Treatment_Types. ['df_join_1'] ['df_drop_duplicates_2'] DropDuplicates ['Professionals.first_name', 'Treatment_Types.treatment_type_description'] null ['df_drop_duplicates_2'] ['df_filter_3'] Filter ['Professionals.first_name', 'Treatment_Types.treatment_type_description'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "dsl": "[{'input': ['Professionals', 'Treatments'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Professionals.professional_id'], 'right_on': ['Treatments.professional_id'], 'how': 'inner', 'lsuffix': 'Professionals.', 'rsuffix': 'Treatments.'}}, {'input': ['df_join_0', 'Treatment_Types'], 'output': ['df_join_1'], 'command': 'Join', 'command_args': {'left_on': ['Treatments.treatment_type_code'], 'right_on': ['Treatment_Types.treatment_type_code'], 'how': 'inner', 'lsuffix': '', 'rsuffix': 'Treatment_Types.'}}, {'input': ['df_join_1'], 'output': ['df_drop_duplicates_2'], 'command': 'DropDuplicates', 'command_args': {'subset': ['Professionals.first_name', 'Treatment_Types.treatment_type_description'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['Professionals.first_name', 'Treatment_Types.treatment_type_description'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Professionals', 'Treatments'] ['df_join_0'] Join ['Professionals.professional_id'] ['Treatments.professional_id'] inner Professionals. Treatments. ['df_join_0', 'Treatment_Types'] ['df_join_1'] Join ['Treatments.treatment_type_code'] ['Treatment_Types.treatment_type_code'] inner  Treatment_Types. ['df_join_1'] ['df_drop_duplicates_2'] DropDuplicates ['Professionals.first_name', 'Treatment_Types.treatment_type_description'] null ['df_drop_duplicates_2'] ['df_filter_3'] Filter ['Professionals.first_name', 'Treatment_Types.treatment_type_description'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM singer",
    "dsl": "[{'input': ['singer'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['singer'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT count(*) FROM singer",
    "dsl": "[{'input': ['singer'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['singer'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "dsl": "[{'input': ['singer'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Net_Worth_Millions'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_sort_values_0'] SortValues ['Net_Worth_Millions'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "dsl": "[{'input': ['singer'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Net_Worth_Millions'], 'ascending': True}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_sort_values_0'] SortValues ['Net_Worth_Millions'] True ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Birth_Year ,  Citizenship FROM singer",
    "dsl": "[{'input': ['singer'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Birth_Year', 'Citizenship'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_filter_0'] Filter ['Birth_Year', 'Citizenship'] null null null select "
  },
  {
    "sql": "SELECT Birth_Year ,  Citizenship FROM singer",
    "dsl": "[{'input': ['singer'], 'output': ['df_filter_0'], 'command': 'Filter', 'command_args': {'columns': ['Birth_Year', 'Citizenship'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_filter_0'] Filter ['Birth_Year', 'Citizenship'] null null null select "
  },
  {
    "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "dsl": "[{'input': ['singer'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Citizenship'], 'index': 'null', 'condition': '!=', 'value': 'France'}}, {'input': ['singer', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_bool_0'] Bool ['Citizenship'] null != France ['singer', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "dsl": "[{'input': ['singer'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'column': ['Citizenship'], 'index': 'null', 'condition': '!=', 'value': 'France'}}, {'input': ['singer', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_bool_0'] Bool ['Citizenship'] null != France ['singer', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "dsl": "[{'input': ['singer'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Birth_Year'], 'index': 'null', 'condition': '==', 'value': 1948.0}, {'column': ['Birth_Year'], 'index': 'null', 'condition': '==', 'value': 1949.0}]}}, {'input': ['singer', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_bool_0'] Bool [{'column': ['Birth_Year'], 'index': 'null', 'condition': '==', 'value': 1948.0}, {'column': ['Birth_Year'], 'index': 'null', 'condition': '==', 'value': 1949.0}] ['singer', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "dsl": "[{'input': ['singer'], 'output': ['df_bool_0'], 'command': 'Bool', 'command_args': {'or': [{'column': ['Birth_Year'], 'index': 'null', 'condition': '==', 'value': 1948.0}, {'column': ['Birth_Year'], 'index': 'null', 'condition': '==', 'value': 1949.0}]}}, {'input': ['singer', 'df_bool_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_bool_0'] Bool [{'column': ['Birth_Year'], 'index': 'null', 'condition': '==', 'value': 1948.0}, {'column': ['Birth_Year'], 'index': 'null', 'condition': '==', 'value': 1949.0}] ['singer', 'df_bool_0'] ['df_filter_1'] Filter ['Name'] null null null select "
  },
  {
    "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "dsl": "[{'input': ['singer'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Net_Worth_Millions'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_sort_values_0'] SortValues ['Net_Worth_Millions'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] [1] 0 False select "
  },
  {
    "sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "dsl": "[{'input': ['singer'], 'output': ['df_sort_values_0'], 'command': 'SortValues', 'command_args': {'by': ['Net_Worth_Millions'], 'ascending': False}}, {'input': ['df_sort_values_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Name'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_sort_values_0'] SortValues ['Net_Worth_Millions'] False ['df_sort_values_0'] ['df_filter_1'] Filter ['Name'] [1] 0 False select "
  },
  {
    "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "dsl": "[{'input': ['singer'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Citizenship'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Citizenship', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_groupby_agg_0'] GroupbyAgg ['Citizenship'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Citizenship', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "dsl": "[{'input': ['singer'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Citizenship'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Citizenship', '(all,count)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_groupby_agg_0'] GroupbyAgg ['Citizenship'] ['count'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Citizenship', '(all,count)'] null null null select "
  },
  {
    "sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "dsl": "[{'input': ['singer'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Citizenship'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Citizenship'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_groupby_agg_0'] GroupbyAgg ['Citizenship'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Citizenship'] [1] 0 False select "
  },
  {
    "sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
    "dsl": "[{'input': ['singer'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Citizenship'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_sort_values_1'], 'command': 'SortValues', 'command_args': {'by': ['(all,count)'], 'ascending': False}}, {'input': ['df_sort_values_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Citizenship'], 'index': [1], 'axis': 0, 'slice': False, 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_groupby_agg_0'] GroupbyAgg ['Citizenship'] ['count'] ['df_groupby_agg_0'] ['df_sort_values_1'] SortValues ['(all,count)'] False ['df_sort_values_1'] ['df_filter_2'] Filter ['Citizenship'] [1] 0 False select "
  },
  {
    "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "dsl": "[{'input': ['singer'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Citizenship'], 'agg_args': {'Net_Worth_Millions': ['max']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Citizenship', '(Net_Worth_Millions,max)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_groupby_agg_0'] GroupbyAgg ['Citizenship'] ['max'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Citizenship', '(Net_Worth_Millions,max)'] null null null select "
  },
  {
    "sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "dsl": "[{'input': ['singer'], 'output': ['df_groupby_agg_0'], 'command': 'GroupbyAgg', 'command_args': {'by': ['Citizenship'], 'agg_args': {'Net_Worth_Millions': ['max']}}}, {'input': ['df_groupby_agg_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['Citizenship', '(Net_Worth_Millions,max)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer'] ['df_groupby_agg_0'] GroupbyAgg ['Citizenship'] ['max'] ['df_groupby_agg_0'] ['df_filter_1'] Filter ['Citizenship', '(Net_Worth_Millions,max)'] null null null select "
  },
  {
    "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "dsl": "[{'input': ['singer', 'song'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['singer.Singer_ID'], 'right_on': ['song.Singer_ID'], 'how': 'inner', 'lsuffix': 'singer.', 'rsuffix': 'song.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['song.Title', 'singer.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer', 'song'] ['df_join_0'] Join ['singer.Singer_ID'] ['song.Singer_ID'] inner singer. song. ['df_join_0'] ['df_filter_1'] Filter ['song.Title', 'singer.Name'] null null null select "
  },
  {
    "sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
    "dsl": "[{'input': ['singer', 'song'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['singer.Singer_ID'], 'right_on': ['song.Singer_ID'], 'how': 'inner', 'lsuffix': 'singer.', 'rsuffix': 'song.'}}, {'input': ['df_join_0'], 'output': ['df_filter_1'], 'command': 'Filter', 'command_args': {'columns': ['song.Title', 'singer.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer', 'song'] ['df_join_0'] Join ['singer.Singer_ID'] ['song.Singer_ID'] inner singer. song. ['df_join_0'] ['df_filter_1'] Filter ['song.Title', 'singer.Name'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "dsl": "[{'input': ['singer', 'song'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['singer.Singer_ID'], 'right_on': ['song.Singer_ID'], 'how': 'inner', 'lsuffix': 'singer.', 'rsuffix': 'song.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['song.Sales'], 'index': 'null', 'condition': '>', 'value': 300000.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_drop_duplicates_3'], 'command': 'DropDuplicates', 'command_args': {'subset': ['singer.Name'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['singer.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer', 'song'] ['df_join_0'] Join ['singer.Singer_ID'] ['song.Singer_ID'] inner singer. song. ['df_join_0'] ['df_bool_1'] Bool ['song.Sales'] null > 300000.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_drop_duplicates_3'] DropDuplicates ['singer.Name'] null ['df_drop_duplicates_3'] ['df_filter_4'] Filter ['singer.Name'] null null null select "
  },
  {
    "sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
    "dsl": "[{'input': ['singer', 'song'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['singer.Singer_ID'], 'right_on': ['song.Singer_ID'], 'how': 'inner', 'lsuffix': 'singer.', 'rsuffix': 'song.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['song.Sales'], 'index': 'null', 'condition': '>', 'value': 300000.0}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['all'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}, {'input': ['df_filter_2'], 'output': ['df_drop_duplicates_3'], 'command': 'DropDuplicates', 'command_args': {'subset': ['singer.Name'], 'keep': 'null'}}, {'input': ['df_drop_duplicates_3'], 'output': ['df_filter_4'], 'command': 'Filter', 'command_args': {'columns': ['singer.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer', 'song'] ['df_join_0'] Join ['singer.Singer_ID'] ['song.Singer_ID'] inner singer. song. ['df_join_0'] ['df_bool_1'] Bool ['song.Sales'] null > 300000.0 ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['all'] null null null select ['df_filter_2'] ['df_drop_duplicates_3'] DropDuplicates ['singer.Name'] null ['df_drop_duplicates_3'] ['df_filter_4'] Filter ['singer.Name'] null null null select "
  },
  {
    "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "dsl": "[{'input': ['singer', 'song'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['singer.Singer_ID'], 'right_on': ['song.Singer_ID'], 'how': 'inner', 'lsuffix': 'singer.', 'rsuffix': 'song.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['singer.Name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 1.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['singer.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer', 'song'] ['df_join_0'] Join ['singer.Singer_ID'] ['song.Singer_ID'] inner singer. song. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['singer.Name'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null > 1.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['singer.Name'] null null null select "
  },
  {
    "sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "dsl": "[{'input': ['singer', 'song'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['singer.Singer_ID'], 'right_on': ['song.Singer_ID'], 'how': 'inner', 'lsuffix': 'singer.', 'rsuffix': 'song.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['singer.Name'], 'agg_args': {'all': ['count']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_bool_2'], 'command': 'Bool', 'command_args': {'column': ['(all,count)'], 'index': 'null', 'condition': '>', 'value': 1.0}}, {'input': ['df_groupby_agg_1', 'df_bool_2'], 'output': ['df_filter_3'], 'command': 'Filter', 'command_args': {'columns': ['singer.Name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer', 'song'] ['df_join_0'] Join ['singer.Singer_ID'] ['song.Singer_ID'] inner singer. song. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['singer.Name'] ['count'] ['df_groupby_agg_1'] ['df_bool_2'] Bool ['(all,count)'] null > 1.0 ['df_groupby_agg_1', 'df_bool_2'] ['df_filter_3'] Filter ['singer.Name'] null null null select "
  },
  {
    "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "dsl": "[{'input': ['singer', 'song'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['singer.Singer_ID'], 'right_on': ['song.Singer_ID'], 'how': 'inner', 'lsuffix': 'singer.', 'rsuffix': 'song.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['singer.Name'], 'agg_args': {'song.Sales': ['sum']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['singer.Name', '(song.Sales,sum)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer', 'song'] ['df_join_0'] Join ['singer.Singer_ID'] ['song.Singer_ID'] inner singer. song. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['singer.Name'] ['sum'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['singer.Name', '(song.Sales,sum)'] null null null select "
  },
  {
    "sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "dsl": "[{'input': ['singer', 'song'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['singer.Singer_ID'], 'right_on': ['song.Singer_ID'], 'how': 'inner', 'lsuffix': 'singer.', 'rsuffix': 'song.'}}, {'input': ['df_join_0'], 'output': ['df_groupby_agg_1'], 'command': 'GroupbyAgg', 'command_args': {'by': ['singer.Name'], 'agg_args': {'song.Sales': ['sum']}}}, {'input': ['df_groupby_agg_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['singer.Name', '(song.Sales,sum)'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['singer', 'song'] ['df_join_0'] Join ['singer.Singer_ID'] ['song.Singer_ID'] inner singer. song. ['df_join_0'] ['df_groupby_agg_1'] GroupbyAgg ['singer.Name'] ['sum'] ['df_groupby_agg_1'] ['df_filter_2'] Filter ['singer.Name', '(song.Sales,sum)'] null null null select "
  },
  {
    "sql": "SELECT count(*) FROM Other_Available_Features",
    "dsl": "[{'input': ['Other_Available_Features'], 'output': ['df_statics_column_0'], 'command': 'StaticsColumn', 'command_args': {'aggregate': {'all': ['count']}, 'is_index': 'null'}}]",
    "dsl_guidance": "['Other_Available_Features'] ['df_statics_column_0'] StaticsColumn ['count'] null "
  },
  {
    "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
    "dsl": "[{'input': ['Other_Available_Features', 'Ref_Feature_Types'], 'output': ['df_join_0'], 'command': 'Join', 'command_args': {'left_on': ['Other_Available_Features.feature_type_code'], 'right_on': ['Ref_Feature_Types.feature_type_code'], 'how': 'inner', 'lsuffix': 'Other_Available_Features.', 'rsuffix': 'Ref_Feature_Types.'}}, {'input': ['df_join_0'], 'output': ['df_bool_1'], 'command': 'Bool', 'command_args': {'column': ['Other_Available_Features.feature_name'], 'index': 'null', 'condition': '==', 'value': 'AirCon'}}, {'input': ['df_join_0', 'df_bool_1'], 'output': ['df_filter_2'], 'command': 'Filter', 'command_args': {'columns': ['Ref_Feature_Types.feature_type_name'], 'index': 'null', 'axis': 'null', 'slice': 'null', 'type': 'select'}}]",
    "dsl_guidance": "['Other_Available_Features', 'Ref_Feature_Types'] ['df_join_0'] Join ['Other_Available_Features.feature_type_code'] ['Ref_Feature_Types.feature_type_code'] inner Other_Available_Features. Ref_Feature_Types. ['df_join_0'] ['df_bool_1'] Bool ['Other_Available_Features.feature_name'] null == AirCon ['df_join_0', 'df_bool_1'] ['df_filter_2'] Filter ['Ref_Feature_Types.feature_type_name'] null null null select "
  }
]