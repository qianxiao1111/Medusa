[
    {
        "id": "spider_1",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM singer"
    },
    {
        "id": "spider_2",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM singer"
    },
    {
        "id": "spider_3",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Country",
                        "Age"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "id": "spider_4",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Country",
                        "Age"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "id": "spider_5",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Country"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "France"
                }
            },
            {
                "input": [
                    "singer",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Age": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "id": "spider_6",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Country"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "France"
                }
            },
            {
                "input": [
                    "singer",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Age": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "id": "spider_7",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Song_Name",
                        "Song_release_year"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "id": "spider_8",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Song_Name",
                        "Song_release_year"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "id": "spider_9",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Age"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 20.0
                }
            },
            {
                "input": [
                    "singer",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_drop_duplicates_2"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Country"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "id": "spider_10",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Age"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 20.0
                }
            },
            {
                "input": [
                    "singer",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_drop_duplicates_2"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Country"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "id": "spider_11",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Country"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Country",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "id": "spider_12",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Country"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Country",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "id": "spider_13",
        "conversations": [
            {
                "input": [
                    "stadium"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Capacity"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 5000.0
                        },
                        {
                            "column": [
                                "Capacity"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 10000.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "stadium",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Location",
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "id": "spider_14",
        "conversations": [
            {
                "input": [
                    "stadium"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Capacity"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 5000.0
                        },
                        {
                            "column": [
                                "Capacity"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 10000.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "stadium",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Location",
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "id": "spider_15",
        "conversations": [
            {
                "input": [
                    "stadium"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Capacity": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "select avg(capacity) ,  max(capacity) from stadium"
    },
    {
        "id": "spider_16",
        "conversations": [
            {
                "input": [
                    "stadium"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Average"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Capacity"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "id": "spider_17",
        "conversations": [
            {
                "input": [
                    "stadium"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Average"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Capacity"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "id": "spider_18",
        "conversations": [
            {
                "input": [
                    "concert"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 2014.0
                        },
                        {
                            "column": [
                                "Year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 2015.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "concert",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "id": "spider_19",
        "conversations": [
            {
                "input": [
                    "concert"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 2014.0
                        },
                        {
                            "column": [
                                "Year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 2015.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "concert",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "id": "spider_20",
        "conversations": [
            {
                "input": [
                    "concert"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Year"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Year"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_21",
        "conversations": [
            {
                "input": [
                    "concert"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Year"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Year"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_22",
        "conversations": [
            {
                "input": [
                    "singer_in_concert",
                    "singer"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer_in_concert.Singer_ID"
                    ],
                    "right_on": [
                        "singer.Singer_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "singer_in_concert.",
                    "rsuffix": "singer."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "concert"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer_in_concert.concert_ID"
                    ],
                    "right_on": [
                        "concert.concert_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "concert."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "concert.Year"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 2014.0
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "singer.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "id": "spider_23",
        "conversations": [
            {
                "input": [
                    "singer_in_concert",
                    "singer"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer_in_concert.Singer_ID"
                    ],
                    "right_on": [
                        "singer.Singer_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "singer_in_concert.",
                    "rsuffix": "singer."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "concert"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer_in_concert.concert_ID"
                    ],
                    "right_on": [
                        "concert.concert_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "concert."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "concert.Year"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 2014.0
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "singer.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "id": "spider_24",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Song_Name"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "Hey"
                }
            },
            {
                "input": [
                    "singer",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "id": "spider_25",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Song_Name"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "Hey"
                }
            },
            {
                "input": [
                    "singer",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "id": "spider_26",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "weight"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 10.0
                }
            },
            {
                "input": [
                    "Pets",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "id": "spider_27",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "weight"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 10.0
                }
            },
            {
                "input": [
                    "Pets",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "id": "spider_28",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "pet_age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "weight"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "id": "spider_29",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "pet_age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "weight"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "id": "spider_30",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "PetType"
                    ],
                    "agg_args": {
                        "weight": [
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(weight,max)",
                        "PetType"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "id": "spider_31",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "PetType"
                    ],
                    "agg_args": {
                        "weight": [
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(weight,max)",
                        "PetType"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "id": "spider_32",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Student.Age"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 20.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "id": "spider_33",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Student.Age"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 20.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "id": "spider_34",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Pets"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Has_Pet.PetID"
                    ],
                    "right_on": [
                        "Pets.PetID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Pets."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Student.Sex"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "F"
                        },
                        {
                            "column": [
                                "Pets.PetType"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "dog"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_statics_column_4"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "id": "spider_35",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Pets"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Has_Pet.PetID"
                    ],
                    "right_on": [
                        "Pets.PetID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Pets."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Student.Sex"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "F"
                        },
                        {
                            "column": [
                                "Pets.PetType"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "dog"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_statics_column_4"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "id": "spider_36",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "PetType": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "id": "spider_37",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "PetType": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "id": "spider_38",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Pets"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Pets.PetID"
                    ],
                    "right_on": [
                        "Has_Pet.PetID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Pets."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Pets.PetType"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "cat"
                        },
                        {
                            "column": [
                                "Pets.PetType"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "dog"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_drop_duplicates_4"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Student.Fname"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Student.Fname"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "id": "spider_39",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Pets"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Pets.PetID"
                    ],
                    "right_on": [
                        "Has_Pet.PetID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Pets."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Pets.PetType"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "cat"
                        },
                        {
                            "column": [
                                "Pets.PetType"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "dog"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_drop_duplicates_4"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Student.Fname"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Student.Fname"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "id": "spider_40",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "pet_age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "PetType",
                        "weight"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "id": "spider_41",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "pet_age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "PetType",
                        "weight"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "id": "spider_42",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "pet_age"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "Pets",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "PetID",
                        "weight"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "id": "spider_43",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "pet_age"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "Pets",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "PetID",
                        "weight"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "id": "spider_44",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "PetType"
                    ],
                    "agg_args": {
                        "pet_age": [
                            "mean",
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(pet_age,mean)",
                        "(pet_age,max)",
                        "PetType"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "id": "spider_45",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "PetType"
                    ],
                    "agg_args": {
                        "pet_age": [
                            "mean",
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(pet_age,mean)",
                        "(pet_age,max)",
                        "PetType"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "id": "spider_46",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "PetType"
                    ],
                    "agg_args": {
                        "weight": [
                            "mean"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(weight,mean)",
                        "PetType"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "id": "spider_47",
        "conversations": [
            {
                "input": [
                    "Pets"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "PetType"
                    ],
                    "agg_args": {
                        "weight": [
                            "mean"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(weight,mean)",
                        "PetType"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "id": "spider_48",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_drop_duplicates_1"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Student.Fname",
                        "Student.Age"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Student.Fname",
                        "Student.Age"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "id": "spider_49",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_drop_duplicates_1"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Student.Fname",
                        "Student.Age"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Student.Fname",
                        "Student.Age"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "id": "spider_50",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Student.LName"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Smith"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Has_Pet.PetID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "id": "spider_51",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Student.LName"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Smith"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Has_Pet.PetID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "id": "spider_52",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Student.StuID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "Student.StuID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
    },
    {
        "id": "spider_53",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Student.StuID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "Student.StuID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"
    },
    {
        "id": "spider_54",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Pets"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Pets.PetID"
                    ],
                    "right_on": [
                        "Has_Pet.PetID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Pets."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Pets.pet_age"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 3.0
                        },
                        {
                            "column": [
                                "Pets.PetType"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "cat"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Student.LName"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "id": "spider_55",
        "conversations": [
            {
                "input": [
                    "Student",
                    "Has_Pet"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student.StuID"
                    ],
                    "right_on": [
                        "Has_Pet.StuID"
                    ],
                    "how": "inner",
                    "lsuffix": "Student.",
                    "rsuffix": "Has_Pet."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Pets"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Pets.PetID"
                    ],
                    "right_on": [
                        "Has_Pet.PetID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Pets."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Pets.pet_age"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 3.0
                        },
                        {
                            "column": [
                                "Pets.PetType"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "cat"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Student.LName"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "id": "spider_56",
        "conversations": [
            {
                "input": [
                    "continents"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "id": "spider_57",
        "conversations": [
            {
                "input": [
                    "continents"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "id": "spider_58",
        "conversations": [
            {
                "input": [
                    "countries"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "id": "spider_59",
        "conversations": [
            {
                "input": [
                    "countries"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "id": "spider_60",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "cars_data"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "cars_data.Horsepower"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "car_names.Model"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "id": "spider_61",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "cars_data"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "cars_data.Horsepower"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "car_names.Model"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "id": "spider_62",
        "conversations": [
            {
                "input": [
                    "car_makers",
                    "model_list"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_makers.Id"
                    ],
                    "right_on": [
                        "model_list.Maker"
                    ],
                    "how": "inner",
                    "lsuffix": "car_makers.",
                    "rsuffix": "model_list."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "car_names"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Model"
                    ],
                    "right_on": [
                        "car_names.Model"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "car_names."
                }
            },
            {
                "input": [
                    "df_join_1",
                    "cars_data"
                ],
                "output": [
                    "df_join_2"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_2"
                ],
                "output": [
                    "df_bool_3"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "cars_data.Year"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "1970"
                }
            },
            {
                "input": [
                    "df_join_2",
                    "df_bool_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_4"
                ],
                "output": [
                    "df_drop_duplicates_5"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "car_makers.Maker"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_5"
                ],
                "output": [
                    "df_filter_6"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "car_makers.Maker"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "id": "spider_63",
        "conversations": [
            {
                "input": [
                    "car_makers",
                    "model_list"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_makers.Id"
                    ],
                    "right_on": [
                        "model_list.Maker"
                    ],
                    "how": "inner",
                    "lsuffix": "car_makers.",
                    "rsuffix": "model_list."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "car_names"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Model"
                    ],
                    "right_on": [
                        "car_names.Model"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "car_names."
                }
            },
            {
                "input": [
                    "df_join_1",
                    "cars_data"
                ],
                "output": [
                    "df_join_2"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_2"
                ],
                "output": [
                    "df_bool_3"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "cars_data.Year"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "1970"
                }
            },
            {
                "input": [
                    "df_join_2",
                    "df_bool_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_4"
                ],
                "output": [
                    "df_drop_duplicates_5"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "car_makers.Maker"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_5"
                ],
                "output": [
                    "df_filter_6"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "car_makers.Maker"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "id": "spider_64",
        "conversations": [
            {
                "input": [
                    "model_list",
                    "car_names"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Model"
                    ],
                    "right_on": [
                        "car_names.Model"
                    ],
                    "how": "inner",
                    "lsuffix": "model_list.",
                    "rsuffix": "car_names."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "cars_data"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "cars_data.Year"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1980.0
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_drop_duplicates_4"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "model_list.Model"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "model_list.Model"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "id": "spider_65",
        "conversations": [
            {
                "input": [
                    "model_list",
                    "car_names"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Model"
                    ],
                    "right_on": [
                        "car_names.Model"
                    ],
                    "how": "inner",
                    "lsuffix": "model_list.",
                    "rsuffix": "car_names."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "cars_data"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "cars_data.Year"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1980.0
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_drop_duplicates_4"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "model_list.Model"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "model_list.Model"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "id": "spider_66",
        "conversations": [
            {
                "input": [
                    "continents",
                    "countries"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "continents.ContId"
                    ],
                    "right_on": [
                        "countries.Continent"
                    ],
                    "how": "inner",
                    "lsuffix": "continents.",
                    "rsuffix": "countries."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "car_makers"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "countries.CountryId"
                    ],
                    "right_on": [
                        "car_makers.Country"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_groupby_agg_2"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "continents.Continent"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "continents.Continent",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "id": "spider_67",
        "conversations": [
            {
                "input": [
                    "continents",
                    "countries"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "continents.ContId"
                    ],
                    "right_on": [
                        "countries.Continent"
                    ],
                    "how": "inner",
                    "lsuffix": "continents.",
                    "rsuffix": "countries."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "car_makers"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "countries.CountryId"
                    ],
                    "right_on": [
                        "car_makers.Country"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_groupby_agg_2"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "continents.Continent"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "continents.Continent",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "id": "spider_68",
        "conversations": [
            {
                "input": [
                    "cars_data",
                    "car_names"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "cars_data.Id"
                    ],
                    "right_on": [
                        "car_names.MakeId"
                    ],
                    "how": "inner",
                    "lsuffix": "cars_data.",
                    "rsuffix": "car_names."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "car_names.Make"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "amc hornet sportabout (sw)"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "cars_data.Accelerate"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "id": "spider_69",
        "conversations": [
            {
                "input": [
                    "cars_data",
                    "car_names"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "cars_data.Id"
                    ],
                    "right_on": [
                        "car_names.MakeId"
                    ],
                    "how": "inner",
                    "lsuffix": "cars_data.",
                    "rsuffix": "car_names."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "car_names.Make"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "amc hornet sportabout (sw)"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "cars_data.Accelerate"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "id": "spider_70",
        "conversations": [
            {
                "input": [
                    "car_makers",
                    "countries"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_makers.Country"
                    ],
                    "right_on": [
                        "countries.CountryId"
                    ],
                    "how": "inner",
                    "lsuffix": "car_makers.",
                    "rsuffix": "countries."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "countries.CountryName"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "france"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "id": "spider_71",
        "conversations": [
            {
                "input": [
                    "car_makers",
                    "countries"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_makers.Country"
                    ],
                    "right_on": [
                        "countries.CountryId"
                    ],
                    "how": "inner",
                    "lsuffix": "car_makers.",
                    "rsuffix": "countries."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "countries.CountryName"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "france"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "id": "spider_72",
        "conversations": [
            {
                "input": [
                    "model_list",
                    "car_makers"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Maker"
                    ],
                    "right_on": [
                        "car_makers.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "model_list.",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "countries"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_makers.Country"
                    ],
                    "right_on": [
                        "countries.CountryId"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "countries."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "countries.CountryName"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "usa"
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_statics_column_4"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "id": "spider_73",
        "conversations": [
            {
                "input": [
                    "model_list",
                    "car_makers"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Maker"
                    ],
                    "right_on": [
                        "car_makers.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "model_list.",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "countries"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_makers.Country"
                    ],
                    "right_on": [
                        "countries.CountryId"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "countries."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "countries.CountryName"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "usa"
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_statics_column_4"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "id": "spider_74",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Cylinders"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 4.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "MPG": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "id": "spider_75",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Cylinders"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 4.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "MPG": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "id": "spider_76",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Cylinders"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 8.0
                        },
                        {
                            "column": [
                                "Year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 1974.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Weight": [
                            "min"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
    },
    {
        "id": "spider_77",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Cylinders"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 8.0
                        },
                        {
                            "column": [
                                "Year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 1974.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Weight": [
                            "min"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
    },
    {
        "id": "spider_78",
        "conversations": [
            {
                "input": [
                    "model_list"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Maker",
                        "Model"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;"
    },
    {
        "id": "spider_79",
        "conversations": [
            {
                "input": [
                    "model_list"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Maker",
                        "Model"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;"
    },
    {
        "id": "spider_80",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Horsepower"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 150.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
    },
    {
        "id": "spider_81",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Horsepower"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 150.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
    },
    {
        "id": "spider_82",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Year"
                    ],
                    "agg_args": {
                        "Weight": [
                            "mean"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(Weight,mean)",
                        "Year"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
    },
    {
        "id": "spider_83",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Year"
                    ],
                    "agg_args": {
                        "Weight": [
                            "mean"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(Weight,mean)",
                        "Year"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
    },
    {
        "id": "spider_84",
        "conversations": [
            {
                "input": [
                    "countries",
                    "continents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "countries.Continent"
                    ],
                    "right_on": [
                        "continents.ContId"
                    ],
                    "how": "inner",
                    "lsuffix": "countries.",
                    "rsuffix": "continents."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "car_makers"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "countries.CountryId"
                    ],
                    "right_on": [
                        "car_makers.Country"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "continents.Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "europe"
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_groupby_agg_4"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "countries.CountryName"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_4"
                ],
                "output": [
                    "df_bool_5"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 3.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_4",
                    "df_bool_5"
                ],
                "output": [
                    "df_filter_6"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "countries.CountryName"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    {
        "id": "spider_85",
        "conversations": [
            {
                "input": [
                    "countries",
                    "continents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "countries.Continent"
                    ],
                    "right_on": [
                        "continents.ContId"
                    ],
                    "how": "inner",
                    "lsuffix": "countries.",
                    "rsuffix": "continents."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "car_makers"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "countries.CountryId"
                    ],
                    "right_on": [
                        "car_makers.Country"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "continents.Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "europe"
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_groupby_agg_4"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "countries.CountryName"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_4"
                ],
                "output": [
                    "df_bool_5"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 3.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_4",
                    "df_bool_5"
                ],
                "output": [
                    "df_filter_6"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "countries.CountryName"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    {
        "id": "spider_86",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "cars_data"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "cars_data.Cylinders"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 3.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_sort_values_3"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "cars_data.Horsepower"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "cars_data.Horsepower",
                        "car_names.Make"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "id": "spider_87",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "cars_data"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "cars_data.Cylinders"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 3.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_sort_values_3"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "cars_data.Horsepower"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "cars_data.Horsepower",
                        "car_names.Make"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "id": "spider_88",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "cars_data"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "cars_data.MPG"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "car_names.Model"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"
    },
    {
        "id": "spider_89",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "cars_data"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "cars_data.MPG"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "car_names.Model"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"
    },
    {
        "id": "spider_90",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Year"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 1980.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Horsepower": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"
    },
    {
        "id": "spider_91",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Year"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 1980.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Horsepower": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "select avg(horsepower) from cars_data where year  <  1980;"
    },
    {
        "id": "spider_92",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "cars_data"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "car_names.Model"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "volvo"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "cars_data.Edispl": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
    },
    {
        "id": "spider_93",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "cars_data"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "car_names.Model"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "volvo"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "cars_data.Edispl": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
    },
    {
        "id": "spider_94",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Cylinders"
                    ],
                    "agg_args": {
                        "Accelerate": [
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(Accelerate,max)",
                        "Cylinders"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
    },
    {
        "id": "spider_95",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Cylinders"
                    ],
                    "agg_args": {
                        "Accelerate": [
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(Accelerate,max)",
                        "Cylinders"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
    },
    {
        "id": "spider_96",
        "conversations": [
            {
                "input": [
                    "car_names"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Model"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Model"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "id": "spider_97",
        "conversations": [
            {
                "input": [
                    "car_names"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Model"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Model"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "id": "spider_98",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Cylinders"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 4.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
    },
    {
        "id": "spider_99",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Cylinders"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 4.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
    },
    {
        "id": "spider_100",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Year"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 1980.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
    },
    {
        "id": "spider_101",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Year"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 1980.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
    },
    {
        "id": "spider_102",
        "conversations": [
            {
                "input": [
                    "car_makers",
                    "model_list"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_makers.Id"
                    ],
                    "right_on": [
                        "model_list.Maker"
                    ],
                    "how": "inner",
                    "lsuffix": "car_makers.",
                    "rsuffix": "model_list."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "car_makers.FullName"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "American Motor Company"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    {
        "id": "spider_103",
        "conversations": [
            {
                "input": [
                    "car_makers",
                    "model_list"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_makers.Id"
                    ],
                    "right_on": [
                        "model_list.Maker"
                    ],
                    "how": "inner",
                    "lsuffix": "car_makers.",
                    "rsuffix": "model_list."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "car_makers.FullName"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "American Motor Company"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    {
        "id": "spider_104",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "model_list"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.Model"
                    ],
                    "right_on": [
                        "model_list.Model"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "model_list."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "car_makers"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Maker"
                    ],
                    "right_on": [
                        "car_makers.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_1",
                    "cars_data"
                ],
                "output": [
                    "df_join_2"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_2"
                ],
                "output": [
                    "df_bool_3"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "car_makers.FullName"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "General Motors"
                        },
                        {
                            "column": [
                                "cars_data.Weight"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 3500.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_2",
                    "df_bool_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_4"
                ],
                "output": [
                    "df_drop_duplicates_5"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "model_list.Model"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_5"
                ],
                "output": [
                    "df_filter_6"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "model_list.Model"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    {
        "id": "spider_105",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "model_list"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.Model"
                    ],
                    "right_on": [
                        "model_list.Model"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "model_list."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "car_makers"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Maker"
                    ],
                    "right_on": [
                        "car_makers.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_1",
                    "cars_data"
                ],
                "output": [
                    "df_join_2"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_2"
                ],
                "output": [
                    "df_bool_3"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "car_makers.FullName"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "General Motors"
                        },
                        {
                            "column": [
                                "cars_data.Weight"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 3500.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_2",
                    "df_bool_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_4"
                ],
                "output": [
                    "df_drop_duplicates_5"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "model_list.Model"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_5"
                ],
                "output": [
                    "df_filter_6"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "model_list.Model"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    {
        "id": "spider_106",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Weight"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 3000.0
                        },
                        {
                            "column": [
                                "Weight"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 4000.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_drop_duplicates_2"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Year"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Year"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select distinct year from cars_data where weight between 3000 and 4000;"
    },
    {
        "id": "spider_107",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Weight"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 3000.0
                        },
                        {
                            "column": [
                                "Weight"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 4000.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_drop_duplicates_2"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Year"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Year"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select distinct year from cars_data where weight between 3000 and 4000;"
    },
    {
        "id": "spider_108",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Accelerate"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Horsepower"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    {
        "id": "spider_109",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Accelerate"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Horsepower"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    {
        "id": "spider_110",
        "conversations": [
            {
                "input": [
                    "cars_data",
                    "car_names"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "cars_data.Id"
                    ],
                    "right_on": [
                        "car_names.MakeId"
                    ],
                    "how": "inner",
                    "lsuffix": "cars_data.",
                    "rsuffix": "car_names."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "car_names.Model"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "volvo"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_sort_values_3"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "cars_data.Accelerate"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "cars_data.Cylinders"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "id": "spider_111",
        "conversations": [
            {
                "input": [
                    "cars_data",
                    "car_names"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "cars_data.Id"
                    ],
                    "right_on": [
                        "car_names.MakeId"
                    ],
                    "how": "inner",
                    "lsuffix": "cars_data.",
                    "rsuffix": "car_names."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "car_names.Model"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "volvo"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_sort_values_3"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "cars_data.Accelerate"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "cars_data.Cylinders"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "id": "spider_112",
        "conversations": [
            {
                "input": [
                    "countries",
                    "car_makers"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "countries.CountryId"
                    ],
                    "right_on": [
                        "car_makers.Country"
                    ],
                    "how": "inner",
                    "lsuffix": "countries.",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "countries.CountryId"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
    },
    {
        "id": "spider_113",
        "conversations": [
            {
                "input": [
                    "countries",
                    "car_makers"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "countries.CountryId"
                    ],
                    "right_on": [
                        "car_makers.Country"
                    ],
                    "how": "inner",
                    "lsuffix": "countries.",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "countries.CountryId"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
    },
    {
        "id": "spider_114",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Cylinders"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 6.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
    },
    {
        "id": "spider_115",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Cylinders"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 6.0
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
    },
    {
        "id": "spider_116",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "cars_data"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "cars_data.Cylinders"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 4.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_sort_values_3"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "cars_data.Horsepower"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "car_names.Model"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "id": "spider_117",
        "conversations": [
            {
                "input": [
                    "car_names",
                    "cars_data"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "car_names.",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "cars_data.Cylinders"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 4.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_sort_values_3"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "cars_data.Horsepower"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "car_names.Model"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "id": "spider_118",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Cylinders"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 8.0
                        },
                        {
                            "column": [
                                "Year"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 1980.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "MPG": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
    },
    {
        "id": "spider_119",
        "conversations": [
            {
                "input": [
                    "cars_data"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Cylinders"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 8.0
                        },
                        {
                            "column": [
                                "Year"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 1980.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "cars_data",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "MPG": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
    },
    {
        "id": "spider_120",
        "conversations": [
            {
                "input": [
                    "model_list",
                    "car_names"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Model"
                    ],
                    "right_on": [
                        "car_names.Model"
                    ],
                    "how": "inner",
                    "lsuffix": "model_list.",
                    "rsuffix": "car_names."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "cars_data"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_1",
                    "car_makers"
                ],
                "output": [
                    "df_join_2"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Maker"
                    ],
                    "right_on": [
                        "car_makers.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_2"
                ],
                "output": [
                    "df_bool_3"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "cars_data.Weight"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 3500.0
                        },
                        {
                            "column": [
                                "car_makers.FullName"
                            ],
                            "index": "null",
                            "condition": "!=",
                            "value": "Ford Motor Company"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_2",
                    "df_bool_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_4"
                ],
                "output": [
                    "df_drop_duplicates_5"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "model_list.Model"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_5"
                ],
                "output": [
                    "df_filter_6"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "model_list.Model"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    {
        "id": "spider_121",
        "conversations": [
            {
                "input": [
                    "model_list",
                    "car_names"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Model"
                    ],
                    "right_on": [
                        "car_names.Model"
                    ],
                    "how": "inner",
                    "lsuffix": "model_list.",
                    "rsuffix": "car_names."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "cars_data"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "car_names.MakeId"
                    ],
                    "right_on": [
                        "cars_data.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "cars_data."
                }
            },
            {
                "input": [
                    "df_join_1",
                    "car_makers"
                ],
                "output": [
                    "df_join_2"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "model_list.Maker"
                    ],
                    "right_on": [
                        "car_makers.Id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "car_makers."
                }
            },
            {
                "input": [
                    "df_join_2"
                ],
                "output": [
                    "df_bool_3"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "cars_data.Weight"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 3500.0
                        },
                        {
                            "column": [
                                "car_makers.FullName"
                            ],
                            "index": "null",
                            "condition": "!=",
                            "value": "Ford Motor Company"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_2",
                    "df_bool_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_4"
                ],
                "output": [
                    "df_drop_duplicates_5"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "model_list.Model"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_5"
                ],
                "output": [
                    "df_filter_6"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "model_list.Model"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    {
        "id": "spider_122",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Airline"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "JetBlue Airways"
                }
            },
            {
                "input": [
                    "airlines",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "id": "spider_123",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Airline"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "JetBlue Airways"
                }
            },
            {
                "input": [
                    "airlines",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "id": "spider_124",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Airline"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "JetBlue Airways"
                }
            },
            {
                "input": [
                    "airlines",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Abbreviation"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "id": "spider_125",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Airline"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "JetBlue Airways"
                }
            },
            {
                "input": [
                    "airlines",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Abbreviation"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "id": "spider_126",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Country"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "USA"
                }
            },
            {
                "input": [
                    "airlines",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Airline",
                        "Abbreviation"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "id": "spider_127",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Country"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "USA"
                }
            },
            {
                "input": [
                    "airlines",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Airline",
                        "Abbreviation"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "id": "spider_128",
        "conversations": [
            {
                "input": [
                    "airports"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Anthony"
                }
            },
            {
                "input": [
                    "airports",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "AirportCode",
                        "AirportName"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
    },
    {
        "id": "spider_129",
        "conversations": [
            {
                "input": [
                    "airports"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Anthony"
                }
            },
            {
                "input": [
                    "airports",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "AirportCode",
                        "AirportName"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
    },
    {
        "id": "spider_130",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM AIRLINES"
    },
    {
        "id": "spider_131",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM AIRLINES"
    },
    {
        "id": "spider_132",
        "conversations": [
            {
                "input": [
                    "airports"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM AIRPORTS"
    },
    {
        "id": "spider_133",
        "conversations": [
            {
                "input": [
                    "airports"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM AIRPORTS"
    },
    {
        "id": "spider_134",
        "conversations": [
            {
                "input": [
                    "flights"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS"
    },
    {
        "id": "spider_135",
        "conversations": [
            {
                "input": [
                    "flights"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS"
    },
    {
        "id": "spider_136",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Abbreviation"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "UAL"
                }
            },
            {
                "input": [
                    "airlines",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Airline"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
    },
    {
        "id": "spider_137",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Abbreviation"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "UAL"
                }
            },
            {
                "input": [
                    "airlines",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Airline"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
    },
    {
        "id": "spider_138",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Country"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "USA"
                }
            },
            {
                "input": [
                    "airlines",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "id": "spider_139",
        "conversations": [
            {
                "input": [
                    "airlines"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Country"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "USA"
                }
            },
            {
                "input": [
                    "airlines",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "id": "spider_140",
        "conversations": [
            {
                "input": [
                    "airports"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "AirportName"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Alton"
                }
            },
            {
                "input": [
                    "airports",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "City",
                        "Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
    },
    {
        "id": "spider_141",
        "conversations": [
            {
                "input": [
                    "airports"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "AirportName"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Alton"
                }
            },
            {
                "input": [
                    "airports",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "City",
                        "Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
    },
    {
        "id": "spider_142",
        "conversations": [
            {
                "input": [
                    "airports"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "AirportCode"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "AKO"
                }
            },
            {
                "input": [
                    "airports",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "AirportName"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
    },
    {
        "id": "spider_143",
        "conversations": [
            {
                "input": [
                    "airports"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "AirportCode"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "AKO"
                }
            },
            {
                "input": [
                    "airports",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "AirportName"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
    },
    {
        "id": "spider_144",
        "conversations": [
            {
                "input": [
                    "airports"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aberdeen"
                }
            },
            {
                "input": [
                    "airports",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "AirportName"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "id": "spider_145",
        "conversations": [
            {
                "input": [
                    "airports"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aberdeen"
                }
            },
            {
                "input": [
                    "airports",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "AirportName"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "id": "spider_146",
        "conversations": [
            {
                "input": [
                    "flights"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "SourceAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "APG"
                }
            },
            {
                "input": [
                    "flights",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "id": "spider_147",
        "conversations": [
            {
                "input": [
                    "flights"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "SourceAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "APG"
                }
            },
            {
                "input": [
                    "flights",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "id": "spider_148",
        "conversations": [
            {
                "input": [
                    "flights"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "DestAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "ATO"
                }
            },
            {
                "input": [
                    "flights",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
    },
    {
        "id": "spider_149",
        "conversations": [
            {
                "input": [
                    "flights"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "DestAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "ATO"
                }
            },
            {
                "input": [
                    "flights",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
    },
    {
        "id": "spider_150",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.SourceAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airports.City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aberdeen"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "id": "spider_151",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.SourceAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airports.City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aberdeen"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "id": "spider_152",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.DestAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airports.City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aberdeen"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "id": "spider_153",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.DestAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airports.City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aberdeen"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "id": "spider_154",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.DestAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "airports"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.SourceAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "airports.City"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Ashley"
                        },
                        {
                            "column": [
                                "airports.City"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Aberdeen"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_statics_column_4"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    {
        "id": "spider_155",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.DestAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "airports"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.SourceAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "airports.City"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Ashley"
                        },
                        {
                            "column": [
                                "airports.City"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Aberdeen"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_statics_column_4"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    {
        "id": "spider_156",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airlines"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.Airline"
                    ],
                    "right_on": [
                        "airlines.uid"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airlines."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "JetBlue Airways"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "id": "spider_157",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airlines"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.Airline"
                    ],
                    "right_on": [
                        "airlines.uid"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airlines."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "JetBlue Airways"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "id": "spider_158",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.Airline"
                    ],
                    "right_on": [
                        "airlines.uid"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "airlines.Airline"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "United Airlines"
                        },
                        {
                            "column": [
                                "flights.DestAirport"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "ASY"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    {
        "id": "spider_159",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.Airline"
                    ],
                    "right_on": [
                        "airlines.uid"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "airlines.Airline"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "United Airlines"
                        },
                        {
                            "column": [
                                "flights.DestAirport"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "ASY"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    {
        "id": "spider_160",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.Airline"
                    ],
                    "right_on": [
                        "airlines.uid"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "airlines.Airline"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "United Airlines"
                        },
                        {
                            "column": [
                                "flights.SourceAirport"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "AHD"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    {
        "id": "spider_161",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.Airline"
                    ],
                    "right_on": [
                        "airlines.uid"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "airlines.Airline"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "United Airlines"
                        },
                        {
                            "column": [
                                "flights.SourceAirport"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "AHD"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    {
        "id": "spider_162",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.DestAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "airlines"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "airlines."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "airports.City"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Aberdeen"
                        },
                        {
                            "column": [
                                "airlines.Airline"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "United Airlines"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_statics_column_4"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "id": "spider_163",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.DestAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "airlines"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "airlines."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "airports.City"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Aberdeen"
                        },
                        {
                            "column": [
                                "airlines.Airline"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "United Airlines"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_statics_column_4"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "id": "spider_164",
        "conversations": [
            {
                "input": [
                    "airports",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airports.AirportCode"
                    ],
                    "right_on": [
                        "flights.DestAirport"
                    ],
                    "how": "inner",
                    "lsuffix": "airports.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airports.City"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airports.City"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_165",
        "conversations": [
            {
                "input": [
                    "airports",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airports.AirportCode"
                    ],
                    "right_on": [
                        "flights.DestAirport"
                    ],
                    "how": "inner",
                    "lsuffix": "airports.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airports.City"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airports.City"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_166",
        "conversations": [
            {
                "input": [
                    "airports",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airports.AirportCode"
                    ],
                    "right_on": [
                        "flights.SourceAirport"
                    ],
                    "how": "inner",
                    "lsuffix": "airports.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airports.City"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airports.City"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_167",
        "conversations": [
            {
                "input": [
                    "airports",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airports.AirportCode"
                    ],
                    "right_on": [
                        "flights.SourceAirport"
                    ],
                    "how": "inner",
                    "lsuffix": "airports.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airports.City"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airports.City"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_168",
        "conversations": [
            {
                "input": [
                    "airports",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airports.AirportCode"
                    ],
                    "right_on": [
                        "flights.DestAirport"
                    ],
                    "how": "inner",
                    "lsuffix": "airports.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airports.AirportCode"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airports.AirportCode"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_169",
        "conversations": [
            {
                "input": [
                    "airports",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airports.AirportCode"
                    ],
                    "right_on": [
                        "flights.DestAirport"
                    ],
                    "how": "inner",
                    "lsuffix": "airports.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airports.AirportCode"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airports.AirportCode"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_170",
        "conversations": [
            {
                "input": [
                    "airports",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airports.AirportCode"
                    ],
                    "right_on": [
                        "flights.DestAirport"
                    ],
                    "how": "inner",
                    "lsuffix": "airports.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airports.AirportCode"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airports.AirportCode"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "id": "spider_171",
        "conversations": [
            {
                "input": [
                    "airports",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airports.AirportCode"
                    ],
                    "right_on": [
                        "flights.DestAirport"
                    ],
                    "how": "inner",
                    "lsuffix": "airports.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airports.AirportCode"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airports.AirportCode"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "id": "spider_172",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airlines.Airline"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airlines.Airline"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_173",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airlines.Airline"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airlines.Airline"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_174",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "flights.SourceAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "AHD"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    {
        "id": "spider_175",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "flights.SourceAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "AHD"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    {
        "id": "spider_176",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "flights.DestAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "AHD"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    {
        "id": "spider_177",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "flights.DestAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "AHD"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    {
        "id": "spider_178",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airlines.Airline"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 10.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
    },
    {
        "id": "spider_179",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airlines.Airline"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 10.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
    },
    {
        "id": "spider_180",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airlines.Airline"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 200.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    {
        "id": "spider_181",
        "conversations": [
            {
                "input": [
                    "airlines",
                    "flights"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "airlines.",
                    "rsuffix": "flights."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "airlines.Airline"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 200.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    {
        "id": "spider_182",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airlines"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airlines."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "United Airlines"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "flights.FlightNo"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    {
        "id": "spider_183",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airlines"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "airlines.uid"
                    ],
                    "right_on": [
                        "flights.Airline"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airlines."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airlines.Airline"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "United Airlines"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "flights.FlightNo"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    {
        "id": "spider_184",
        "conversations": [
            {
                "input": [
                    "flights"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "SourceAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "APG"
                }
            },
            {
                "input": [
                    "flights",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "FlightNo"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "id": "spider_185",
        "conversations": [
            {
                "input": [
                    "flights"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "SourceAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "APG"
                }
            },
            {
                "input": [
                    "flights",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "FlightNo"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "id": "spider_186",
        "conversations": [
            {
                "input": [
                    "flights"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "DestAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "APG"
                }
            },
            {
                "input": [
                    "flights",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "FlightNo"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
    },
    {
        "id": "spider_187",
        "conversations": [
            {
                "input": [
                    "flights"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "DestAirport"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "APG"
                }
            },
            {
                "input": [
                    "flights",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "FlightNo"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
    },
    {
        "id": "spider_188",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.SourceAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airports.City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aberdeen"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "flights.FlightNo"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "id": "spider_189",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.SourceAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airports.City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aberdeen"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "flights.FlightNo"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "id": "spider_190",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.DestAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airports.City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aberdeen"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "flights.FlightNo"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "id": "spider_191",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.DestAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "airports.City"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aberdeen"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "flights.FlightNo"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "id": "spider_192",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.DestAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "airports.City"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Aberdeen"
                        },
                        {
                            "column": [
                                "airports.City"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Abilene"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    {
        "id": "spider_193",
        "conversations": [
            {
                "input": [
                    "flights",
                    "airports"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "flights.DestAirport"
                    ],
                    "right_on": [
                        "airports.AirportCode"
                    ],
                    "how": "inner",
                    "lsuffix": "flights.",
                    "rsuffix": "airports."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "airports.City"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Aberdeen"
                        },
                        {
                            "column": [
                                "airports.City"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Abilene"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    {
        "id": "spider_194",
        "conversations": [
            {
                "input": [
                    "employee"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM employee"
    },
    {
        "id": "spider_195",
        "conversations": [
            {
                "input": [
                    "employee"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM employee"
    },
    {
        "id": "spider_196",
        "conversations": [
            {
                "input": [
                    "employee"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name FROM employee ORDER BY age"
    },
    {
        "id": "spider_197",
        "conversations": [
            {
                "input": [
                    "employee"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name FROM employee ORDER BY age"
    },
    {
        "id": "spider_198",
        "conversations": [
            {
                "input": [
                    "employee"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "City"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "City"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city"
    },
    {
        "id": "spider_199",
        "conversations": [
            {
                "input": [
                    "employee"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "City"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "City"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city"
    },
    {
        "id": "spider_200",
        "conversations": [
            {
                "input": [
                    "employee"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Age"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 30.0
                }
            },
            {
                "input": [
                    "employee",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_groupby_agg_2"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "City"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_2"
                ],
                "output": [
                    "df_bool_3"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_2",
                    "df_bool_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "City"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    {
        "id": "spider_201",
        "conversations": [
            {
                "input": [
                    "employee"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Age"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 30.0
                }
            },
            {
                "input": [
                    "employee",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_groupby_agg_2"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "City"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_2"
                ],
                "output": [
                    "df_bool_3"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_2",
                    "df_bool_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "City"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    {
        "id": "spider_202",
        "conversations": [
            {
                "input": [
                    "shop"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Location"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "Location"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "id": "spider_203",
        "conversations": [
            {
                "input": [
                    "shop"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Location"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "Location"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "id": "spider_204",
        "conversations": [
            {
                "input": [
                    "shop"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Number_products"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Manager_name",
                        "District"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "id": "spider_205",
        "conversations": [
            {
                "input": [
                    "shop"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Number_products"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Manager_name",
                        "District"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "id": "spider_206",
        "conversations": [
            {
                "input": [
                    "shop"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Number_products": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    {
        "id": "spider_207",
        "conversations": [
            {
                "input": [
                    "shop"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Number_products": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    {
        "id": "spider_208",
        "conversations": [
            {
                "input": [
                    "shop"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Number_products"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Location",
                        "District"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
    },
    {
        "id": "spider_209",
        "conversations": [
            {
                "input": [
                    "shop"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Number_products"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Location",
                        "District"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
    },
    {
        "id": "spider_210",
        "conversations": [
            {
                "input": [
                    "employee",
                    "evaluation"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "employee.Employee_ID"
                    ],
                    "right_on": [
                        "evaluation.Employee_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "employee.",
                    "rsuffix": "evaluation."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "evaluation.Bonus"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "employee.Name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "id": "spider_211",
        "conversations": [
            {
                "input": [
                    "employee",
                    "evaluation"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "employee.Employee_ID"
                    ],
                    "right_on": [
                        "evaluation.Employee_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "employee.",
                    "rsuffix": "evaluation."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "evaluation.Bonus"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "employee.Name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "id": "spider_212",
        "conversations": [
            {
                "input": [
                    "hiring",
                    "shop"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "hiring.Shop_ID"
                    ],
                    "right_on": [
                        "shop.Shop_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "hiring.",
                    "rsuffix": "shop."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "shop.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "shop.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    {
        "id": "spider_213",
        "conversations": [
            {
                "input": [
                    "hiring",
                    "shop"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "hiring.Shop_ID"
                    ],
                    "right_on": [
                        "shop.Shop_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "hiring.",
                    "rsuffix": "shop."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "shop.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "shop.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    {
        "id": "spider_214",
        "conversations": [
            {
                "input": [
                    "evaluation"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Bonus": [
                            "sum"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT sum(bonus) FROM evaluation"
    },
    {
        "id": "spider_215",
        "conversations": [
            {
                "input": [
                    "evaluation"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Bonus": [
                            "sum"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT sum(bonus) FROM evaluation"
    },
    {
        "id": "spider_216",
        "conversations": [
            {
                "input": [
                    "hiring"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT * FROM hiring"
    },
    {
        "id": "spider_217",
        "conversations": [
            {
                "input": [
                    "hiring"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT * FROM hiring"
    },
    {
        "id": "spider_218",
        "conversations": [
            {
                "input": [
                    "shop"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Location": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT LOCATION) FROM shop"
    },
    {
        "id": "spider_219",
        "conversations": [
            {
                "input": [
                    "shop"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Location": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT LOCATION) FROM shop"
    },
    {
        "id": "spider_220",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Documents"
    },
    {
        "id": "spider_221",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Documents"
    },
    {
        "id": "spider_222",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_ID",
                        "Document_Name",
                        "Document_Description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    {
        "id": "spider_223",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_ID",
                        "Document_Name",
                        "Document_Description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    {
        "id": "spider_224",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Document_Description"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "w"
                }
            },
            {
                "input": [
                    "Documents",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_Name",
                        "Template_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "id": "spider_225",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Document_Description"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "w"
                }
            },
            {
                "input": [
                    "Documents",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_Name",
                        "Template_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "id": "spider_226",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Document_Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Robbin CV"
                }
            },
            {
                "input": [
                    "Documents",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_ID",
                        "Template_ID",
                        "Document_Description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
    },
    {
        "id": "spider_227",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Document_Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Robbin CV"
                }
            },
            {
                "input": [
                    "Documents",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_ID",
                        "Template_ID",
                        "Document_Description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
    },
    {
        "id": "spider_228",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Template_ID": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT template_id) FROM Documents"
    },
    {
        "id": "spider_229",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Template_ID": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT template_id) FROM Documents"
    },
    {
        "id": "spider_230",
        "conversations": [
            {
                "input": [
                    "Documents",
                    "Templates"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Documents.Template_ID"
                    ],
                    "right_on": [
                        "Templates.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Documents.",
                    "rsuffix": "Templates."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Templates.Template_Type_Code"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "PPT"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    {
        "id": "spider_231",
        "conversations": [
            {
                "input": [
                    "Documents",
                    "Templates"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Documents.Template_ID"
                    ],
                    "right_on": [
                        "Templates.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Documents.",
                    "rsuffix": "Templates."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Templates.Template_Type_Code"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "PPT"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    {
        "id": "spider_232",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Template_ID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_ID",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
    },
    {
        "id": "spider_233",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Template_ID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_ID",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
    },
    {
        "id": "spider_234",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Template_ID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    {
        "id": "spider_235",
        "conversations": [
            {
                "input": [
                    "Documents"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Template_ID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    {
        "id": "spider_236",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Templates"
    },
    {
        "id": "spider_237",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Templates"
    },
    {
        "id": "spider_238",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_ID",
                        "Version_Number",
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    {
        "id": "spider_239",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_ID",
                        "Version_Number",
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    {
        "id": "spider_240",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_drop_duplicates_0"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Template_Type_Code"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "id": "spider_241",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_drop_duplicates_0"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Template_Type_Code"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "id": "spider_242",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Template_Type_Code"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "PP"
                        },
                        {
                            "column": [
                                "Template_Type_Code"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "PPT"
                        }
                    ]
                }
            },
            {
                "input": [
                    "Templates",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    {
        "id": "spider_243",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Template_Type_Code"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "PP"
                        },
                        {
                            "column": [
                                "Template_Type_Code"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "PPT"
                        }
                    ]
                }
            },
            {
                "input": [
                    "Templates",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    {
        "id": "spider_244",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "CV"
                }
            },
            {
                "input": [
                    "Templates",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    {
        "id": "spider_245",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "CV"
                }
            },
            {
                "input": [
                    "Templates",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    {
        "id": "spider_246",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Version_Number"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 5.0
                }
            },
            {
                "input": [
                    "Templates",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Version_Number",
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
    },
    {
        "id": "spider_247",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Version_Number"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 5.0
                }
            },
            {
                "input": [
                    "Templates",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Version_Number",
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
    },
    {
        "id": "spider_248",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Template_Type_Code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "id": "spider_249",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Template_Type_Code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "id": "spider_250",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Template_Type_Code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_251",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Template_Type_Code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_252",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Template_Type_Code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 3.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
    },
    {
        "id": "spider_253",
        "conversations": [
            {
                "input": [
                    "Templates"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Template_Type_Code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 3.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
    },
    {
        "id": "spider_254",
        "conversations": [
            {
                "input": [
                    "Templates",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Templates.Template_ID"
                    ],
                    "right_on": [
                        "Documents.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Templates.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Documents.Document_Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Data base"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Templates.Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
    },
    {
        "id": "spider_255",
        "conversations": [
            {
                "input": [
                    "Templates",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Templates.Template_ID"
                    ],
                    "right_on": [
                        "Documents.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Templates.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Documents.Document_Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Data base"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Templates.Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
    },
    {
        "id": "spider_256",
        "conversations": [
            {
                "input": [
                    "Templates",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Templates.Template_ID"
                    ],
                    "right_on": [
                        "Documents.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Templates.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Templates.Template_Type_Code"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "BK"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Documents.Document_Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    {
        "id": "spider_257",
        "conversations": [
            {
                "input": [
                    "Templates",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Templates.Template_ID"
                    ],
                    "right_on": [
                        "Documents.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Templates.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Templates.Template_Type_Code"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "BK"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Documents.Document_Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    {
        "id": "spider_258",
        "conversations": [
            {
                "input": [
                    "Templates",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Templates.Template_ID"
                    ],
                    "right_on": [
                        "Documents.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Templates.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Templates.Template_Type_Code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Templates.Template_Type_Code",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "id": "spider_259",
        "conversations": [
            {
                "input": [
                    "Templates",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Templates.Template_ID"
                    ],
                    "right_on": [
                        "Documents.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Templates.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Templates.Template_Type_Code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Templates.Template_Type_Code",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "id": "spider_260",
        "conversations": [
            {
                "input": [
                    "Templates",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Templates.Template_ID"
                    ],
                    "right_on": [
                        "Documents.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Templates.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Templates.Template_Type_Code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Templates.Template_Type_Code"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_261",
        "conversations": [
            {
                "input": [
                    "Templates",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Templates.Template_ID"
                    ],
                    "right_on": [
                        "Documents.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Templates.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Templates.Template_Type_Code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Templates.Template_Type_Code"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_262",
        "conversations": [
            {
                "input": [
                    "Ref_Template_Types"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code",
                        "Template_Type_Description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    {
        "id": "spider_263",
        "conversations": [
            {
                "input": [
                    "Ref_Template_Types"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code",
                        "Template_Type_Description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    {
        "id": "spider_264",
        "conversations": [
            {
                "input": [
                    "Ref_Template_Types"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "AD"
                }
            },
            {
                "input": [
                    "Ref_Template_Types",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    {
        "id": "spider_265",
        "conversations": [
            {
                "input": [
                    "Ref_Template_Types"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "AD"
                }
            },
            {
                "input": [
                    "Ref_Template_Types",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    {
        "id": "spider_266",
        "conversations": [
            {
                "input": [
                    "Ref_Template_Types"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Template_Type_Description"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Book"
                }
            },
            {
                "input": [
                    "Ref_Template_Types",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
    },
    {
        "id": "spider_267",
        "conversations": [
            {
                "input": [
                    "Ref_Template_Types"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Template_Type_Description"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Book"
                }
            },
            {
                "input": [
                    "Ref_Template_Types",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Template_Type_Code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
    },
    {
        "id": "spider_268",
        "conversations": [
            {
                "input": [
                    "Ref_Template_Types",
                    "Templates"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Ref_Template_Types.Template_Type_Code"
                    ],
                    "right_on": [
                        "Templates.Template_Type_Code"
                    ],
                    "how": "inner",
                    "lsuffix": "Ref_Template_Types.",
                    "rsuffix": "Templates."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Documents"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Templates.Template_ID"
                    ],
                    "right_on": [
                        "Documents.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_drop_duplicates_2"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Ref_Template_Types.Template_Type_Description"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Ref_Template_Types.Template_Type_Description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    {
        "id": "spider_269",
        "conversations": [
            {
                "input": [
                    "Ref_Template_Types",
                    "Templates"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Ref_Template_Types.Template_Type_Code"
                    ],
                    "right_on": [
                        "Templates.Template_Type_Code"
                    ],
                    "how": "inner",
                    "lsuffix": "Ref_Template_Types.",
                    "rsuffix": "Templates."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Documents"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Templates.Template_ID"
                    ],
                    "right_on": [
                        "Documents.Template_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_drop_duplicates_2"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Ref_Template_Types.Template_Type_Description"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Ref_Template_Types.Template_Type_Description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    {
        "id": "spider_270",
        "conversations": [
            {
                "input": [
                    "Ref_Template_Types",
                    "Templates"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Ref_Template_Types.Template_Type_Code"
                    ],
                    "right_on": [
                        "Templates.Template_Type_Code"
                    ],
                    "how": "inner",
                    "lsuffix": "Ref_Template_Types.",
                    "rsuffix": "Templates."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Ref_Template_Types.Template_Type_Description"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Presentation"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Templates.Template_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    {
        "id": "spider_271",
        "conversations": [
            {
                "input": [
                    "Ref_Template_Types",
                    "Templates"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Ref_Template_Types.Template_Type_Code"
                    ],
                    "right_on": [
                        "Templates.Template_Type_Code"
                    ],
                    "how": "inner",
                    "lsuffix": "Ref_Template_Types.",
                    "rsuffix": "Templates."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Ref_Template_Types.Template_Type_Description"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Presentation"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Templates.Template_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    {
        "id": "spider_272",
        "conversations": [
            {
                "input": [
                    "Paragraphs"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Paragraphs"
    },
    {
        "id": "spider_273",
        "conversations": [
            {
                "input": [
                    "Paragraphs"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Paragraphs"
    },
    {
        "id": "spider_274",
        "conversations": [
            {
                "input": [
                    "Paragraphs",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Paragraphs.Document_ID"
                    ],
                    "right_on": [
                        "Documents.Document_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Paragraphs.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Documents.Document_Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Summer Show"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
    },
    {
        "id": "spider_275",
        "conversations": [
            {
                "input": [
                    "Paragraphs",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Paragraphs.Document_ID"
                    ],
                    "right_on": [
                        "Documents.Document_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Paragraphs.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Documents.Document_Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Summer Show"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
    },
    {
        "id": "spider_276",
        "conversations": [
            {
                "input": [
                    "Paragraphs"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Paragraph_Text"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "korea"
                }
            },
            {
                "input": [
                    "Paragraphs",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Other_Details"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select other_details from paragraphs where paragraph_text like 'korea'"
    },
    {
        "id": "spider_277",
        "conversations": [
            {
                "input": [
                    "Paragraphs"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Paragraph_Text"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "korea"
                }
            },
            {
                "input": [
                    "Paragraphs",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Other_Details"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select other_details from paragraphs where paragraph_text like 'korea'"
    },
    {
        "id": "spider_278",
        "conversations": [
            {
                "input": [
                    "Paragraphs",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Paragraphs.Document_ID"
                    ],
                    "right_on": [
                        "Documents.Document_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Paragraphs.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Documents.Document_Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Welcome to NY"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Paragraphs.Paragraph_ID",
                        "Paragraphs.Paragraph_Text"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    {
        "id": "spider_279",
        "conversations": [
            {
                "input": [
                    "Paragraphs",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Paragraphs.Document_ID"
                    ],
                    "right_on": [
                        "Documents.Document_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Paragraphs.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Documents.Document_Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Welcome to NY"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Paragraphs.Paragraph_ID",
                        "Paragraphs.Paragraph_Text"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    {
        "id": "spider_280",
        "conversations": [
            {
                "input": [
                    "Paragraphs",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Paragraphs.Document_ID"
                    ],
                    "right_on": [
                        "Documents.Document_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Paragraphs.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Documents.Document_Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Customer reviews"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Paragraphs.Paragraph_Text"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
    },
    {
        "id": "spider_281",
        "conversations": [
            {
                "input": [
                    "Paragraphs",
                    "Documents"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Paragraphs.Document_ID"
                    ],
                    "right_on": [
                        "Documents.Document_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Paragraphs.",
                    "rsuffix": "Documents."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Documents.Document_Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Customer reviews"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Paragraphs.Paragraph_Text"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
    },
    {
        "id": "spider_282",
        "conversations": [
            {
                "input": [
                    "Paragraphs"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Document_ID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
    },
    {
        "id": "spider_283",
        "conversations": [
            {
                "input": [
                    "Paragraphs"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Document_ID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
    },
    {
        "id": "spider_284",
        "conversations": [
            {
                "input": [
                    "Paragraphs"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Document_ID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_ID"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "id": "spider_285",
        "conversations": [
            {
                "input": [
                    "Paragraphs"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Document_ID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_ID"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "id": "spider_286",
        "conversations": [
            {
                "input": [
                    "Paragraphs"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Document_ID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "(all,count)"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 1.0
                        },
                        {
                            "column": [
                                "(all,count)"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 2.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    {
        "id": "spider_287",
        "conversations": [
            {
                "input": [
                    "Paragraphs"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Document_ID"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "(all,count)"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 1.0
                        },
                        {
                            "column": [
                                "(all,count)"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 2.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Document_ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    {
        "id": "spider_288",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM teacher"
    },
    {
        "id": "spider_289",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM teacher"
    },
    {
        "id": "spider_290",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
        "id": "spider_291",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
        "id": "spider_292",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Age",
                        "Hometown"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Age ,  Hometown FROM teacher"
    },
    {
        "id": "spider_293",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Age",
                        "Hometown"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Age ,  Hometown FROM teacher"
    },
    {
        "id": "spider_294",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Hometown"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "little lever urban district"
                }
            },
            {
                "input": [
                    "teacher",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select name from teacher where hometown != \"little lever urban district\""
    },
    {
        "id": "spider_295",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Hometown"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "little lever urban district"
                }
            },
            {
                "input": [
                    "teacher",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select name from teacher where hometown != \"little lever urban district\""
    },
    {
        "id": "spider_296",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Age"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 32.0
                        },
                        {
                            "column": [
                                "Age"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 33.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "teacher",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
    },
    {
        "id": "spider_297",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Age"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 32.0
                        },
                        {
                            "column": [
                                "Age"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 33.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "teacher",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
    },
    {
        "id": "spider_298",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Hometown"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    {
        "id": "spider_299",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Hometown"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    {
        "id": "spider_300",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Hometown"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Hometown",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "id": "spider_301",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Hometown"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Hometown",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "id": "spider_302",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Hometown"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Hometown"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "id": "spider_303",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Hometown"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Hometown"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "id": "spider_304",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Hometown"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Hometown"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "id": "spider_305",
        "conversations": [
            {
                "input": [
                    "teacher"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Hometown"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Hometown"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "id": "spider_306",
        "conversations": [
            {
                "input": [
                    "course_arrange",
                    "course"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Course_ID"
                    ],
                    "right_on": [
                        "course.Course_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "course_arrange.",
                    "rsuffix": "course."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "teacher"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Teacher_ID"
                    ],
                    "right_on": [
                        "teacher.Teacher_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "teacher."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "teacher.Name",
                        "course.Course"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
    },
    {
        "id": "spider_307",
        "conversations": [
            {
                "input": [
                    "course_arrange",
                    "course"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Course_ID"
                    ],
                    "right_on": [
                        "course.Course_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "course_arrange.",
                    "rsuffix": "course."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "teacher"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Teacher_ID"
                    ],
                    "right_on": [
                        "teacher.Teacher_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "teacher."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "teacher.Name",
                        "course.Course"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
    },
    {
        "id": "spider_308",
        "conversations": [
            {
                "input": [
                    "course_arrange",
                    "course"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Course_ID"
                    ],
                    "right_on": [
                        "course.Course_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "course_arrange.",
                    "rsuffix": "course."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "teacher"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Teacher_ID"
                    ],
                    "right_on": [
                        "teacher.Teacher_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "teacher."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "teacher.Name"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "teacher.Name",
                        "course.Course"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "id": "spider_309",
        "conversations": [
            {
                "input": [
                    "course_arrange",
                    "course"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Course_ID"
                    ],
                    "right_on": [
                        "course.Course_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "course_arrange.",
                    "rsuffix": "course."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "teacher"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Teacher_ID"
                    ],
                    "right_on": [
                        "teacher.Teacher_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "teacher."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "teacher.Name"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "teacher.Name",
                        "course.Course"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "id": "spider_310",
        "conversations": [
            {
                "input": [
                    "course_arrange",
                    "course"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Course_ID"
                    ],
                    "right_on": [
                        "course.Course_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "course_arrange.",
                    "rsuffix": "course."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "teacher"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Teacher_ID"
                    ],
                    "right_on": [
                        "teacher.Teacher_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "teacher."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "course.Course"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Math"
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "teacher.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    {
        "id": "spider_311",
        "conversations": [
            {
                "input": [
                    "course_arrange",
                    "course"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Course_ID"
                    ],
                    "right_on": [
                        "course.Course_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "course_arrange.",
                    "rsuffix": "course."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "teacher"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Teacher_ID"
                    ],
                    "right_on": [
                        "teacher.Teacher_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "teacher."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "course.Course"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Math"
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "teacher.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    {
        "id": "spider_312",
        "conversations": [
            {
                "input": [
                    "course_arrange",
                    "teacher"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Teacher_ID"
                    ],
                    "right_on": [
                        "teacher.Teacher_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "course_arrange.",
                    "rsuffix": "teacher."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "teacher.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "teacher.Name",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "id": "spider_313",
        "conversations": [
            {
                "input": [
                    "course_arrange",
                    "teacher"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Teacher_ID"
                    ],
                    "right_on": [
                        "teacher.Teacher_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "course_arrange.",
                    "rsuffix": "teacher."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "teacher.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "teacher.Name",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "id": "spider_314",
        "conversations": [
            {
                "input": [
                    "course_arrange",
                    "teacher"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Teacher_ID"
                    ],
                    "right_on": [
                        "teacher.Teacher_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "course_arrange.",
                    "rsuffix": "teacher."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "teacher.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "teacher.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    {
        "id": "spider_315",
        "conversations": [
            {
                "input": [
                    "course_arrange",
                    "teacher"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "course_arrange.Teacher_ID"
                    ],
                    "right_on": [
                        "teacher.Teacher_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "course_arrange.",
                    "rsuffix": "teacher."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "teacher.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "teacher.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    {
        "id": "spider_316",
        "conversations": [
            {
                "input": [
                    "visitor"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Age"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 30.0
                }
            },
            {
                "input": [
                    "visitor",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM visitor WHERE age  <  30"
    },
    {
        "id": "spider_317",
        "conversations": [
            {
                "input": [
                    "visitor"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Level_of_membership"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 4.0
                }
            },
            {
                "input": [
                    "visitor",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Level_of_membership"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
    },
    {
        "id": "spider_318",
        "conversations": [
            {
                "input": [
                    "visitor"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Level_of_membership"
                    ],
                    "index": "null",
                    "condition": "<=",
                    "value": 4.0
                }
            },
            {
                "input": [
                    "visitor",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Age": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"
    },
    {
        "id": "spider_319",
        "conversations": [
            {
                "input": [
                    "visitor"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Level_of_membership"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 4.0
                }
            },
            {
                "input": [
                    "visitor",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Level_of_membership"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"
    },
    {
        "id": "spider_320",
        "conversations": [
            {
                "input": [
                    "museum"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Num_of_Staff"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Museum_ID",
                        "Name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
    },
    {
        "id": "spider_321",
        "conversations": [
            {
                "input": [
                    "museum"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Open_Year"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 2009.0
                }
            },
            {
                "input": [
                    "museum",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Num_of_Staff": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"
    },
    {
        "id": "spider_322",
        "conversations": [
            {
                "input": [
                    "museum"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Plaza Museum"
                }
            },
            {
                "input": [
                    "museum",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Num_of_Staff",
                        "Open_Year"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"
    },
    {
        "id": "spider_323",
        "conversations": [
            {
                "input": [
                    "visitor",
                    "visit"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "visitor.ID"
                    ],
                    "right_on": [
                        "visit.visitor_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "visitor.",
                    "rsuffix": "visit."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "visit.Num_of_Ticket"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "visitor.Name",
                        "visitor.Age"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
    },
    {
        "id": "spider_324",
        "conversations": [
            {
                "input": [
                    "visit"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Num_of_Ticket": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"
    },
    {
        "id": "spider_325",
        "conversations": [
            {
                "input": [
                    "visitor",
                    "visit"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "visitor.ID"
                    ],
                    "right_on": [
                        "visit.visitor_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "visitor.",
                    "rsuffix": "visit."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "visitor.Level_of_membership"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "visit.Total_spent": [
                            "sum"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"
    },
    {
        "id": "spider_326",
        "conversations": [
            {
                "input": [
                    "museum"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Open_Year"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 2013.0
                        },
                        {
                            "column": [
                                "Open_Year"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 2008.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "museum",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008"
    },
    {
        "id": "spider_327",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM players"
    },
    {
        "id": "spider_328",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM players"
    },
    {
        "id": "spider_329",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM matches"
    },
    {
        "id": "spider_330",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM matches"
    },
    {
        "id": "spider_331",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "country_code"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "USA"
                }
            },
            {
                "input": [
                    "players",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "birth_date"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
    },
    {
        "id": "spider_332",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "country_code"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "USA"
                }
            },
            {
                "input": [
                    "players",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "birth_date"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
    },
    {
        "id": "spider_333",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "loser_age": [
                            "mean"
                        ],
                        "winner_age": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    {
        "id": "spider_334",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "loser_age": [
                            "mean"
                        ],
                        "winner_age": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    {
        "id": "spider_335",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "winner_rank": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(winner_rank) FROM matches"
    },
    {
        "id": "spider_336",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "winner_rank": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(winner_rank) FROM matches"
    },
    {
        "id": "spider_337",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "loser_rank": [
                            "min"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT min(loser_rank) FROM matches"
    },
    {
        "id": "spider_338",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "loser_rank": [
                            "min"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT min(loser_rank) FROM matches"
    },
    {
        "id": "spider_339",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "country_code": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT country_code) FROM players"
    },
    {
        "id": "spider_340",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "country_code": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT country_code) FROM players"
    },
    {
        "id": "spider_341",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "loser_name": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT loser_name) FROM matches"
    },
    {
        "id": "spider_342",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "loser_name": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT loser_name) FROM matches"
    },
    {
        "id": "spider_343",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "tourney_name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 10.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "tourney_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    {
        "id": "spider_344",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "tourney_name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 10.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "tourney_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    {
        "id": "spider_345",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 2013.0
                        },
                        {
                            "column": [
                                "year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 2016.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "matches",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    {
        "id": "spider_346",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 2013.0
                        },
                        {
                            "column": [
                                "year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 2016.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "matches",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    {
        "id": "spider_347",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "birth_date"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "country_code"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "id": "spider_348",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "birth_date"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "country_code"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "id": "spider_349",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "birth_date"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "last_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
    },
    {
        "id": "spider_350",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "birth_date"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "last_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
    },
    {
        "id": "spider_351",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "hand"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "L"
                }
            },
            {
                "input": [
                    "players",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "birth_date"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "last_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    {
        "id": "spider_352",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "hand"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "L"
                }
            },
            {
                "input": [
                    "players",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "birth_date"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "last_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    {
        "id": "spider_353",
        "conversations": [
            {
                "input": [
                    "players",
                    "rankings"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "players.player_id"
                    ],
                    "right_on": [
                        "rankings.player_id"
                    ],
                    "how": "inner",
                    "lsuffix": "players.",
                    "rsuffix": "rankings."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "rankings.tours"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "players.country_code",
                        "players.first_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "id": "spider_354",
        "conversations": [
            {
                "input": [
                    "players",
                    "rankings"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "players.player_id"
                    ],
                    "right_on": [
                        "rankings.player_id"
                    ],
                    "how": "inner",
                    "lsuffix": "players.",
                    "rsuffix": "rankings."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "rankings.tours"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "players.country_code",
                        "players.first_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "id": "spider_355",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "year"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "year"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_356",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "year"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "year"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_357",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "tourney_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Australian Open"
                }
            },
            {
                "input": [
                    "matches",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "winner_rank_points"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "winner_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "id": "spider_358",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "tourney_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Australian Open"
                }
            },
            {
                "input": [
                    "matches",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "winner_rank_points"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "winner_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "id": "spider_359",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "minutes"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "winner_name",
                        "loser_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "id": "spider_360",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "minutes"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "winner_name",
                        "loser_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "id": "spider_361",
        "conversations": [
            {
                "input": [
                    "players",
                    "rankings"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "players.player_id"
                    ],
                    "right_on": [
                        "rankings.player_id"
                    ],
                    "how": "inner",
                    "lsuffix": "players.",
                    "rsuffix": "rankings."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "players.first_name"
                    ],
                    "agg_args": {
                        "rankings.ranking": [
                            "mean"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(rankings.ranking,mean)",
                        "players.first_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "id": "spider_362",
        "conversations": [
            {
                "input": [
                    "players",
                    "rankings"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "players.player_id"
                    ],
                    "right_on": [
                        "rankings.player_id"
                    ],
                    "how": "inner",
                    "lsuffix": "players.",
                    "rsuffix": "rankings."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "players.first_name"
                    ],
                    "agg_args": {
                        "rankings.ranking": [
                            "mean"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(rankings.ranking,mean)",
                        "players.first_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "id": "spider_363",
        "conversations": [
            {
                "input": [
                    "players",
                    "rankings"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "players.player_id"
                    ],
                    "right_on": [
                        "rankings.player_id"
                    ],
                    "how": "inner",
                    "lsuffix": "players.",
                    "rsuffix": "rankings."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "players.first_name"
                    ],
                    "agg_args": {
                        "rankings.ranking_points": [
                            "sum"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(rankings.ranking_points,sum)",
                        "players.first_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "id": "spider_364",
        "conversations": [
            {
                "input": [
                    "players",
                    "rankings"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "players.player_id"
                    ],
                    "right_on": [
                        "rankings.player_id"
                    ],
                    "how": "inner",
                    "lsuffix": "players.",
                    "rsuffix": "rankings."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "players.first_name"
                    ],
                    "agg_args": {
                        "rankings.ranking_points": [
                            "sum"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(rankings.ranking_points,sum)",
                        "players.first_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "id": "spider_365",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country_code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "country_code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
    },
    {
        "id": "spider_366",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country_code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "country_code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
    },
    {
        "id": "spider_367",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country_code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country_code"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_368",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country_code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country_code"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_369",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country_code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 50.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country_code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    {
        "id": "spider_370",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country_code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 50.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country_code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    {
        "id": "spider_371",
        "conversations": [
            {
                "input": [
                    "rankings"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "ranking_date"
                    ],
                    "agg_args": {
                        "tours": [
                            "sum"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(tours,sum)",
                        "ranking_date"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "id": "spider_372",
        "conversations": [
            {
                "input": [
                    "rankings"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "ranking_date"
                    ],
                    "agg_args": {
                        "tours": [
                            "sum"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(tours,sum)",
                        "ranking_date"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "id": "spider_373",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "year"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "year"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
    },
    {
        "id": "spider_374",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "year"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "year"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
    },
    {
        "id": "spider_375",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "winner_age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_drop_duplicates_1"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "winner_name",
                        "winner_rank"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "winner_name",
                        "winner_rank"
                    ],
                    "index": [
                        3
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "id": "spider_376",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "winner_age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_drop_duplicates_1"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "winner_name",
                        "winner_rank"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "winner_name",
                        "winner_rank"
                    ],
                    "index": [
                        3
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "id": "spider_377",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "tourney_name"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "WTA Championships"
                        },
                        {
                            "column": [
                                "winner_hand"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "L"
                        }
                    ]
                }
            },
            {
                "input": [
                    "matches",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "winner_name": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
    },
    {
        "id": "spider_378",
        "conversations": [
            {
                "input": [
                    "matches"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "tourney_name"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "WTA Championships"
                        },
                        {
                            "column": [
                                "winner_hand"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "L"
                        }
                    ]
                }
            },
            {
                "input": [
                    "matches",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "winner_name": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
    },
    {
        "id": "spider_379",
        "conversations": [
            {
                "input": [
                    "players",
                    "matches"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "players.player_id"
                    ],
                    "right_on": [
                        "matches.winner_id"
                    ],
                    "how": "inner",
                    "lsuffix": "players.",
                    "rsuffix": "matches."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "matches.winner_rank_points"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "players.first_name",
                        "players.country_code",
                        "players.birth_date"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "id": "spider_380",
        "conversations": [
            {
                "input": [
                    "players",
                    "matches"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "players.player_id"
                    ],
                    "right_on": [
                        "matches.winner_id"
                    ],
                    "how": "inner",
                    "lsuffix": "players.",
                    "rsuffix": "matches."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "matches.winner_rank_points"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "players.first_name",
                        "players.country_code",
                        "players.birth_date"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "id": "spider_381",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "hand"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "hand"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand"
    },
    {
        "id": "spider_382",
        "conversations": [
            {
                "input": [
                    "players"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "hand"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "hand"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand"
    },
    {
        "id": "spider_383",
        "conversations": [
            {
                "input": [
                    "ship"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "disposition_of_ship"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Captured"
                }
            },
            {
                "input": [
                    "ship",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"
    },
    {
        "id": "spider_384",
        "conversations": [
            {
                "input": [
                    "ship"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "name"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "name",
                        "tonnage"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC"
    },
    {
        "id": "spider_385",
        "conversations": [
            {
                "input": [
                    "battle"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "name",
                        "date"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  date FROM battle"
    },
    {
        "id": "spider_386",
        "conversations": [
            {
                "input": [
                    "death"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "killed": [
                            "min"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(killed) ,  min(killed) FROM death"
    },
    {
        "id": "spider_387",
        "conversations": [
            {
                "input": [
                    "death"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "injured": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(injured) FROM death"
    },
    {
        "id": "spider_388",
        "conversations": [
            {
                "input": [
                    "death",
                    "ship"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "death.caused_by_ship_id"
                    ],
                    "right_on": [
                        "ship.id"
                    ],
                    "how": "inner",
                    "lsuffix": "death.",
                    "rsuffix": "ship."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "ship.tonnage"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "t"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "death.killed",
                        "death.injured"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"
    },
    {
        "id": "spider_389",
        "conversations": [
            {
                "input": [
                    "battle"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "bulgarian_commander"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "Boril"
                }
            },
            {
                "input": [
                    "battle",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "name",
                        "result"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"
    },
    {
        "id": "spider_390",
        "conversations": [
            {
                "input": [
                    "battle",
                    "ship"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "battle.id"
                    ],
                    "right_on": [
                        "ship.lost_in_battle"
                    ],
                    "how": "inner",
                    "lsuffix": "battle.",
                    "rsuffix": "ship."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "ship.ship_type"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Brig"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_drop_duplicates_3"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "battle.id",
                        "battle.name"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "battle.id",
                        "battle.name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
    },
    {
        "id": "spider_391",
        "conversations": [
            {
                "input": [
                    "battle"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "bulgarian_commander"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Kaloyan"
                        },
                        {
                            "column": [
                                "latin_commander"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Baldwin I"
                        }
                    ]
                }
            },
            {
                "input": [
                    "battle",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
    },
    {
        "id": "spider_392",
        "conversations": [
            {
                "input": [
                    "battle"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "result": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT RESULT) FROM battle"
    },
    {
        "id": "spider_393",
        "conversations": [
            {
                "input": [
                    "death"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "note"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "East"
                }
            },
            {
                "input": [
                    "death",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "note"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT note FROM death WHERE note LIKE '%East%'"
    },
    {
        "id": "spider_394",
        "conversations": [
            {
                "input": [
                    "Addresses"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "line_1",
                        "line_2"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT line_1 ,  line_2 FROM addresses"
    },
    {
        "id": "spider_395",
        "conversations": [
            {
                "input": [
                    "Addresses"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "line_1",
                        "line_2"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT line_1 ,  line_2 FROM addresses"
    },
    {
        "id": "spider_396",
        "conversations": [
            {
                "input": [
                    "Courses"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Courses"
    },
    {
        "id": "spider_397",
        "conversations": [
            {
                "input": [
                    "Courses"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Courses"
    },
    {
        "id": "spider_398",
        "conversations": [
            {
                "input": [
                    "Courses"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "course_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "math"
                }
            },
            {
                "input": [
                    "Courses",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "course_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
    },
    {
        "id": "spider_399",
        "conversations": [
            {
                "input": [
                    "Courses"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "course_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "math"
                }
            },
            {
                "input": [
                    "Courses",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "course_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
    },
    {
        "id": "spider_400",
        "conversations": [
            {
                "input": [
                    "Addresses"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "city"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Port Chelsea"
                }
            },
            {
                "input": [
                    "Addresses",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "zip_postcode"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
    },
    {
        "id": "spider_401",
        "conversations": [
            {
                "input": [
                    "Addresses"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "city"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Port Chelsea"
                }
            },
            {
                "input": [
                    "Addresses",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "zip_postcode"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
    },
    {
        "id": "spider_402",
        "conversations": [
            {
                "input": [
                    "Degree_Programs"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "department_id": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "id": "spider_403",
        "conversations": [
            {
                "input": [
                    "Degree_Programs"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "department_id": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "id": "spider_404",
        "conversations": [
            {
                "input": [
                    "Degree_Programs"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "degree_summary_name": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "id": "spider_405",
        "conversations": [
            {
                "input": [
                    "Degree_Programs"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "degree_summary_name": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "id": "spider_406",
        "conversations": [
            {
                "input": [
                    "Departments",
                    "Degree_Programs"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Departments.department_id"
                    ],
                    "right_on": [
                        "Degree_Programs.department_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Departments.",
                    "rsuffix": "Degree_Programs."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Departments.department_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "engineer"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
    },
    {
        "id": "spider_407",
        "conversations": [
            {
                "input": [
                    "Departments",
                    "Degree_Programs"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Departments.department_id"
                    ],
                    "right_on": [
                        "Degree_Programs.department_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Departments.",
                    "rsuffix": "Degree_Programs."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Departments.department_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "engineer"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
    },
    {
        "id": "spider_408",
        "conversations": [
            {
                "input": [
                    "Sections"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "section_name",
                        "section_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT section_name ,  section_description FROM Sections"
    },
    {
        "id": "spider_409",
        "conversations": [
            {
                "input": [
                    "Sections"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "section_name",
                        "section_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT section_name ,  section_description FROM Sections"
    },
    {
        "id": "spider_410",
        "conversations": [
            {
                "input": [
                    "Sections"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "section_name"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "section_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "id": "spider_411",
        "conversations": [
            {
                "input": [
                    "Sections"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "section_name"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "section_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "id": "spider_412",
        "conversations": [
            {
                "input": [
                    "Departments"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "department_name"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "computer"
                }
            },
            {
                "input": [
                    "Departments",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "department_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "id": "spider_413",
        "conversations": [
            {
                "input": [
                    "Departments"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "department_name"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "computer"
                }
            },
            {
                "input": [
                    "Departments",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "department_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "id": "spider_414",
        "conversations": [
            {
                "input": [
                    "Students",
                    "Student_Enrolment"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Students.student_id"
                    ],
                    "right_on": [
                        "Student_Enrolment.student_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Students.",
                    "rsuffix": "Student_Enrolment."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Degree_Programs"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student_Enrolment.degree_program_id"
                    ],
                    "right_on": [
                        "Degree_Programs.degree_program_id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Degree_Programs."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Degree_Programs.degree_summary_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Bachelor"
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_drop_duplicates_4"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Students.first_name",
                        "Students.middle_name",
                        "Students.last_name"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Students.first_name",
                        "Students.middle_name",
                        "Students.last_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "id": "spider_415",
        "conversations": [
            {
                "input": [
                    "Students",
                    "Student_Enrolment"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Students.student_id"
                    ],
                    "right_on": [
                        "Student_Enrolment.student_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Students.",
                    "rsuffix": "Student_Enrolment."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Degree_Programs"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Student_Enrolment.degree_program_id"
                    ],
                    "right_on": [
                        "Degree_Programs.degree_program_id"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Degree_Programs."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Degree_Programs.degree_summary_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Bachelor"
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_drop_duplicates_4"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Students.first_name",
                        "Students.middle_name",
                        "Students.last_name"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Students.first_name",
                        "Students.middle_name",
                        "Students.last_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "id": "spider_416",
        "conversations": [
            {
                "input": [
                    "Degree_Programs",
                    "Student_Enrolment"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Degree_Programs.degree_program_id"
                    ],
                    "right_on": [
                        "Student_Enrolment.degree_program_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Degree_Programs.",
                    "rsuffix": "Student_Enrolment."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Degree_Programs.degree_summary_name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Degree_Programs.degree_summary_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_417",
        "conversations": [
            {
                "input": [
                    "Degree_Programs",
                    "Student_Enrolment"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Degree_Programs.degree_program_id"
                    ],
                    "right_on": [
                        "Student_Enrolment.degree_program_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Degree_Programs.",
                    "rsuffix": "Student_Enrolment."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Degree_Programs.degree_summary_name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Degree_Programs.degree_summary_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_418",
        "conversations": [
            {
                "input": [
                    "Courses",
                    "Student_Enrolment_Courses"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Courses.course_id"
                    ],
                    "right_on": [
                        "Student_Enrolment_Courses.course_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Courses.",
                    "rsuffix": "Student_Enrolment_Courses."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_drop_duplicates_1"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Courses.course_name"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Courses.course_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
    },
    {
        "id": "spider_419",
        "conversations": [
            {
                "input": [
                    "Courses",
                    "Student_Enrolment_Courses"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Courses.course_id"
                    ],
                    "right_on": [
                        "Student_Enrolment_Courses.course_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Courses.",
                    "rsuffix": "Student_Enrolment_Courses."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_drop_duplicates_1"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Courses.course_name"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Courses.course_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
    },
    {
        "id": "spider_420",
        "conversations": [
            {
                "input": [
                    "Courses",
                    "Student_Enrolment_Courses"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Courses.course_id"
                    ],
                    "right_on": [
                        "Student_Enrolment_Courses.course_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Courses.",
                    "rsuffix": "Student_Enrolment_Courses."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Courses.course_name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Courses.course_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_421",
        "conversations": [
            {
                "input": [
                    "Courses",
                    "Student_Enrolment_Courses"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Courses.course_id"
                    ],
                    "right_on": [
                        "Student_Enrolment_Courses.course_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Courses.",
                    "rsuffix": "Student_Enrolment_Courses."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Courses.course_name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Courses.course_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_422",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "first_name"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Timmothy"
                        },
                        {
                            "column": [
                                "last_name"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Ward"
                        }
                    ]
                }
            },
            {
                "input": [
                    "Students",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "cell_mobile_number"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"
    },
    {
        "id": "spider_423",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "first_name"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "timmothy"
                        },
                        {
                            "column": [
                                "last_name"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "ward"
                        }
                    ]
                }
            },
            {
                "input": [
                    "Students",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "cell_mobile_number"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"
    },
    {
        "id": "spider_424",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "date_first_registered"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "middle_name",
                        "last_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    {
        "id": "spider_425",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "date_first_registered"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "middle_name",
                        "last_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    {
        "id": "spider_426",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "date_left"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "middle_name",
                        "last_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    {
        "id": "spider_427",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "date_left"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "middle_name",
                        "last_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    {
        "id": "spider_428",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "current_address_id"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "permanent_address_id"
                }
            },
            {
                "input": [
                    "Students",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
    },
    {
        "id": "spider_429",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "current_address_id"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "permanent_address_id"
                }
            },
            {
                "input": [
                    "Students",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
    },
    {
        "id": "spider_430",
        "conversations": [
            {
                "input": [
                    "Transcripts"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "transcript_date": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(transcript_date) FROM Transcripts"
    },
    {
        "id": "spider_431",
        "conversations": [
            {
                "input": [
                    "Transcripts"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "transcript_date": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(transcript_date) FROM Transcripts"
    },
    {
        "id": "spider_432",
        "conversations": [
            {
                "input": [
                    "Transcripts"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "transcript_date"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "transcript_date",
                        "other_details"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    {
        "id": "spider_433",
        "conversations": [
            {
                "input": [
                    "Transcripts"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "transcript_date"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "transcript_date",
                        "other_details"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    {
        "id": "spider_434",
        "conversations": [
            {
                "input": [
                    "Transcripts"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Transcripts"
    },
    {
        "id": "spider_435",
        "conversations": [
            {
                "input": [
                    "Transcripts"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Transcripts"
    },
    {
        "id": "spider_436",
        "conversations": [
            {
                "input": [
                    "Transcripts"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "transcript_date"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "transcript_date"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "id": "spider_437",
        "conversations": [
            {
                "input": [
                    "Transcripts"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "transcript_date"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "transcript_date"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "id": "spider_438",
        "conversations": [
            {
                "input": [
                    "Transcript_Contents"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "student_course_id"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "student_course_id"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_439",
        "conversations": [
            {
                "input": [
                    "Transcript_Contents"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "student_course_id"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "student_course_id"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_440",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "current_address_id": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT current_address_id) FROM Students"
    },
    {
        "id": "spider_441",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "current_address_id": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT current_address_id) FROM Students"
    },
    {
        "id": "spider_442",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "other_student_details"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "other_student_details"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "id": "spider_443",
        "conversations": [
            {
                "input": [
                    "Students"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "other_student_details"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "other_student_details"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "id": "spider_444",
        "conversations": [
            {
                "input": [
                    "Sections"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "section_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "h"
                }
            },
            {
                "input": [
                    "Sections",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "section_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
    },
    {
        "id": "spider_445",
        "conversations": [
            {
                "input": [
                    "Sections"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "section_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "h"
                }
            },
            {
                "input": [
                    "Sections",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "section_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
    },
    {
        "id": "spider_446",
        "conversations": [
            {
                "input": [
                    "Students",
                    "Addresses"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Students.permanent_address_id"
                    ],
                    "right_on": [
                        "Addresses.address_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Students.",
                    "rsuffix": "Addresses."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Addresses.country"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "haiti"
                        },
                        {
                            "column": [
                                "Students.cell_mobile_number"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "09700166582"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Students.first_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
    },
    {
        "id": "spider_447",
        "conversations": [
            {
                "input": [
                    "Students",
                    "Addresses"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Students.permanent_address_id"
                    ],
                    "right_on": [
                        "Addresses.address_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Students.",
                    "rsuffix": "Addresses."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Addresses.country"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "haiti"
                        },
                        {
                            "column": [
                                "Students.cell_mobile_number"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "09700166582"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Students.first_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
    },
    {
        "id": "spider_448",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Title"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Title"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "id": "spider_449",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Title"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Title"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "id": "spider_450",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Directed_by"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Ben Jones"
                }
            },
            {
                "input": [
                    "Cartoon",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Title"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
    },
    {
        "id": "spider_451",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Directed_by"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Ben Jones"
                }
            },
            {
                "input": [
                    "Cartoon",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Title"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
    },
    {
        "id": "spider_452",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Written_by"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Joseph Kuhr"
                }
            },
            {
                "input": [
                    "Cartoon",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
    },
    {
        "id": "spider_453",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Written_by"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Joseph Kuhr"
                }
            },
            {
                "input": [
                    "Cartoon",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
    },
    {
        "id": "spider_454",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Original_air_date"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Title",
                        "Directed_by"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "id": "spider_455",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Original_air_date"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Title",
                        "Directed_by"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "id": "spider_456",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Directed_by"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Ben Jones"
                        },
                        {
                            "column": [
                                "Directed_by"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Brandon Vietti"
                        }
                    ]
                }
            },
            {
                "input": [
                    "Cartoon",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Title"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    {
        "id": "spider_457",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Directed_by"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Ben Jones"
                        },
                        {
                            "column": [
                                "Directed_by"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Brandon Vietti"
                        }
                    ]
                }
            },
            {
                "input": [
                    "Cartoon",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Title"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    {
        "id": "spider_458",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Country"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Country",
                        "(all,count)"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "id": "spider_459",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Country"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Country",
                        "(all,count)"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "id": "spider_460",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "series_name": [
                            "nunique"
                        ],
                        "Content": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    {
        "id": "spider_461",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "series_name": [
                            "nunique"
                        ],
                        "Content": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    {
        "id": "spider_462",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "series_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Sky Radio"
                }
            },
            {
                "input": [
                    "TV_Channel",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Content"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "id": "spider_463",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "series_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Sky Radio"
                }
            },
            {
                "input": [
                    "TV_Channel",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Content"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "id": "spider_464",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "series_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Sky Radio"
                }
            },
            {
                "input": [
                    "TV_Channel",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Package_Option"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "id": "spider_465",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "series_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Sky Radio"
                }
            },
            {
                "input": [
                    "TV_Channel",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Package_Option"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "id": "spider_466",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Language"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "English"
                }
            },
            {
                "input": [
                    "TV_Channel",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
    },
    {
        "id": "spider_467",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Language"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "English"
                }
            },
            {
                "input": [
                    "TV_Channel",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
    },
    {
        "id": "spider_468",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Language"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Language",
                        "(all,count)"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "id": "spider_469",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Language"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Language",
                        "(all,count)"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "id": "spider_470",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Language"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Language",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "id": "spider_471",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Language"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Language",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "id": "spider_472",
        "conversations": [
            {
                "input": [
                    "TV_Channel",
                    "Cartoon"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "TV_Channel.id"
                    ],
                    "right_on": [
                        "Cartoon.Channel"
                    ],
                    "how": "inner",
                    "lsuffix": "TV_Channel.",
                    "rsuffix": "Cartoon."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Cartoon.Title"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "The Rise of the Blue Beetle!"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "TV_Channel.series_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
    },
    {
        "id": "spider_473",
        "conversations": [
            {
                "input": [
                    "TV_Channel",
                    "Cartoon"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "TV_Channel.id"
                    ],
                    "right_on": [
                        "Cartoon.Channel"
                    ],
                    "how": "inner",
                    "lsuffix": "TV_Channel.",
                    "rsuffix": "Cartoon."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Cartoon.Title"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "The Rise of the Blue Beetle!"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "TV_Channel.series_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
    },
    {
        "id": "spider_474",
        "conversations": [
            {
                "input": [
                    "TV_Channel",
                    "Cartoon"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "TV_Channel.id"
                    ],
                    "right_on": [
                        "Cartoon.Channel"
                    ],
                    "how": "inner",
                    "lsuffix": "TV_Channel.",
                    "rsuffix": "Cartoon."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "TV_Channel.series_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Sky Radio"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Cartoon.Title"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "id": "spider_475",
        "conversations": [
            {
                "input": [
                    "TV_Channel",
                    "Cartoon"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "TV_Channel.id"
                    ],
                    "right_on": [
                        "Cartoon.Channel"
                    ],
                    "how": "inner",
                    "lsuffix": "TV_Channel.",
                    "rsuffix": "Cartoon."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "TV_Channel.series_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Sky Radio"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Cartoon.Title"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "id": "spider_476",
        "conversations": [
            {
                "input": [
                    "TV_series"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Rating"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Episode"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "id": "spider_477",
        "conversations": [
            {
                "input": [
                    "TV_series"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Rating"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Episode"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "id": "spider_478",
        "conversations": [
            {
                "input": [
                    "TV_series"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Rating"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Episode",
                        "Rating"
                    ],
                    "index": [
                        3
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
    },
    {
        "id": "spider_479",
        "conversations": [
            {
                "input": [
                    "TV_series"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Rating"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Episode",
                        "Rating"
                    ],
                    "index": [
                        3
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
    },
    {
        "id": "spider_480",
        "conversations": [
            {
                "input": [
                    "TV_series"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Share": [
                            "min"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
    },
    {
        "id": "spider_481",
        "conversations": [
            {
                "input": [
                    "TV_series"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Share": [
                            "min"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
    },
    {
        "id": "spider_482",
        "conversations": [
            {
                "input": [
                    "TV_series"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Episode"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "A Love of a Lifetime"
                }
            },
            {
                "input": [
                    "TV_series",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Air_Date"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "id": "spider_483",
        "conversations": [
            {
                "input": [
                    "TV_series"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Episode"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "A Love of a Lifetime"
                }
            },
            {
                "input": [
                    "TV_series",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Air_Date"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "id": "spider_484",
        "conversations": [
            {
                "input": [
                    "TV_series"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Episode"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "A Love of a Lifetime"
                }
            },
            {
                "input": [
                    "TV_series",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Weekly_Rank"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "id": "spider_485",
        "conversations": [
            {
                "input": [
                    "TV_series"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Episode"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "A Love of a Lifetime"
                }
            },
            {
                "input": [
                    "TV_series",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Weekly_Rank"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "id": "spider_486",
        "conversations": [
            {
                "input": [
                    "TV_Channel",
                    "TV_series"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "TV_Channel.id"
                    ],
                    "right_on": [
                        "TV_series.Channel"
                    ],
                    "how": "inner",
                    "lsuffix": "TV_Channel.",
                    "rsuffix": "TV_series."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "TV_series.Episode"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "A Love of a Lifetime"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "TV_Channel.series_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    {
        "id": "spider_487",
        "conversations": [
            {
                "input": [
                    "TV_Channel",
                    "TV_series"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "TV_Channel.id"
                    ],
                    "right_on": [
                        "TV_series.Channel"
                    ],
                    "how": "inner",
                    "lsuffix": "TV_Channel.",
                    "rsuffix": "TV_series."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "TV_series.Episode"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "A Love of a Lifetime"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "TV_Channel.series_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    {
        "id": "spider_488",
        "conversations": [
            {
                "input": [
                    "TV_Channel",
                    "TV_series"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "TV_Channel.id"
                    ],
                    "right_on": [
                        "TV_series.Channel"
                    ],
                    "how": "inner",
                    "lsuffix": "TV_Channel.",
                    "rsuffix": "TV_series."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "TV_Channel.series_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Sky Radio"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "TV_series.Episode"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "id": "spider_489",
        "conversations": [
            {
                "input": [
                    "TV_Channel",
                    "TV_series"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "TV_Channel.id"
                    ],
                    "right_on": [
                        "TV_series.Channel"
                    ],
                    "how": "inner",
                    "lsuffix": "TV_Channel.",
                    "rsuffix": "TV_series."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "TV_Channel.series_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Sky Radio"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "TV_series.Episode"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "id": "spider_490",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Directed_by"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "Directed_by"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "id": "spider_491",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Directed_by"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "Directed_by"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "id": "spider_492",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Original_air_date"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Production_code",
                        "Channel"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
    },
    {
        "id": "spider_493",
        "conversations": [
            {
                "input": [
                    "Cartoon"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Original_air_date"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Production_code",
                        "Channel"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
    },
    {
        "id": "spider_494",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Hight_definition_TV"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "yes"
                }
            },
            {
                "input": [
                    "TV_Channel",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Package_Option",
                        "series_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
    },
    {
        "id": "spider_495",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Hight_definition_TV"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "yes"
                }
            },
            {
                "input": [
                    "TV_Channel",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Package_Option",
                        "series_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
    },
    {
        "id": "spider_496",
        "conversations": [
            {
                "input": [
                    "TV_Channel",
                    "Cartoon"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "TV_Channel.id"
                    ],
                    "right_on": [
                        "Cartoon.Channel"
                    ],
                    "how": "inner",
                    "lsuffix": "TV_Channel.",
                    "rsuffix": "Cartoon."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Cartoon.Written_by"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Todd Casey"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "TV_Channel.Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "id": "spider_497",
        "conversations": [
            {
                "input": [
                    "TV_Channel",
                    "Cartoon"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "TV_Channel.id"
                    ],
                    "right_on": [
                        "Cartoon.Channel"
                    ],
                    "how": "inner",
                    "lsuffix": "TV_Channel.",
                    "rsuffix": "Cartoon."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Cartoon.Written_by"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Todd Casey"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "TV_Channel.Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "id": "spider_498",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Language"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "English"
                }
            },
            {
                "input": [
                    "TV_Channel",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Pixel_aspect_ratio_PAR",
                        "Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
    },
    {
        "id": "spider_499",
        "conversations": [
            {
                "input": [
                    "TV_Channel"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Language"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "English"
                }
            },
            {
                "input": [
                    "TV_Channel",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Pixel_aspect_ratio_PAR",
                        "Country"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
    },
    {
        "id": "spider_500",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM poker_player"
    },
    {
        "id": "spider_501",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM poker_player"
    },
    {
        "id": "spider_502",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Earnings"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Earnings"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "id": "spider_503",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Earnings"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Earnings"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "id": "spider_504",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Final_Table_Made",
                        "Best_Finish"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
    },
    {
        "id": "spider_505",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Final_Table_Made",
                        "Best_Finish"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
    },
    {
        "id": "spider_506",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Earnings": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(Earnings) FROM poker_player"
    },
    {
        "id": "spider_507",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Earnings": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(Earnings) FROM poker_player"
    },
    {
        "id": "spider_508",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Earnings"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Money_Rank"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "id": "spider_509",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Earnings"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Money_Rank"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "id": "spider_510",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Earnings"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 200000.0
                }
            },
            {
                "input": [
                    "poker_player",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Final_Table_Made": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    {
        "id": "spider_511",
        "conversations": [
            {
                "input": [
                    "poker_player"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Earnings"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 200000.0
                }
            },
            {
                "input": [
                    "poker_player",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Final_Table_Made": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    {
        "id": "spider_512",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "people.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "id": "spider_513",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "people.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "id": "spider_514",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "poker_player.Earnings"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 300000.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "people.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    {
        "id": "spider_515",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "poker_player.Earnings"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 300000.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "people.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    {
        "id": "spider_516",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "poker_player.Final_Table_Made"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "people.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "id": "spider_517",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "poker_player.Final_Table_Made"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "people.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "id": "spider_518",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "poker_player.Earnings"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "people.Birth_Date"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    {
        "id": "spider_519",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "poker_player.Earnings"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "people.Birth_Date"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    {
        "id": "spider_520",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "people.Height"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "poker_player.Money_Rank"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "id": "spider_521",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "people.Height"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "poker_player.Money_Rank"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "id": "spider_522",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "people.Height"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 200.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "poker_player.Earnings": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    {
        "id": "spider_523",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "people.Height"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 200.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "poker_player.Earnings": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    {
        "id": "spider_524",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "poker_player.Earnings"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "people.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "id": "spider_525",
        "conversations": [
            {
                "input": [
                    "people",
                    "poker_player"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "people.People_ID"
                    ],
                    "right_on": [
                        "poker_player.People_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "people.",
                    "rsuffix": "poker_player."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "poker_player.Earnings"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "people.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "id": "spider_526",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Nationality"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Nationality",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "id": "spider_527",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Nationality"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Nationality",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "id": "spider_528",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Nationality"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Nationality"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "id": "spider_529",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Nationality"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Nationality"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "id": "spider_530",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Nationality"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Nationality"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    {
        "id": "spider_531",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Nationality"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Nationality"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    {
        "id": "spider_532",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Name"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Birth_Date"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
        "id": "spider_533",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Name"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Birth_Date"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
        "id": "spider_534",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Nationality"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "Russia"
                }
            },
            {
                "input": [
                    "people",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    {
        "id": "spider_535",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Nationality"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "Russia"
                }
            },
            {
                "input": [
                    "people",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    {
        "id": "spider_536",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Nationality": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT Nationality) FROM people"
    },
    {
        "id": "spider_537",
        "conversations": [
            {
                "input": [
                    "people"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Nationality": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT Nationality) FROM people"
    },
    {
        "id": "spider_538",
        "conversations": [
            {
                "input": [
                    "AREA_CODE_STATE"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM area_code_state"
    },
    {
        "id": "spider_539",
        "conversations": [
            {
                "input": [
                    "CONTESTANTS"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "contestant_name"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "contestant_number",
                        "contestant_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"
    },
    {
        "id": "spider_540",
        "conversations": [
            {
                "input": [
                    "VOTES"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "vote_id",
                        "phone_number",
                        "state"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT vote_id ,  phone_number ,  state FROM votes"
    },
    {
        "id": "spider_541",
        "conversations": [
            {
                "input": [
                    "AREA_CODE_STATE"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "area_code": [
                            "min"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"
    },
    {
        "id": "spider_542",
        "conversations": [
            {
                "input": [
                    "VOTES"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "state"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "CA"
                }
            },
            {
                "input": [
                    "VOTES",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "created": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(created) FROM votes WHERE state  =  'CA'"
    },
    {
        "id": "spider_543",
        "conversations": [
            {
                "input": [
                    "CONTESTANTS"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "contestant_name"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "Jessie Alloway"
                }
            },
            {
                "input": [
                    "CONTESTANTS",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "contestant_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"
    },
    {
        "id": "spider_544",
        "conversations": [
            {
                "input": [
                    "VOTES"
                ],
                "output": [
                    "df_drop_duplicates_0"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "state",
                        "created"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "state",
                        "created"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT state ,  created FROM votes"
    },
    {
        "id": "spider_545",
        "conversations": [
            {
                "input": [
                    "VOTES"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "state"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "NY"
                        },
                        {
                            "column": [
                                "state"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "CA"
                        }
                    ]
                }
            },
            {
                "input": [
                    "VOTES",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"
    },
    {
        "id": "spider_546",
        "conversations": [
            {
                "input": [
                    "AREA_CODE_STATE",
                    "VOTES"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "AREA_CODE_STATE.state"
                    ],
                    "right_on": [
                        "VOTES.state"
                    ],
                    "how": "inner",
                    "lsuffix": "AREA_CODE_STATE.",
                    "rsuffix": "VOTES."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "AREA_CODE_STATE.area_code"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "AREA_CODE_STATE.area_code"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_547",
        "conversations": [
            {
                "input": [
                    "CONTESTANTS",
                    "VOTES"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "CONTESTANTS.contestant_number"
                    ],
                    "right_on": [
                        "VOTES.contestant_number"
                    ],
                    "how": "inner",
                    "lsuffix": "CONTESTANTS.",
                    "rsuffix": "VOTES."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "CONTESTANTS.contestant_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Tabatha Gehling"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "VOTES.created",
                        "VOTES.state",
                        "VOTES.phone_number"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"
    },
    {
        "id": "spider_548",
        "conversations": [
            {
                "input": [
                    "CONTESTANTS"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "contestant_name"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "al"
                }
            },
            {
                "input": [
                    "CONTESTANTS",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "contestant_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select contestant_name from contestants where contestant_name like \"%al%\""
    },
    {
        "id": "spider_549",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "IndepYear"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1950.0
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950"
    },
    {
        "id": "spider_550",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "IndepYear"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1950.0
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950"
    },
    {
        "id": "spider_551",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "GovernmentForm"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Republic"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
    },
    {
        "id": "spider_552",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "GovernmentForm"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Republic"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
    },
    {
        "id": "spider_553",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Region"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Caribbean"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "SurfaceArea": [
                            "sum"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    {
        "id": "spider_554",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Region"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Caribbean"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "SurfaceArea": [
                            "sum"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    {
        "id": "spider_555",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Anguilla"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Continent"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    {
        "id": "spider_556",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Anguilla"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Continent"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    {
        "id": "spider_557",
        "conversations": [
            {
                "input": [
                    "country",
                    "city"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "city.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "city."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "city.Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kabul"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country.Region"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    {
        "id": "spider_558",
        "conversations": [
            {
                "input": [
                    "country",
                    "city"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "city.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "city."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "city.Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kabul"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country.Region"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    {
        "id": "spider_559",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "country.Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aruba"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_sort_values_3"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "countrylanguage.Percentage"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "countrylanguage.Language"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "id": "spider_560",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "country.Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aruba"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_sort_values_3"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "countrylanguage.Percentage"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "countrylanguage.Language"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "id": "spider_561",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Brazil"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Population",
                        "LifeExpectancy"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    {
        "id": "spider_562",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Brazil"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Population",
                        "LifeExpectancy"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    {
        "id": "spider_563",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Angola"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Population",
                        "Region"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
    },
    {
        "id": "spider_564",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Angola"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Population",
                        "Region"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
    },
    {
        "id": "spider_565",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Region"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Central Africa"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "LifeExpectancy": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
    },
    {
        "id": "spider_566",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Region"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Central Africa"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "LifeExpectancy": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
    },
    {
        "id": "spider_567",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Asia"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "LifeExpectancy"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "id": "spider_568",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Asia"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "LifeExpectancy"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "id": "spider_569",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Asia"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Population": [
                            "sum"
                        ],
                        "GNP": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
    },
    {
        "id": "spider_570",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Asia"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Population": [
                            "sum"
                        ],
                        "GNP": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
    },
    {
        "id": "spider_571",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Africa"
                        },
                        {
                            "column": [
                                "GovernmentForm"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Republic"
                        }
                    ]
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "LifeExpectancy": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
    },
    {
        "id": "spider_572",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Africa"
                        },
                        {
                            "column": [
                                "GovernmentForm"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Republic"
                        }
                    ]
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "LifeExpectancy": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
    },
    {
        "id": "spider_573",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Asia"
                        },
                        {
                            "column": [
                                "Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Europe"
                        }
                    ]
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "SurfaceArea": [
                            "sum"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    {
        "id": "spider_574",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Asia"
                        },
                        {
                            "column": [
                                "Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Europe"
                        }
                    ]
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "SurfaceArea": [
                            "sum"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    {
        "id": "spider_575",
        "conversations": [
            {
                "input": [
                    "city"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "District"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Gelderland"
                }
            },
            {
                "input": [
                    "city",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Population": [
                            "sum"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    {
        "id": "spider_576",
        "conversations": [
            {
                "input": [
                    "city"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "District"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Gelderland"
                }
            },
            {
                "input": [
                    "city",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Population": [
                            "sum"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    {
        "id": "spider_577",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "GovernmentForm"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "US Territory"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "GNP": [
                            "mean"
                        ],
                        "Population": [
                            "sum"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    {
        "id": "spider_578",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "GovernmentForm"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "US Territory"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "GNP": [
                            "mean"
                        ],
                        "Population": [
                            "sum"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    {
        "id": "spider_579",
        "conversations": [
            {
                "input": [
                    "countrylanguage"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Language": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "id": "spider_580",
        "conversations": [
            {
                "input": [
                    "countrylanguage"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Language": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "id": "spider_581",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Africa"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "GovernmentForm": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
    },
    {
        "id": "spider_582",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Africa"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "GovernmentForm": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
    },
    {
        "id": "spider_583",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "country.Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aruba"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "countrylanguage.Language": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
    },
    {
        "id": "spider_584",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "country.Name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Aruba"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "countrylanguage.Language": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
    },
    {
        "id": "spider_585",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "country.Name"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Afghanistan"
                        },
                        {
                            "column": [
                                "countrylanguage.IsOfficial"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "T"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    {
        "id": "spider_586",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "country.Name"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Afghanistan"
                        },
                        {
                            "column": [
                                "countrylanguage.IsOfficial"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "T"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    {
        "id": "spider_587",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country.Name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "id": "spider_588",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country.Name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "id": "spider_589",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country.Continent"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country.Continent"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "id": "spider_590",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country.Continent"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country.Continent"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "id": "spider_591",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "countrylanguage.Language"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Chinese"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "country.Continent": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    {
        "id": "spider_592",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "countrylanguage.Language"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Chinese"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "country.Continent": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    {
        "id": "spider_593",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "countrylanguage.Language"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "English"
                        },
                        {
                            "column": [
                                "countrylanguage.Language"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Dutch"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_drop_duplicates_3"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "country.Region"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country.Region"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    {
        "id": "spider_594",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "countrylanguage.Language"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "English"
                        },
                        {
                            "column": [
                                "countrylanguage.Language"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Dutch"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_drop_duplicates_3"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "country.Region"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "country.Region"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    {
        "id": "spider_595",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "country.Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Asia"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_groupby_agg_3"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "countrylanguage.Language"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_3"
                ],
                "output": [
                    "df_sort_values_4"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "countrylanguage.Language"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "id": "spider_596",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "country.Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Asia"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_groupby_agg_3"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "countrylanguage.Language"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_3"
                ],
                "output": [
                    "df_sort_values_4"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "countrylanguage.Language"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "id": "spider_597",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "country.GovernmentForm"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Republic"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_groupby_agg_3"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "countrylanguage.Language"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_3"
                ],
                "output": [
                    "df_bool_4"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_3",
                    "df_bool_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "countrylanguage.Language"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    {
        "id": "spider_598",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "country.GovernmentForm"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Republic"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_groupby_agg_3"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "countrylanguage.Language"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_3"
                ],
                "output": [
                    "df_bool_4"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_3",
                    "df_bool_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "countrylanguage.Language"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    {
        "id": "spider_599",
        "conversations": [
            {
                "input": [
                    "city",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "city.CountryCode"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "city.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "countrylanguage.Language"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "English"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_sort_values_3"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "city.Population"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "city.Name",
                        "city.Population"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "id": "spider_600",
        "conversations": [
            {
                "input": [
                    "city",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "city.CountryCode"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "city.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "countrylanguage.Language"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "English"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_sort_values_3"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "city.Population"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "city.Name",
                        "city.Population"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "id": "spider_601",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Asia"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "SurfaceArea"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Population",
                        "LifeExpectancy"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "id": "spider_602",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Asia"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "SurfaceArea"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Population",
                        "LifeExpectancy"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "id": "spider_603",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "country.HeadOfState"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Beatrix"
                        },
                        {
                            "column": [
                                "countrylanguage.IsOfficial"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "T"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "countrylanguage.Language"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "id": "spider_604",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "country.HeadOfState"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Beatrix"
                        },
                        {
                            "column": [
                                "countrylanguage.IsOfficial"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "T"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "countrylanguage.Language"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "id": "spider_605",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "country.IndepYear"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 1930.0
                        },
                        {
                            "column": [
                                "countrylanguage.IsOfficial"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "T"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "countrylanguage.Language": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    {
        "id": "spider_606",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "country.IndepYear"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 1930.0
                        },
                        {
                            "column": [
                                "countrylanguage.IsOfficial"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "T"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "countrylanguage.Language": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    {
        "id": "spider_607",
        "conversations": [
            {
                "input": [
                    "countrylanguage"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Language"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "English"
                }
            },
            {
                "input": [
                    "countrylanguage",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_drop_duplicates_2"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "CountryCode"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "CountryCode"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
    },
    {
        "id": "spider_608",
        "conversations": [
            {
                "input": [
                    "countrylanguage"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Language"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "English"
                }
            },
            {
                "input": [
                    "countrylanguage",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_drop_duplicates_2"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "CountryCode"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "CountryCode"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
    },
    {
        "id": "spider_609",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "city"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "city.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "city."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "countrylanguage.IsOfficial"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "t"
                        },
                        {
                            "column": [
                                "countrylanguage.Language"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "chinese"
                        },
                        {
                            "column": [
                                "country.Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "asia"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_drop_duplicates_4"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "city.Name"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "city.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\""
    },
    {
        "id": "spider_610",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "city"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "city.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "city."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "countrylanguage.IsOfficial"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "T"
                        },
                        {
                            "column": [
                                "countrylanguage.Language"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Chinese"
                        },
                        {
                            "column": [
                                "country.Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Asia"
                        }
                    ]
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_3"
                ],
                "output": [
                    "df_drop_duplicates_4"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "city.Name"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_4"
                ],
                "output": [
                    "df_filter_5"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "city.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""
    },
    {
        "id": "spider_611",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Population"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "SurfaceArea",
                        "IndepYear"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "id": "spider_612",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Population"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "SurfaceArea",
                        "IndepYear"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "id": "spider_613",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "SurfaceArea"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Population",
                        "HeadOfState"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "id": "spider_614",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "SurfaceArea"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "Population",
                        "HeadOfState"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "id": "spider_615",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ],
                        "countrylanguage.Language": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(countrylanguage.Language,count)",
                        "country.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "id": "spider_616",
        "conversations": [
            {
                "input": [
                    "country",
                    "countrylanguage"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "country.Code"
                    ],
                    "right_on": [
                        "countrylanguage.CountryCode"
                    ],
                    "how": "inner",
                    "lsuffix": "country.",
                    "rsuffix": "countrylanguage."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "country.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ],
                        "countrylanguage.Language": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 2.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(countrylanguage.Language,count)",
                        "country.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "id": "spider_617",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "GovernmentForm"
                    ],
                    "agg_args": {
                        "LifeExpectancy": [
                            "mean"
                        ],
                        "Population": [
                            "sum"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(LifeExpectancy,mean)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 72.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(Population,sum)",
                        "GovernmentForm"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    {
        "id": "spider_618",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "GovernmentForm"
                    ],
                    "agg_args": {
                        "LifeExpectancy": [
                            "mean"
                        ],
                        "Population": [
                            "sum"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(LifeExpectancy,mean)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 72.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(Population,sum)",
                        "GovernmentForm"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    {
        "id": "spider_619",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Continent"
                    ],
                    "agg_args": {
                        "LifeExpectancy": [
                            "mean"
                        ],
                        "Population": [
                            "sum"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(LifeExpectancy,mean)"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 72.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(Population,sum)",
                        "(LifeExpectancy,mean)",
                        "Continent"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    {
        "id": "spider_620",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Continent"
                    ],
                    "agg_args": {
                        "LifeExpectancy": [
                            "mean"
                        ],
                        "Population": [
                            "sum"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(LifeExpectancy,mean)"
                    ],
                    "index": "null",
                    "condition": "<",
                    "value": 72.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(Population,sum)",
                        "(LifeExpectancy,mean)",
                        "Continent"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    {
        "id": "spider_621",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "SurfaceArea"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "SurfaceArea"
                    ],
                    "index": [
                        5
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "id": "spider_622",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "SurfaceArea"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name",
                        "SurfaceArea"
                    ],
                    "index": [
                        5
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "id": "spider_623",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Population"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": [
                        3
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "id": "spider_624",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Population"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": [
                        3
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "id": "spider_625",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Population"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": [
                        3
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
        "id": "spider_626",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Population"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": [
                        3
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
        "id": "spider_627",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Asia"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
    },
    {
        "id": "spider_628",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Continent"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Asia"
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
    },
    {
        "id": "spider_629",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Europe"
                        },
                        {
                            "column": [
                                "Population"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "80000"
                        }
                    ]
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    {
        "id": "spider_630",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Europe"
                        },
                        {
                            "column": [
                                "Population"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "80000"
                        }
                    ]
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    {
        "id": "spider_631",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "north america"
                        },
                        {
                            "column": [
                                "SurfaceArea"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 3000.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Population": [
                            "sum"
                        ],
                        "SurfaceArea": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
    },
    {
        "id": "spider_632",
        "conversations": [
            {
                "input": [
                    "country"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Continent"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "north america"
                        },
                        {
                            "column": [
                                "SurfaceArea"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 3000.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "country",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Population": [
                            "sum"
                        ],
                        "SurfaceArea": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
    },
    {
        "id": "spider_633",
        "conversations": [
            {
                "input": [
                    "city"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Population"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 160000.0
                        },
                        {
                            "column": [
                                "Population"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 900000.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "city",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"
    },
    {
        "id": "spider_634",
        "conversations": [
            {
                "input": [
                    "city"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "and": [
                        {
                            "column": [
                                "Population"
                            ],
                            "index": "null",
                            "condition": ">",
                            "value": 160000.0
                        },
                        {
                            "column": [
                                "Population"
                            ],
                            "index": "null",
                            "condition": "<",
                            "value": 900000.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "city",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "select name from city where population between 160000 and 900000"
    },
    {
        "id": "spider_635",
        "conversations": [
            {
                "input": [
                    "countrylanguage"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Language"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Language"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_636",
        "conversations": [
            {
                "input": [
                    "countrylanguage"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Language"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Language"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_637",
        "conversations": [
            {
                "input": [
                    "countrylanguage"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Language"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Spanish"
                }
            },
            {
                "input": [
                    "countrylanguage",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_groupby_agg_2"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "CountryCode"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ],
                        "Percentage": [
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "(Percentage,max)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "id": "spider_638",
        "conversations": [
            {
                "input": [
                    "countrylanguage"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Language"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Spanish"
                }
            },
            {
                "input": [
                    "countrylanguage",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_groupby_agg_2"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "CountryCode"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ],
                        "Percentage": [
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "(all,count)",
                        "(Percentage,max)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "id": "spider_639",
        "conversations": [
            {
                "input": [
                    "countrylanguage"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Language"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Spanish"
                }
            },
            {
                "input": [
                    "countrylanguage",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_groupby_agg_2"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "CountryCode"
                    ],
                    "agg_args": {
                        "Percentage": [
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "CountryCode",
                        "(Percentage,max)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "id": "spider_640",
        "conversations": [
            {
                "input": [
                    "countrylanguage"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Language"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Spanish"
                }
            },
            {
                "input": [
                    "countrylanguage",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_groupby_agg_2"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "CountryCode"
                    ],
                    "agg_args": {
                        "Percentage": [
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "CountryCode",
                        "(Percentage,max)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "id": "spider_641",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM conductor"
    },
    {
        "id": "spider_642",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM conductor"
    },
    {
        "id": "spider_643",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
        "id": "spider_644",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Age"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
        "id": "spider_645",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Nationality"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "USA"
                }
            },
            {
                "input": [
                    "conductor",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
        "id": "spider_646",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Nationality"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "USA"
                }
            },
            {
                "input": [
                    "conductor",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
        "id": "spider_647",
        "conversations": [
            {
                "input": [
                    "orchestra"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Year_of_Founded"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Record_Company"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "id": "spider_648",
        "conversations": [
            {
                "input": [
                    "orchestra"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Year_of_Founded"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Record_Company"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "id": "spider_649",
        "conversations": [
            {
                "input": [
                    "show"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Attendance": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(Attendance) FROM SHOW"
    },
    {
        "id": "spider_650",
        "conversations": [
            {
                "input": [
                    "show"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Attendance": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(Attendance) FROM SHOW"
    },
    {
        "id": "spider_651",
        "conversations": [
            {
                "input": [
                    "performance"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Type"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "Live final"
                }
            },
            {
                "input": [
                    "performance",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Share": [
                            "min"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    {
        "id": "spider_652",
        "conversations": [
            {
                "input": [
                    "performance"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Type"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "Live final"
                }
            },
            {
                "input": [
                    "performance",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Share": [
                            "min"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    {
        "id": "spider_653",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Nationality": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
        "id": "spider_654",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "Nationality": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
        "id": "spider_655",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Year_of_Work"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "id": "spider_656",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Year_of_Work"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "id": "spider_657",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Year_of_Work"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "id": "spider_658",
        "conversations": [
            {
                "input": [
                    "conductor"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Year_of_Work"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "id": "spider_659",
        "conversations": [
            {
                "input": [
                    "conductor",
                    "orchestra"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "conductor.Conductor_ID"
                    ],
                    "right_on": [
                        "orchestra.Conductor_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "conductor.",
                    "rsuffix": "orchestra."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "conductor.Name",
                        "orchestra.Orchestra"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
        "id": "spider_660",
        "conversations": [
            {
                "input": [
                    "conductor",
                    "orchestra"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "conductor.Conductor_ID"
                    ],
                    "right_on": [
                        "orchestra.Conductor_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "conductor.",
                    "rsuffix": "orchestra."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "conductor.Name",
                        "orchestra.Orchestra"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
        "id": "spider_661",
        "conversations": [
            {
                "input": [
                    "conductor",
                    "orchestra"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "conductor.Conductor_ID"
                    ],
                    "right_on": [
                        "orchestra.Conductor_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "conductor.",
                    "rsuffix": "orchestra."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "orchestra.Year_of_Founded"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 2008.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "conductor.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
    },
    {
        "id": "spider_662",
        "conversations": [
            {
                "input": [
                    "conductor",
                    "orchestra"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "conductor.Conductor_ID"
                    ],
                    "right_on": [
                        "orchestra.Conductor_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "conductor.",
                    "rsuffix": "orchestra."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "orchestra.Year_of_Founded"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 2008.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "conductor.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
    },
    {
        "id": "spider_663",
        "conversations": [
            {
                "input": [
                    "orchestra"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Record_Company"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Record_Company",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "id": "spider_664",
        "conversations": [
            {
                "input": [
                    "orchestra"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Record_Company"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Record_Company",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "id": "spider_665",
        "conversations": [
            {
                "input": [
                    "orchestra"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Major_Record_Format"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Major_Record_Format"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    {
        "id": "spider_666",
        "conversations": [
            {
                "input": [
                    "orchestra"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Major_Record_Format"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Major_Record_Format"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    {
        "id": "spider_667",
        "conversations": [
            {
                "input": [
                    "orchestra"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Record_Company"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Record_Company"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "id": "spider_668",
        "conversations": [
            {
                "input": [
                    "orchestra"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Record_Company"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Record_Company"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "id": "spider_669",
        "conversations": [
            {
                "input": [
                    "orchestra"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Major_Record_Format"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "CD"
                        },
                        {
                            "column": [
                                "Major_Record_Format"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "DVD"
                        }
                    ]
                }
            },
            {
                "input": [
                    "orchestra",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    {
        "id": "spider_670",
        "conversations": [
            {
                "input": [
                    "orchestra"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Major_Record_Format"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "CD"
                        },
                        {
                            "column": [
                                "Major_Record_Format"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "DVD"
                        }
                    ]
                }
            },
            {
                "input": [
                    "orchestra",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    {
        "id": "spider_671",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Highschooler"
    },
    {
        "id": "spider_672",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Highschooler"
    },
    {
        "id": "spider_673",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "name",
                        "grade"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  grade FROM Highschooler"
    },
    {
        "id": "spider_674",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "name",
                        "grade"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  grade FROM Highschooler"
    },
    {
        "id": "spider_675",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "grade"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT grade FROM Highschooler"
    },
    {
        "id": "spider_676",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "grade"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT grade FROM Highschooler"
    },
    {
        "id": "spider_677",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kyle"
                }
            },
            {
                "input": [
                    "Highschooler",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "grade"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "id": "spider_678",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kyle"
                }
            },
            {
                "input": [
                    "Highschooler",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "grade"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "id": "spider_679",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "grade"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 10.0
                }
            },
            {
                "input": [
                    "Highschooler",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
        "id": "spider_680",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "grade"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 10.0
                }
            },
            {
                "input": [
                    "Highschooler",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
        "id": "spider_681",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kyle"
                }
            },
            {
                "input": [
                    "Highschooler",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "id": "spider_682",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kyle"
                }
            },
            {
                "input": [
                    "Highschooler",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "ID"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "id": "spider_683",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "grade"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 9.0
                        },
                        {
                            "column": [
                                "grade"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 10.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "Highschooler",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    {
        "id": "spider_684",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "grade"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 9.0
                        },
                        {
                            "column": [
                                "grade"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 10.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "Highschooler",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_1"
                ],
                "output": [
                    "df_statics_column_2"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    {
        "id": "spider_685",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "grade"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "grade",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
    },
    {
        "id": "spider_686",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "grade"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "grade",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
    },
    {
        "id": "spider_687",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "grade"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "grade"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_688",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "grade"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "grade"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_689",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "grade"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 4.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "grade"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
    },
    {
        "id": "spider_690",
        "conversations": [
            {
                "input": [
                    "Highschooler"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "grade"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">=",
                    "value": 4.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "grade"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
    },
    {
        "id": "spider_691",
        "conversations": [
            {
                "input": [
                    "Friend"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "student_id"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "student_id",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
    },
    {
        "id": "spider_692",
        "conversations": [
            {
                "input": [
                    "Friend"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "student_id"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "student_id",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
    },
    {
        "id": "spider_693",
        "conversations": [
            {
                "input": [
                    "Friend",
                    "Highschooler"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Friend.student_id"
                    ],
                    "right_on": [
                        "Highschooler.ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Friend.",
                    "rsuffix": "Highschooler."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Highschooler"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Friend.friend_id"
                    ],
                    "right_on": [
                        "Highschooler.ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Highschooler."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Highschooler.name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kyle"
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Highschooler.name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "id": "spider_694",
        "conversations": [
            {
                "input": [
                    "Friend",
                    "Highschooler"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Friend.student_id"
                    ],
                    "right_on": [
                        "Highschooler.ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Friend.",
                    "rsuffix": "Highschooler."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Highschooler"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Friend.friend_id"
                    ],
                    "right_on": [
                        "Highschooler.ID"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Highschooler."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Highschooler.name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kyle"
                }
            },
            {
                "input": [
                    "df_join_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Highschooler.name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "id": "spider_695",
        "conversations": [
            {
                "input": [
                    "Friend",
                    "Highschooler"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Friend.student_id"
                    ],
                    "right_on": [
                        "Highschooler.ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Friend.",
                    "rsuffix": "Highschooler."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Highschooler.name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kyle"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "id": "spider_696",
        "conversations": [
            {
                "input": [
                    "Friend",
                    "Highschooler"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Friend.student_id"
                    ],
                    "right_on": [
                        "Highschooler.ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Friend.",
                    "rsuffix": "Highschooler."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Highschooler.name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kyle"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "id": "spider_697",
        "conversations": [
            {
                "input": [
                    "Likes"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "student_id"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "student_id",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
    },
    {
        "id": "spider_698",
        "conversations": [
            {
                "input": [
                    "Likes"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "student_id"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "student_id",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
    },
    {
        "id": "spider_699",
        "conversations": [
            {
                "input": [
                    "Likes",
                    "Highschooler"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Likes.student_id"
                    ],
                    "right_on": [
                        "Highschooler.ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Likes.",
                    "rsuffix": "Highschooler."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Highschooler.name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kyle"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "id": "spider_700",
        "conversations": [
            {
                "input": [
                    "Likes",
                    "Highschooler"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Likes.student_id"
                    ],
                    "right_on": [
                        "Highschooler.ID"
                    ],
                    "how": "inner",
                    "lsuffix": "Likes.",
                    "rsuffix": "Highschooler."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Highschooler.name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Kyle"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_statics_column_3"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "id": "spider_701",
        "conversations": [
            {
                "input": [
                    "Breeds",
                    "Dogs"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Breeds.breed_code"
                    ],
                    "right_on": [
                        "Dogs.breed_code"
                    ],
                    "how": "inner",
                    "lsuffix": "Breeds.",
                    "rsuffix": "Dogs."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Breeds.breed_name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Breeds.breed_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_702",
        "conversations": [
            {
                "input": [
                    "Breeds",
                    "Dogs"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Breeds.breed_code"
                    ],
                    "right_on": [
                        "Dogs.breed_code"
                    ],
                    "how": "inner",
                    "lsuffix": "Breeds.",
                    "rsuffix": "Dogs."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Breeds.breed_name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_sort_values_2"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Breeds.breed_name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "id": "spider_703",
        "conversations": [
            {
                "input": [
                    "Treatments",
                    "Professionals"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Treatments.professional_id"
                    ],
                    "right_on": [
                        "Professionals.professional_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Treatments.",
                    "rsuffix": "Professionals."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Treatments.date_of_treatment",
                        "Professionals.first_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "id": "spider_704",
        "conversations": [
            {
                "input": [
                    "Treatments",
                    "Professionals"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Treatments.professional_id"
                    ],
                    "right_on": [
                        "Professionals.professional_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Treatments.",
                    "rsuffix": "Professionals."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Treatments.date_of_treatment",
                        "Professionals.first_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "id": "spider_705",
        "conversations": [
            {
                "input": [
                    "Treatments",
                    "Treatment_Types"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Treatments.treatment_type_code"
                    ],
                    "right_on": [
                        "Treatment_Types.treatment_type_code"
                    ],
                    "how": "inner",
                    "lsuffix": "Treatments.",
                    "rsuffix": "Treatment_Types."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Treatments.cost_of_treatment",
                        "Treatment_Types.treatment_type_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
    },
    {
        "id": "spider_706",
        "conversations": [
            {
                "input": [
                    "Treatments",
                    "Treatment_Types"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Treatments.treatment_type_code"
                    ],
                    "right_on": [
                        "Treatment_Types.treatment_type_code"
                    ],
                    "how": "inner",
                    "lsuffix": "Treatments.",
                    "rsuffix": "Treatment_Types."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Treatments.cost_of_treatment",
                        "Treatment_Types.treatment_type_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
    },
    {
        "id": "spider_707",
        "conversations": [
            {
                "input": [
                    "Owners",
                    "Dogs"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Owners.owner_id"
                    ],
                    "right_on": [
                        "Dogs.owner_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Owners.",
                    "rsuffix": "Dogs."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Owners.first_name",
                        "Owners.last_name",
                        "Dogs.size_code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "id": "spider_708",
        "conversations": [
            {
                "input": [
                    "Owners",
                    "Dogs"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Owners.owner_id"
                    ],
                    "right_on": [
                        "Dogs.owner_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Owners.",
                    "rsuffix": "Dogs."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Owners.first_name",
                        "Owners.last_name",
                        "Dogs.size_code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "id": "spider_709",
        "conversations": [
            {
                "input": [
                    "Owners",
                    "Dogs"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Owners.owner_id"
                    ],
                    "right_on": [
                        "Dogs.owner_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Owners.",
                    "rsuffix": "Dogs."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Owners.first_name",
                        "Dogs.name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "id": "spider_710",
        "conversations": [
            {
                "input": [
                    "Owners",
                    "Dogs"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Owners.owner_id"
                    ],
                    "right_on": [
                        "Dogs.owner_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Owners.",
                    "rsuffix": "Dogs."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Owners.first_name",
                        "Dogs.name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "id": "spider_711",
        "conversations": [
            {
                "input": [
                    "Owners",
                    "Dogs"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Owners.owner_id"
                    ],
                    "right_on": [
                        "Dogs.owner_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Owners.",
                    "rsuffix": "Dogs."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Owners.state"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Virginia"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Owners.first_name",
                        "Dogs.name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    {
        "id": "spider_712",
        "conversations": [
            {
                "input": [
                    "Owners",
                    "Dogs"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Owners.owner_id"
                    ],
                    "right_on": [
                        "Dogs.owner_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Owners.",
                    "rsuffix": "Dogs."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Owners.state"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "Virginia"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Owners.first_name",
                        "Dogs.name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    {
        "id": "spider_713",
        "conversations": [
            {
                "input": [
                    "Dogs",
                    "Treatments"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Dogs.dog_id"
                    ],
                    "right_on": [
                        "Treatments.dog_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Dogs.",
                    "rsuffix": "Treatments."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_drop_duplicates_1"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Dogs.date_arrived",
                        "Dogs.date_departed"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Dogs.date_arrived",
                        "Dogs.date_departed"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
        "id": "spider_714",
        "conversations": [
            {
                "input": [
                    "Dogs",
                    "Treatments"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Dogs.dog_id"
                    ],
                    "right_on": [
                        "Treatments.dog_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Dogs.",
                    "rsuffix": "Treatments."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_drop_duplicates_1"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Dogs.date_arrived",
                        "Dogs.date_departed"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Dogs.date_arrived",
                        "Dogs.date_departed"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
        "id": "spider_715",
        "conversations": [
            {
                "input": [
                    "Professionals"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "state"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Hawaii"
                        },
                        {
                            "column": [
                                "state"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Wisconsin"
                        }
                    ]
                }
            },
            {
                "input": [
                    "Professionals",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "email_address"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    {
        "id": "spider_716",
        "conversations": [
            {
                "input": [
                    "Professionals"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "state"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Hawaii"
                        },
                        {
                            "column": [
                                "state"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": "Wisconsin"
                        }
                    ]
                }
            },
            {
                "input": [
                    "Professionals",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "email_address"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    {
        "id": "spider_717",
        "conversations": [
            {
                "input": [
                    "Dogs"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "date_arrived",
                        "date_departed"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT date_arrived ,  date_departed FROM Dogs"
    },
    {
        "id": "spider_718",
        "conversations": [
            {
                "input": [
                    "Dogs"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "date_arrived",
                        "date_departed"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT date_arrived ,  date_departed FROM Dogs"
    },
    {
        "id": "spider_719",
        "conversations": [
            {
                "input": [
                    "Treatments"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "dog_id": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments"
    },
    {
        "id": "spider_720",
        "conversations": [
            {
                "input": [
                    "Treatments"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "dog_id": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments"
    },
    {
        "id": "spider_721",
        "conversations": [
            {
                "input": [
                    "Treatments"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "professional_id": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments"
    },
    {
        "id": "spider_722",
        "conversations": [
            {
                "input": [
                    "Treatments"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "professional_id": [
                            "nunique"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments"
    },
    {
        "id": "spider_723",
        "conversations": [
            {
                "input": [
                    "Professionals"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "city"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "West"
                }
            },
            {
                "input": [
                    "Professionals",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "role_code",
                        "street",
                        "city",
                        "state"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "id": "spider_724",
        "conversations": [
            {
                "input": [
                    "Professionals"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "city"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "West"
                }
            },
            {
                "input": [
                    "Professionals",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "role_code",
                        "street",
                        "city",
                        "state"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "id": "spider_725",
        "conversations": [
            {
                "input": [
                    "Owners"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "state"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "North"
                }
            },
            {
                "input": [
                    "Owners",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "last_name",
                        "email_address"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "id": "spider_726",
        "conversations": [
            {
                "input": [
                    "Owners"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "state"
                    ],
                    "index": "null",
                    "condition": "contains",
                    "value": "North"
                }
            },
            {
                "input": [
                    "Owners",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "first_name",
                        "last_name",
                        "email_address"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "id": "spider_727",
        "conversations": [
            {
                "input": [
                    "Treatments"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "date_of_treatment"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "cost_of_treatment"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "id": "spider_728",
        "conversations": [
            {
                "input": [
                    "Treatments"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "date_of_treatment"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "cost_of_treatment"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "id": "spider_729",
        "conversations": [
            {
                "input": [
                    "Dogs"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "abandoned_yn"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "Dogs",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "name",
                        "age",
                        "weight"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
    },
    {
        "id": "spider_730",
        "conversations": [
            {
                "input": [
                    "Dogs"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "abandoned_yn"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "Dogs",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "name",
                        "age",
                        "weight"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
    },
    {
        "id": "spider_731",
        "conversations": [
            {
                "input": [
                    "Dogs"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "age": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(age) FROM Dogs"
    },
    {
        "id": "spider_732",
        "conversations": [
            {
                "input": [
                    "Dogs"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "age": [
                            "mean"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT avg(age) FROM Dogs"
    },
    {
        "id": "spider_733",
        "conversations": [
            {
                "input": [
                    "Dogs"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "age": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(age) FROM Dogs"
    },
    {
        "id": "spider_734",
        "conversations": [
            {
                "input": [
                    "Dogs"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "age": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(age) FROM Dogs"
    },
    {
        "id": "spider_735",
        "conversations": [
            {
                "input": [
                    "Charges"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "charge_type",
                        "charge_amount"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT charge_type ,  charge_amount FROM Charges"
    },
    {
        "id": "spider_736",
        "conversations": [
            {
                "input": [
                    "Charges"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "charge_type",
                        "charge_amount"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT charge_type ,  charge_amount FROM Charges"
    },
    {
        "id": "spider_737",
        "conversations": [
            {
                "input": [
                    "Charges"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "charge_amount": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(charge_amount) FROM Charges"
    },
    {
        "id": "spider_738",
        "conversations": [
            {
                "input": [
                    "Charges"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "charge_amount": [
                            "max"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT max(charge_amount) FROM Charges"
    },
    {
        "id": "spider_739",
        "conversations": [
            {
                "input": [
                    "Professionals"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "email_address",
                        "cell_number",
                        "home_phone"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
    },
    {
        "id": "spider_740",
        "conversations": [
            {
                "input": [
                    "Professionals"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "email_address",
                        "cell_number",
                        "home_phone"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
    },
    {
        "id": "spider_741",
        "conversations": [
            {
                "input": [
                    "Dogs"
                ],
                "output": [
                    "df_drop_duplicates_0"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "breed_code",
                        "size_code"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "breed_code",
                        "size_code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
    },
    {
        "id": "spider_742",
        "conversations": [
            {
                "input": [
                    "Dogs"
                ],
                "output": [
                    "df_drop_duplicates_0"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "breed_code",
                        "size_code"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "breed_code",
                        "size_code"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
    },
    {
        "id": "spider_743",
        "conversations": [
            {
                "input": [
                    "Professionals",
                    "Treatments"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Professionals.professional_id"
                    ],
                    "right_on": [
                        "Treatments.professional_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Professionals.",
                    "rsuffix": "Treatments."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Treatment_Types"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Treatments.treatment_type_code"
                    ],
                    "right_on": [
                        "Treatment_Types.treatment_type_code"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Treatment_Types."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_drop_duplicates_2"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Professionals.first_name",
                        "Treatment_Types.treatment_type_description"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Professionals.first_name",
                        "Treatment_Types.treatment_type_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    {
        "id": "spider_744",
        "conversations": [
            {
                "input": [
                    "Professionals",
                    "Treatments"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Professionals.professional_id"
                    ],
                    "right_on": [
                        "Treatments.professional_id"
                    ],
                    "how": "inner",
                    "lsuffix": "Professionals.",
                    "rsuffix": "Treatments."
                }
            },
            {
                "input": [
                    "df_join_0",
                    "Treatment_Types"
                ],
                "output": [
                    "df_join_1"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Treatments.treatment_type_code"
                    ],
                    "right_on": [
                        "Treatment_Types.treatment_type_code"
                    ],
                    "how": "inner",
                    "lsuffix": "",
                    "rsuffix": "Treatment_Types."
                }
            },
            {
                "input": [
                    "df_join_1"
                ],
                "output": [
                    "df_drop_duplicates_2"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "Professionals.first_name",
                        "Treatment_Types.treatment_type_description"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Professionals.first_name",
                        "Treatment_Types.treatment_type_description"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    {
        "id": "spider_745",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM singer"
    },
    {
        "id": "spider_746",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM singer"
    },
    {
        "id": "spider_747",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Net_Worth_Millions"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
        "id": "spider_748",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Net_Worth_Millions"
                    ],
                    "ascending": true
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
        "id": "spider_749",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Birth_Year",
                        "Citizenship"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Birth_Year ,  Citizenship FROM singer"
    },
    {
        "id": "spider_750",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_filter_0"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Birth_Year",
                        "Citizenship"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Birth_Year ,  Citizenship FROM singer"
    },
    {
        "id": "spider_751",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Citizenship"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "France"
                }
            },
            {
                "input": [
                    "singer",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\""
    },
    {
        "id": "spider_752",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Citizenship"
                    ],
                    "index": "null",
                    "condition": "!=",
                    "value": "France"
                }
            },
            {
                "input": [
                    "singer",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\""
    },
    {
        "id": "spider_753",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Birth_Year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 1948.0
                        },
                        {
                            "column": [
                                "Birth_Year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 1949.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "singer",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    {
        "id": "spider_754",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_bool_0"
                ],
                "command": "Bool",
                "command_args": {
                    "or": [
                        {
                            "column": [
                                "Birth_Year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 1948.0
                        },
                        {
                            "column": [
                                "Birth_Year"
                            ],
                            "index": "null",
                            "condition": "==",
                            "value": 1949.0
                        }
                    ]
                }
            },
            {
                "input": [
                    "singer",
                    "df_bool_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    {
        "id": "spider_755",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Net_Worth_Millions"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "id": "spider_756",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_sort_values_0"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "Net_Worth_Millions"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Name"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "id": "spider_757",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Citizenship"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Citizenship",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "id": "spider_758",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Citizenship"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Citizenship",
                        "(all,count)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "id": "spider_759",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Citizenship"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Citizenship"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "id": "spider_760",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Citizenship"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_sort_values_1"
                ],
                "command": "SortValues",
                "command_args": {
                    "by": [
                        "(all,count)"
                    ],
                    "ascending": false
                }
            },
            {
                "input": [
                    "df_sort_values_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Citizenship"
                    ],
                    "index": [
                        1
                    ],
                    "axis": 0,
                    "slice": false,
                    "type": "select"
                }
            }
        ],
        "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1"
    },
    {
        "id": "spider_761",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Citizenship"
                    ],
                    "agg_args": {
                        "Net_Worth_Millions": [
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Citizenship",
                        "(Net_Worth_Millions,max)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "id": "spider_762",
        "conversations": [
            {
                "input": [
                    "singer"
                ],
                "output": [
                    "df_groupby_agg_0"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "Citizenship"
                    ],
                    "agg_args": {
                        "Net_Worth_Millions": [
                            "max"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Citizenship",
                        "(Net_Worth_Millions,max)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "id": "spider_763",
        "conversations": [
            {
                "input": [
                    "singer",
                    "song"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer.Singer_ID"
                    ],
                    "right_on": [
                        "song.Singer_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "singer.",
                    "rsuffix": "song."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "song.Title",
                        "singer.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
        "id": "spider_764",
        "conversations": [
            {
                "input": [
                    "singer",
                    "song"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer.Singer_ID"
                    ],
                    "right_on": [
                        "song.Singer_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "singer.",
                    "rsuffix": "song."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_filter_1"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "song.Title",
                        "singer.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
        "id": "spider_765",
        "conversations": [
            {
                "input": [
                    "singer",
                    "song"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer.Singer_ID"
                    ],
                    "right_on": [
                        "song.Singer_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "singer.",
                    "rsuffix": "song."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "song.Sales"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 300000.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_drop_duplicates_3"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "singer.Name"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "singer.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    {
        "id": "spider_766",
        "conversations": [
            {
                "input": [
                    "singer",
                    "song"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer.Singer_ID"
                    ],
                    "right_on": [
                        "song.Singer_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "singer.",
                    "rsuffix": "song."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "song.Sales"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 300000.0
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "all"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            },
            {
                "input": [
                    "df_filter_2"
                ],
                "output": [
                    "df_drop_duplicates_3"
                ],
                "command": "DropDuplicates",
                "command_args": {
                    "subset": [
                        "singer.Name"
                    ],
                    "keep": "null"
                }
            },
            {
                "input": [
                    "df_drop_duplicates_3"
                ],
                "output": [
                    "df_filter_4"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "singer.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    {
        "id": "spider_767",
        "conversations": [
            {
                "input": [
                    "singer",
                    "song"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer.Singer_ID"
                    ],
                    "right_on": [
                        "song.Singer_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "singer.",
                    "rsuffix": "song."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "singer.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "singer.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    {
        "id": "spider_768",
        "conversations": [
            {
                "input": [
                    "singer",
                    "song"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer.Singer_ID"
                    ],
                    "right_on": [
                        "song.Singer_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "singer.",
                    "rsuffix": "song."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "singer.Name"
                    ],
                    "agg_args": {
                        "all": [
                            "count"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_bool_2"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "(all,count)"
                    ],
                    "index": "null",
                    "condition": ">",
                    "value": 1.0
                }
            },
            {
                "input": [
                    "df_groupby_agg_1",
                    "df_bool_2"
                ],
                "output": [
                    "df_filter_3"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "singer.Name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    {
        "id": "spider_769",
        "conversations": [
            {
                "input": [
                    "singer",
                    "song"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer.Singer_ID"
                    ],
                    "right_on": [
                        "song.Singer_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "singer.",
                    "rsuffix": "song."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "singer.Name"
                    ],
                    "agg_args": {
                        "song.Sales": [
                            "sum"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "singer.Name",
                        "(song.Sales,sum)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "id": "spider_770",
        "conversations": [
            {
                "input": [
                    "singer",
                    "song"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "singer.Singer_ID"
                    ],
                    "right_on": [
                        "song.Singer_ID"
                    ],
                    "how": "inner",
                    "lsuffix": "singer.",
                    "rsuffix": "song."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_groupby_agg_1"
                ],
                "command": "GroupbyAgg",
                "command_args": {
                    "by": [
                        "singer.Name"
                    ],
                    "agg_args": {
                        "song.Sales": [
                            "sum"
                        ]
                    }
                }
            },
            {
                "input": [
                    "df_groupby_agg_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "singer.Name",
                        "(song.Sales,sum)"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "id": "spider_771",
        "conversations": [
            {
                "input": [
                    "Other_Available_Features"
                ],
                "output": [
                    "df_statics_column_0"
                ],
                "command": "StaticsColumn",
                "command_args": {
                    "aggregate": {
                        "all": [
                            "count"
                        ]
                    },
                    "is_index": "null"
                }
            }
        ],
        "query": "SELECT count(*) FROM Other_Available_Features"
    },
    {
        "id": "spider_772",
        "conversations": [
            {
                "input": [
                    "Other_Available_Features",
                    "Ref_Feature_Types"
                ],
                "output": [
                    "df_join_0"
                ],
                "command": "Join",
                "command_args": {
                    "left_on": [
                        "Other_Available_Features.feature_type_code"
                    ],
                    "right_on": [
                        "Ref_Feature_Types.feature_type_code"
                    ],
                    "how": "inner",
                    "lsuffix": "Other_Available_Features.",
                    "rsuffix": "Ref_Feature_Types."
                }
            },
            {
                "input": [
                    "df_join_0"
                ],
                "output": [
                    "df_bool_1"
                ],
                "command": "Bool",
                "command_args": {
                    "column": [
                        "Other_Available_Features.feature_name"
                    ],
                    "index": "null",
                    "condition": "==",
                    "value": "AirCon"
                }
            },
            {
                "input": [
                    "df_join_0",
                    "df_bool_1"
                ],
                "output": [
                    "df_filter_2"
                ],
                "command": "Filter",
                "command_args": {
                    "columns": [
                        "Ref_Feature_Types.feature_type_name"
                    ],
                    "index": "null",
                    "axis": "null",
                    "slice": "null",
                    "type": "select"
                }
            }
        ],
        "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""
    }
]